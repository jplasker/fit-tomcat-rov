

Microchip Technology PIC18 LITE Macro Assembler V1.30 build 55553 
                                                                                               Thu Jun 02 11:03:11 2016

Microchip Technology Omniscient Code Generator (Lite mode) build 55553
     1                           	processor	18F4520
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1
     8                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
     9                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    10                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
    11                           	psect	text0,global,reloc=2,class=CODE,delta=1
    12                           	psect	text1,global,reloc=2,class=CODE,delta=1
    13                           	psect	text2,global,reloc=2,class=CODE,delta=1
    14                           	psect	text3,global,reloc=2,class=CODE,delta=1
    15                           	psect	text4,global,reloc=2,class=CODE,delta=1
    16                           	psect	text5,global,reloc=2,class=CODE,delta=1
    17                           	psect	text6,global,reloc=2,class=CODE,delta=1
    18                           	psect	text7,global,reloc=2,class=CODE,delta=1
    19                           	psect	text8,global,reloc=2,class=CODE,delta=1
    20                           	psect	text9,global,reloc=2,class=CODE,delta=1
    21                           	psect	text10,global,reloc=2,class=CODE,delta=1
    22                           	psect	text11,global,reloc=2,class=CODE,delta=1
    23                           	psect	text12,global,reloc=2,class=CODE,delta=1
    24                           	psect	text13,global,reloc=2,class=CODE,delta=1
    25                           	psect	text14,global,reloc=2,class=CODE,delta=1
    26                           	psect	text15,global,reloc=2,class=CODE,delta=1
    27                           	psect	text16,global,reloc=2,class=CODE,delta=1
    28                           	psect	text17,global,reloc=2,class=CODE,delta=1
    29                           	psect	text18,global,reloc=2,class=CODE,delta=1
    30                           	psect	text19,global,reloc=2,class=CODE,delta=1
    31                           	psect	text20,global,reloc=2,class=CODE,delta=1
    32                           	psect	text21,global,reloc=2,class=CODE,delta=1
    33                           	psect	text22,global,reloc=2,class=CODE,delta=1
    34                           	psect	text23,global,reloc=2,class=CODE,delta=1
    35                           	psect	text24,global,reloc=2,class=CODE,delta=1
    36                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    37                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    38                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
    39                           	psect	rparam,global,class=COMRAM,space=1,delta=1
    40  0000                     
    41                           	psect	smallconst
    42  000600                     __psmallconst:
    43                           	opt stack 0
    44  000600  00                 	db	0
    45  000601                     _char_map:
    46                           	opt stack 0
    47  000601  00                 	db	0
    48  000602  00                 	db	0
    49  000603  00                 	db	0
    50  000604  00                 	db	0
    51  000605  00                 	db	0
    52  000606  00                 	db	0
    53  000607  00                 	db	0
    54  000608  00                 	db	0
    55  000609  00                 	db	0
    56  00060A  00                 	db	0
    57  00060B  00                 	db	0
    58  00060C  00                 	db	0
    59  00060D  00                 	db	0
    60  00060E  00                 	db	0
    61  00060F  00                 	db	0
    62  000610  00                 	db	0
    63  000611  00                 	db	0
    64  000612  00                 	db	0
    65  000613  00                 	db	0
    66  000614  00                 	db	0
    67  000615  00                 	db	0
    68  000616  00                 	db	0
    69  000617  00                 	db	0
    70  000618  00                 	db	0
    71  000619  00                 	db	0
    72  00061A  00                 	db	0
    73  00061B  00                 	db	0
    74  00061C  00                 	db	0
    75  00061D  00                 	db	0
    76  00061E  00                 	db	0
    77  00061F  00                 	db	0
    78  000620  00                 	db	0
    79  000621  00                 	db	0
    80  000622  00                 	db	0
    81  000623  48                 	db	72
    82  000624  00                 	db	0
    83  000625  00                 	db	0
    84  000626  00                 	db	0
    85  000627  00                 	db	0
    86  000628  46                 	db	70
    87  000629  3F                 	db	63
    88  00062A  40                 	db	64
    89  00062B  00                 	db	0
    90  00062C  00                 	db	0
    91  00062D  45                 	db	69
    92  00062E  49                 	db	73
    93  00062F  41                 	db	65
    94  000630  47                 	db	71
    95  000631  0A                 	db	10
    96  000632  01                 	db	1
    97  000633  02                 	db	2
    98  000634  03                 	db	3
    99  000635  04                 	db	4
   100  000636  05                 	db	5
   101  000637  06                 	db	6
   102  000638  07                 	db	7
   103  000639  08                 	db	8
   104  00063A  09                 	db	9
   105  00063B  44                 	db	68
   106  00063C  43                 	db	67
   107  00063D  4A                 	db	74
   108  00063E  00                 	db	0
   109  00063F  4B                 	db	75
   110  000640  42                 	db	66
   111  000641  4C                 	db	76
   112  000642  0B                 	db	11
   113  000643  0C                 	db	12
   114  000644  0D                 	db	13
   115  000645  0E                 	db	14
   116  000646  0F                 	db	15
   117  000647  10                 	db	16
   118  000648  11                 	db	17
   119  000649  12                 	db	18
   120  00064A  13                 	db	19
   121  00064B  14                 	db	20
   122  00064C  15                 	db	21
   123  00064D  16                 	db	22
   124  00064E  17                 	db	23
   125  00064F  18                 	db	24
   126  000650  19                 	db	25
   127  000651  1A                 	db	26
   128  000652  1B                 	db	27
   129  000653  1C                 	db	28
   130  000654  1D                 	db	29
   131  000655  1E                 	db	30
   132  000656  1F                 	db	31
   133  000657  20                 	db	32
   134  000658  21                 	db	33
   135  000659  22                 	db	34
   136  00065A  23                 	db	35
   137  00065B  24                 	db	36
   138  00065C  00                 	db	0
   139  00065D  00                 	db	0
   140  00065E  00                 	db	0
   141  00065F  00                 	db	0
   142  000660  00                 	db	0
   143  000661  00                 	db	0
   144  000662  25                 	db	37
   145  000663  26                 	db	38
   146  000664  27                 	db	39
   147  000665  28                 	db	40
   148  000666  29                 	db	41
   149  000667  2A                 	db	42
   150  000668  2B                 	db	43
   151  000669  2C                 	db	44
   152  00066A  2D                 	db	45
   153  00066B  2E                 	db	46
   154  00066C  2F                 	db	47
   155  00066D  30                 	db	48
   156  00066E  31                 	db	49
   157  00066F  32                 	db	50
   158  000670  33                 	db	51
   159  000671  34                 	db	52
   160  000672  35                 	db	53
   161  000673  36                 	db	54
   162  000674  37                 	db	55
   163  000675  38                 	db	56
   164  000676  39                 	db	57
   165  000677  3A                 	db	58
   166  000678  3B                 	db	59
   167  000679  3C                 	db	60
   168  00067A  3D                 	db	61
   169  00067B  3E                 	db	62
   170  00067C  00                 	db	0
   171  00067D  00                 	db	0
   172  00067E  00                 	db	0
   173  00067F  00                 	db	0
   174  000680  00                 	db	0
   175  000681                     __end_of_char_map:
   176                           	opt stack 0
   177  000681                     _dpowers:
   178                           	opt stack 0
   179  000681  0001               	dw	1
   180  000683  000A               	dw	10
   181  000685  0064               	dw	100
   182  000687  03E8               	dw	1000
   183  000689  2710               	dw	10000
   184  00068B                     __end_of_dpowers:
   185                           	opt stack 0
   186  0000                     _ADCON0	set	4034
   187  0000                     _ADCON0bits	set	4034
   188  0000                     _ADCON1	set	4033
   189  0000                     _ADCON2	set	4032
   190  0000                     _ADRESH	set	4036
   191  0000                     _INTCON	set	4082
   192  0000                     _INTCON2bits	set	4081
   193  0000                     _INTCONbits	set	4082
   194  0000                     _LATCbits	set	3979
   195  0000                     _LATEbits	set	3981
   196  0000                     _PIE1	set	3997
   197  0000                     _PIE1bits	set	3997
   198  0000                     _PIR1bits	set	3998
   199  0000                     _PORTAbits	set	3968
   200  0000                     _PORTBbits	set	3969
   201  0000                     _PORTCbits	set	3970
   202  0000                     _PORTDbits	set	3971
   203  0000                     _RCREG	set	4014
   204  0000                     _RCSTA	set	4011
   205  0000                     _RCSTAbits	set	4011
   206  0000                     _SPBRG	set	4015
   207  0000                     _SPBRGH	set	4016
   208  0000                     _SSPBUF	set	4041
   209  0000                     _SSPCON1	set	4038
   210  0000                     _SSPCON1bits	set	4038
   211  0000                     _SSPSTAT	set	4039
   212  0000                     _SSPSTATbits	set	4039
   213  0000                     _T0CON	set	4053
   214  0000                     _TRISA	set	3986
   215  0000                     _TRISAbits	set	3986
   216  0000                     _TRISB	set	3987
   217  0000                     _TRISC	set	3988
   218  0000                     _TRISCbits	set	3988
   219  0000                     _TRISD	set	3989
   220  0000                     _TRISE	set	3990
   221  0000                     _TXREG	set	4013
   222  0000                     _TXSTA	set	4012
   223  0000                     _TXSTAbits	set	4012
   224  00068B                     __stringdata:
   225                           	opt stack 0
   226  00068B                     STR_1:
   227  00068B  24                 	db	36
   228  00068C  25                 	db	37
   229  00068D  64                 	db	100	;'d'
   230  00068E  2C                 	db	44
   231  00068F  25                 	db	37
   232  000690  64                 	db	100	;'d'
   233  000691  2C                 	db	44
   234  000692  25                 	db	37
   235  000693  64                 	db	100	;'d'
   236  000694  2C                 	db	44
   237  000695  25                 	db	37
   238  000696  64                 	db	100	;'d'
   239  000697  2C                 	db	44
   240  000698  25                 	db	37
   241  000699  64                 	db	100	;'d'
   242  00069A  2C                 	db	44
   243  00069B  25                 	db	37
   244  00069C  64                 	db	100	;'d'
   245  00069D  2C                 	db	44
   246  00069E  25                 	db	37
   247  00069F  64                 	db	100	;'d'
   248  0006A0  2C                 	db	44
   249  0006A1  25                 	db	37
   250  0006A2  64                 	db	100	;'d'
   251  0006A3  2C                 	db	44
   252  0006A4  25                 	db	37
   253  0006A5  64                 	db	100	;'d'
   254  0006A6  2C                 	db	44
   255  0006A7  25                 	db	37
   256  0006A8  64                 	db	100	;'d'
   257  0006A9  0A                 	db	10
   258  0006AA  00                 	db	0
   259  0006AB                     STR_2:
   260  0006AB  54                 	db	84	;'T'
   261  0006AC  65                 	db	101	;'e'
   262  0006AD  6D                 	db	109	;'m'
   263  0006AE  70                 	db	112	;'p'
   264  0006AF  3A                 	db	58	;':'
   265  0006B0  25                 	db	37
   266  0006B1  64                 	db	100	;'d'
   267  0006B2  43                 	db	67	;'C'
   268  0006B3  3B                 	db	59	;';'
   269  0006B4  25                 	db	37
   270  0006B5  64                 	db	100	;'d'
   271  0006B6  43                 	db	67	;'C'
   272  0006B7  00                 	db	0
   273  0006B8                     STR_4:
   274  0006B8  48                 	db	72	;'H'
   275  0006B9  64                 	db	100	;'d'
   276  0006BA  67                 	db	103	;'g'
   277  0006BB  3A                 	db	58	;':'
   278  0006BC  20                 	db	32
   279  0006BD  30                 	db	48	;'0'
   280  0006BE  30                 	db	48	;'0'
   281  0006BF  25                 	db	37
   282  0006C0  64                 	db	100	;'d'
   283  0006C1  00                 	db	0
   284  0006C2  00                 	db	0
   285  0006C3                     STR_3:
   286  0006C3  48                 	db	72	;'H'
   287  0006C4  64                 	db	100	;'d'
   288  0006C5  67                 	db	103	;'g'
   289  0006C6  3A                 	db	58	;':'
   290  0006C7  20                 	db	32
   291  0006C8  30                 	db	48	;'0'
   292  0006C9  25                 	db	37
   293  0006CA  64                 	db	100	;'d'
   294  0006CB  00                 	db	0
   295  0006CC  00                 	db	0
   296  0006CD                     STR_5:
   297  0006CD  48                 	db	72	;'H'
   298  0006CE  64                 	db	100	;'d'
   299  0006CF  67                 	db	103	;'g'
   300  0006D0  3A                 	db	58	;':'
   301  0006D1  20                 	db	32
   302  0006D2  25                 	db	37
   303  0006D3  64                 	db	100	;'d'
   304  0006D4  00                 	db	0
   305  0006D5  00                 	db	0
   306  0006D6                     STR_7:
   307  0006D6  2D                 	db	45
   308  0006D7  2D                 	db	45
   309  0006D8  20                 	db	32
   310  0006D9  2D                 	db	45
   311  0006DA  2D                 	db	45
   312  0006DB  00                 	db	0
   313  0006DC                     STR_6:
   314  0006DC  25                 	db	37
   315  0006DD  64                 	db	100	;'d'
   316  0006DE  20                 	db	32
   317  0006DF  6D                 	db	109	;'m'
   318  0006E0  00                 	db	0
   319  0006E1                     STR_8:
   320  0006E1  6C                 	db	108	;'l'
   321  0006E2  00                 	db	0
   322  0006E3                     __end_of__stringdata:
   323                           	opt stack 0
   324                           
   325                           ; #config settings
   326  0006E3  00                 	db	0	; dummy byte at the end
   327  0000                     
   328                           	psect	cinit
   329  0016F2                     __pcinit:
   330                           	opt stack 0
   331  0016F2                     start_initialization:
   332                           	opt stack 0
   333  0016F2                     __initialization:
   334                           	opt stack 0
   335                           
   336                           ; Clear objects allocated to BANK1 (2 bytes)
   337  0016F2  0101               	movlb	1
   338  0016F4  6BA5               	clrf	(__pbssBANK1+1)& (0+255),b
   339  0016F6  6BA4               	clrf	__pbssBANK1& (0+255),b
   340                           
   341                           ; Clear objects allocated to COMRAM (4 bytes)
   342  0016F8  6A49               	clrf	(__pbssCOMRAM+3)& (0+255),c
   343  0016FA  6A48               	clrf	(__pbssCOMRAM+2)& (0+255),c
   344  0016FC  6A47               	clrf	(__pbssCOMRAM+1)& (0+255),c
   345  0016FE  6A46               	clrf	__pbssCOMRAM& (0+255),c
   346  001700                     end_of_initialization:
   347                           	opt stack 0
   348  001700                     __end_of__initialization:
   349                           	opt stack 0
   350  001700  0E00               	movlw	low (__Lmediumconst shr (0+16))
   351  001702  6EF8               	movwf	tblptru,c
   352  001704  0100               	movlb	0
   353  001706  EF72  F003         	goto	_main	;jump to C main() function
   354                           tblptru	equ	0xFF8
   355                           
   356                           	psect	bssCOMRAM
   357  000046                     __pbssCOMRAM:
   358                           	opt stack 0
   359  000046                     strtok@sp:
   360                           	opt stack 0
   361  000046                     	ds	2
   362  000048                     _USART_Status:
   363                           	opt stack 0
   364  000048                     	ds	1
   365  000049                     _n:
   366                           	opt stack 0
   367  000049                     	ds	1
   368                           tblptru	equ	0xFF8
   369                           
   370                           	psect	bssBANK1
   371  0001A4                     __pbssBANK1:
   372                           	opt stack 0
   373  0001A4                     _recv_buff:
   374                           	opt stack 0
   375  0001A4                     	ds	1
   376  0001A5                     _recv_flag:
   377                           	opt stack 0
   378  0001A5                     	ds	1
   379                           tblptru	equ	0xFF8
   380                           
   381                           	psect	cstackBANK1
   382  000100                     __pcstackBANK1:
   383                           	opt stack 0
   384  000100                     main@buff:
   385                           	opt stack 0
   386                           
   387                           ; 60 bytes @ 0x0
   388  000100                     	ds	60
   389  00013C                     main@osd_buff:
   390                           	opt stack 0
   391                           
   392                           ; 30 bytes @ 0x3C
   393  00013C                     	ds	30
   394  00015A                     main@pitch:
   395                           	opt stack 0
   396                           
   397                           ; 2 bytes @ 0x5A
   398  00015A                     	ds	2
   399  00015C                     main@roll:
   400                           	opt stack 0
   401                           
   402                           ; 2 bytes @ 0x5C
   403  00015C                     	ds	2
   404  00015E                     main@int_press:
   405                           	opt stack 0
   406                           
   407                           ; 2 bytes @ 0x5E
   408  00015E                     	ds	2
   409  000160                     main@osd_buff_870:
   410                           	opt stack 0
   411                           
   412                           ; 30 bytes @ 0x60
   413  000160                     	ds	30
   414  00017E                     main@depth:
   415                           	opt stack 0
   416                           
   417                           ; 2 bytes @ 0x7E
   418  00017E                     	ds	2
   419  000180                     main@ex_temp:
   420                           	opt stack 0
   421                           
   422                           ; 2 bytes @ 0x80
   423  000180                     	ds	2
   424  000182                     main@int_temp:
   425                           	opt stack 0
   426                           
   427                           ; 2 bytes @ 0x82
   428  000182                     	ds	2
   429  000184                     main@output:
   430                           	opt stack 0
   431                           
   432                           ; 20 bytes @ 0x84
   433  000184                     	ds	20
   434  000198                     main@temp1:
   435                           	opt stack 0
   436                           
   437                           ; 2 bytes @ 0x98
   438  000198                     	ds	2
   439  00019A                     main@temp2:
   440                           	opt stack 0
   441                           
   442                           ; 2 bytes @ 0x9A
   443  00019A                     	ds	2
   444  00019C                     main@check:
   445                           	opt stack 0
   446                           
   447                           ; 2 bytes @ 0x9C
   448  00019C                     	ds	2
   449  00019E                     main@out_count:
   450                           	opt stack 0
   451                           
   452                           ; 2 bytes @ 0x9E
   453  00019E                     	ds	2
   454  0001A0                     main@heading:
   455                           	opt stack 0
   456                           
   457                           ; 2 bytes @ 0xA0
   458  0001A0                     	ds	2
   459  0001A2                     main@token:
   460                           	opt stack 0
   461                           
   462                           ; 2 bytes @ 0xA2
   463  0001A2                     	ds	2
   464                           tblptru	equ	0xFF8
   465                           
   466                           	psect	cstackCOMRAM
   467  000001                     __pcstackCOMRAM:
   468                           	opt stack 0
   469  000001                     ??_isr:
   470  000001                     
   471                           ; 1 bytes @ 0x0
   472  000001                     	ds	15
   473  000010                     ??_read_an:
   474  000010                     ??_isdigit:
   475  000010                     ?_get_claw:
   476                           	opt stack 0
   477  000010                     ?_get_wrist:
   478                           	opt stack 0
   479  000010                     ?_strlen:
   480                           	opt stack 0
   481  000010                     ?___lwdiv:
   482                           	opt stack 0
   483  000010                     ?___wmul:
   484                           	opt stack 0
   485  000010                     ?_strchr:
   486                           	opt stack 0
   487  000010                     OpenSPI@bus_mode:
   488                           	opt stack 0
   489  000010                     ReadSPI@TempVar:
   490                           	opt stack 0
   491  000010                     WriteSPI@TempVar:
   492                           	opt stack 0
   493  000010                     WriteUSART@data:
   494                           	opt stack 0
   495  000010                     OpenUSART@spbrg:
   496                           	opt stack 0
   497  000010                     ___lwdiv@dividend:
   498                           	opt stack 0
   499  000010                     strlen@s:
   500                           	opt stack 0
   501  000010                     ___wmul@multiplier:
   502                           	opt stack 0
   503  000010                     strchr@ptr:
   504                           	opt stack 0
   505                           
   506                           ; 3 bytes @ 0xF
   507  000010                     	ds	1
   508  000011                     read_an@channel:
   509                           	opt stack 0
   510  000011                     OpenSPI@smp_phase:
   511                           	opt stack 0
   512  000011                     WriteSPI@data_out:
   513                           	opt stack 0
   514  000011                     _isdigit$2144:
   515                           	opt stack 0
   516  000011                     putsUSART@data:
   517                           	opt stack 0
   518                           
   519                           ; 2 bytes @ 0x10
   520  000011                     	ds	1
   521  000012                     ??_OpenUSART:
   522  000012                     ??_strlen:
   523  000012                     ??_OSD_disp:
   524  000012                     read_an@num:
   525                           	opt stack 0
   526  000012                     OpenSPI@sync_mode:
   527                           	opt stack 0
   528  000012                     isdigit@c:
   529                           	opt stack 0
   530  000012                     get_claw@claw:
   531                           	opt stack 0
   532  000012                     get_wrist@wrist:
   533                           	opt stack 0
   534  000012                     ___lwdiv@divisor:
   535                           	opt stack 0
   536  000012                     ___wmul@multiplicand:
   537                           	opt stack 0
   538                           
   539                           ; 2 bytes @ 0x11
   540  000012                     	ds	1
   541  000013                     OSD_disp@_on:
   542                           	opt stack 0
   543  000013                     strchr@chr:
   544                           	opt stack 0
   545                           
   546                           ; 2 bytes @ 0x12
   547  000013                     	ds	1
   548  000014                     ??___lwdiv:
   549  000014                     OSD_disp@vm0:
   550                           	opt stack 0
   551  000014                     strlen@cp:
   552                           	opt stack 0
   553  000014                     ___wmul@product:
   554                           	opt stack 0
   555                           
   556                           ; 2 bytes @ 0x13
   557  000014                     	ds	1
   558  000015                     ??_OSD_init:
   559  000015                     ??_strchr:
   560  000015                     OpenUSART@config:
   561                           	opt stack 0
   562  000015                     ___lwdiv@quotient:
   563                           	opt stack 0
   564                           
   565                           ; 2 bytes @ 0x14
   566  000015                     	ds	1
   567  000016                     ?_atoi:
   568                           	opt stack 0
   569  000016                     OSD_write@_col:
   570                           	opt stack 0
   571  000016                     atoi@s:
   572                           	opt stack 0
   573                           
   574                           ; 2 bytes @ 0x15
   575  000016                     	ds	1
   576  000017                     OSD_write@_font:
   577                           	opt stack 0
   578  000017                     ___lwdiv@counter:
   579                           	opt stack 0
   580                           
   581                           ; 1 bytes @ 0x16
   582  000017                     	ds	1
   583  000018                     ??_atoi:
   584  000018                     ??_OSD_write:
   585  000018                     ?_strspn:
   586                           	opt stack 0
   587  000018                     ?_strcspn:
   588                           	opt stack 0
   589  000018                     ?___lwmod:
   590                           	opt stack 0
   591  000018                     ___lwmod@dividend:
   592                           	opt stack 0
   593  000018                     strcspn@s1:
   594                           	opt stack 0
   595  000018                     strspn@s1:
   596                           	opt stack 0
   597                           
   598                           ; 2 bytes @ 0x17
   599  000018                     	ds	2
   600  00001A                     atoi@sign:
   601                           	opt stack 0
   602  00001A                     ___lwmod@divisor:
   603                           	opt stack 0
   604  00001A                     strcspn@s2:
   605                           	opt stack 0
   606  00001A                     strspn@s2:
   607                           	opt stack 0
   608                           
   609                           ; 3 bytes @ 0x19
   610  00001A                     	ds	1
   611  00001B                     OSD_write@_row:
   612                           	opt stack 0
   613  00001B                     atoi@a:
   614                           	opt stack 0
   615                           
   616                           ; 2 bytes @ 0x1A
   617  00001B                     	ds	1
   618  00001C                     ??___lwmod:
   619  00001C                     OSD_write@posl:
   620                           	opt stack 0
   621                           
   622                           ; 1 bytes @ 0x1B
   623  00001C                     	ds	1
   624  00001D                     ??_strspn:
   625  00001D                     ??_strcspn:
   626  00001D                     OSD_write@posh:
   627                           	opt stack 0
   628  00001D                     ___lwmod@counter:
   629                           	opt stack 0
   630                           
   631                           ; 1 bytes @ 0x1C
   632  00001D                     	ds	1
   633  00001E                     ?_sprintf:
   634                           	opt stack 0
   635  00001E                     OSD_write@pos:
   636                           	opt stack 0
   637  00001E                     sprintf@sp:
   638                           	opt stack 0
   639  00001E                     strcspn@i:
   640                           	opt stack 0
   641  00001E                     strspn@i:
   642                           	opt stack 0
   643                           
   644                           ; 2 bytes @ 0x1D
   645  00001E                     	ds	2
   646  000020                     ?_strtok:
   647                           	opt stack 0
   648  000020                     Str_output@row:
   649                           	opt stack 0
   650  000020                     sprintf@f:
   651                           	opt stack 0
   652  000020                     strtok@s1:
   653                           	opt stack 0
   654                           
   655                           ; 2 bytes @ 0x1F
   656  000020                     	ds	2
   657  000022                     Str_output@col:
   658                           	opt stack 0
   659  000022                     strtok@s2:
   660                           	opt stack 0
   661                           
   662                           ; 3 bytes @ 0x21
   663  000022                     	ds	2
   664  000024                     Str_output@word:
   665                           	opt stack 0
   666                           
   667                           ; 2 bytes @ 0x23
   668  000024                     	ds	1
   669  000025                     
   670                           ; 0 bytes @ 0x24
   671  000025                     	ds	1
   672  000026                     Str_output@num:
   673                           	opt stack 0
   674                           
   675                           ; 1 bytes @ 0x25
   676  000026                     	ds	1
   677  000027                     ??_Str_output:
   678                           
   679                           ; 0 bytes @ 0x26
   680  000027                     	ds	1
   681  000028                     Str_output@n:
   682                           	opt stack 0
   683                           
   684                           ; 1 bytes @ 0x27
   685  000028                     	ds	14
   686  000036                     ??_sprintf:
   687                           
   688                           ; 0 bytes @ 0x35
   689  000036                     	ds	2
   690  000038                     sprintf@ap:
   691                           	opt stack 0
   692                           
   693                           ; 2 bytes @ 0x37
   694  000038                     	ds	2
   695  00003A                     sprintf@flag:
   696                           	opt stack 0
   697                           
   698                           ; 1 bytes @ 0x39
   699  00003A                     	ds	1
   700  00003B                     sprintf@prec:
   701                           	opt stack 0
   702                           
   703                           ; 1 bytes @ 0x3A
   704  00003B                     	ds	1
   705  00003C                     sprintf@_val:
   706                           	opt stack 0
   707                           
   708                           ; 5 bytes @ 0x3B
   709  00003C                     	ds	5
   710  000041                     sprintf@c:
   711                           	opt stack 0
   712                           
   713                           ; 1 bytes @ 0x40
   714  000041                     	ds	1
   715  000042                     ??_main:
   716                           
   717                           ; 0 bytes @ 0x41
   718  000042                     	ds	4
   719                           tblptru	equ	0xFF8
   720                           
   721 ;;
   722 ;;Main: autosize = 0, tempsize = 4, incstack = 0, save=0
   723 ;;
   724 ;; *************** function _main *****************
   725 ;; Defined at:
   726 ;;		line 39 in file "Tomcat_S_main.c"
   727 ;; Parameters:    Size  Location     Type
   728 ;;		None
   729 ;; Auto vars:     Size  Location     Type
   730 ;;  token           2  162[BANK1 ] PTR unsigned char 
   731 ;;		 -> NULL(0), RAM(1535), 
   732 ;;  osd_buff       30   96[BANK1 ] unsigned char [30]
   733 ;;  buff           60    0[BANK1 ] unsigned char [60]
   734 ;;  osd_buff       30   60[BANK1 ] unsigned char [30]
   735 ;;  output         20  132[BANK1 ] int [10]
   736 ;;  heading         2  160[BANK1 ] int 
   737 ;;  out_count       2  158[BANK1 ] int 
   738 ;;  check           2  156[BANK1 ] unsigned int 
   739 ;;  temp2           2  154[BANK1 ] int 
   740 ;;  temp1           2  152[BANK1 ] int 
   741 ;;  int_temp        2  130[BANK1 ] int 
   742 ;;  ex_temp         2  128[BANK1 ] int 
   743 ;;  depth           2  126[BANK1 ] int 
   744 ;;  int_press       2   94[BANK1 ] int 
   745 ;;  roll            2   92[BANK1 ] int 
   746 ;;  pitch           2   90[BANK1 ] int 
   747 ;; Return value:  Size  Location     Type
   748 ;;		None               void
   749 ;; Registers used:
   750 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, btemp+8, btemp+9, btemp+10, btemp+11, tosl, structret, tblptrl, tblptrh, tblp
      +tru, prodl, prodh, bsr, cstack
   751 ;; Tracked objects:
   752 ;;		On entry : 0/0
   753 ;;		On exit  : 0/0
   754 ;;		Unchanged: 0/0
   755 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   756 ;;      Params:         0       0       0       0       0       0       0
   757 ;;      Locals:         0       0     164       0       0       0       0
   758 ;;      Temps:          4       0       0       0       0       0       0
   759 ;;      Totals:         4       0     164       0       0       0       0
   760 ;;Total ram usage:      168 bytes
   761 ;; Hardware stack levels required when called:    4
   762 ;; This function calls:
   763 ;;		_OSD_init
   764 ;;		_OSD_write
   765 ;;		_OpenUSART
   766 ;;		_Str_output
   767 ;;		_atoi
   768 ;;		_get_claw
   769 ;;		_get_wrist
   770 ;;		_putsUSART
   771 ;;		_read_an
   772 ;;		_sprintf
   773 ;;		_strlen
   774 ;;		_strtok
   775 ;; This function is called by:
   776 ;;		Startup code after reset
   777 ;; This function uses a non-reentrant model
   778 ;;
   779                           
   780                           	psect	text0
   781  0006E4                     __ptext0:
   782                           	opt stack 0
   783  0006E4                     _main:
   784                           	opt stack 27
   785                           
   786                           ;Tomcat_S_main.c: 40: char buff[60];
   787                           ;Tomcat_S_main.c: 41: int depth, heading, pitch, roll, ex_temp, int_temp, int_press;
   788                           ;Tomcat_S_main.c: 42: int temp1=0,temp2=0;
   789                           
   790                           ;incstack = 0
   791  0006E4  0E00               	movlw	0
   792  0006E6  0101               	movlb	1	; () banked
   793  0006E8  0101               	movlb	1	; () banked
   794  0006EA  6F99               	movwf	(main@temp1+1)& (0+255),b
   795  0006EC  0E00               	movlw	0
   796  0006EE  0101               	movlb	1	; () banked
   797  0006F0  6F98               	movwf	main@temp1& (0+255),b
   798  0006F2  0E00               	movlw	0
   799  0006F4  0101               	movlb	1	; () banked
   800  0006F6  0101               	movlb	1	; () banked
   801  0006F8  6F9B               	movwf	(main@temp2+1)& (0+255),b
   802  0006FA  0E00               	movlw	0
   803  0006FC  0101               	movlb	1	; () banked
   804  0006FE  6F9A               	movwf	main@temp2& (0+255),b
   805                           
   806                           ;Tomcat_S_main.c: 43: char osd_buff[30];
   807                           ;Tomcat_S_main.c: 44: int output[10];
   808                           ;Tomcat_S_main.c: 45: unsigned int check = 0;
   809  000700  0E00               	movlw	0
   810  000702  0101               	movlb	1	; () banked
   811  000704  0101               	movlb	1	; () banked
   812  000706  6F9D               	movwf	(main@check+1)& (0+255),b
   813  000708  0E00               	movlw	0
   814  00070A  0101               	movlb	1	; () banked
   815  00070C  6F9C               	movwf	main@check& (0+255),b
   816                           
   817                           ;Tomcat_S_main.c: 46: int out_count = 0;
   818  00070E  0E00               	movlw	0
   819  000710  0101               	movlb	1	; () banked
   820  000712  0101               	movlb	1	; () banked
   821  000714  6F9F               	movwf	(main@out_count+1)& (0+255),b
   822  000716  0E00               	movlw	0
   823  000718  0101               	movlb	1	; () banked
   824  00071A  6F9E               	movwf	main@out_count& (0+255),b
   825                           
   826                           ; BSR set to: 1
   827                           ;Tomcat_S_main.c: 49: TRISA = 0b11111111;
   828  00071C  6892               	setf	3986,c	;volatile
   829                           
   830                           ;Tomcat_S_main.c: 50: TRISB = 0b00111000;
   831  00071E  0E38               	movlw	56
   832  000720  6E93               	movwf	3987,c	;volatile
   833                           
   834                           ;Tomcat_S_main.c: 51: TRISC = 0b10100111;
   835  000722  0EA7               	movlw	167
   836  000724  6E94               	movwf	3988,c	;volatile
   837                           
   838                           ;Tomcat_S_main.c: 52: TRISD = 0b00011111;
   839  000726  0E1F               	movlw	31
   840  000728  6E95               	movwf	3989,c	;volatile
   841                           
   842                           ;Tomcat_S_main.c: 53: TRISE = 0b00000011;
   843  00072A  0E03               	movlw	3
   844  00072C  6E96               	movwf	3990,c	;volatile
   845                           
   846                           ; BSR set to: 1
   847                           ;Tomcat_S_main.c: 54: LATEbits.LATE2 = 1;
   848  00072E  848D               	bsf	3981,2,c	;volatile
   849                           
   850                           ; BSR set to: 1
   851                           ;Tomcat_S_main.c: 56: INTCON2bits.RBPU=1;
   852  000730  8EF1               	bsf	intcon2,7,c	;volatile
   853                           
   854                           ;Tomcat_S_main.c: 57: PIE1 = 0b00110000;
   855  000732  0E30               	movlw	48
   856  000734  6E9D               	movwf	3997,c	;volatile
   857                           
   858                           ;Tomcat_S_main.c: 58: ADCON1 = 0b00001010;
   859  000736  0E0A               	movlw	10
   860  000738  6EC1               	movwf	4033,c	;volatile
   861                           
   862                           ;Tomcat_S_main.c: 59: ADCON2 = 0b00010111;
   863  00073A  0E17               	movlw	23
   864  00073C  6EC0               	movwf	4032,c	;volatile
   865                           
   866                           ; BSR set to: 1
   867                           ;Tomcat_S_main.c: 60: ADCON0bits.ADON = 1;
   868  00073E  80C2               	bsf	4034,0,c	;volatile
   869                           
   870                           ; BSR set to: 1
   871                           ;Tomcat_S_main.c: 61: OSD_init();
   872  000740  EC82  F007         	call	_OSD_init	;wreg free
   873                           
   874                           ;Tomcat_S_main.c: 62: OpenUSART(0b01111111 &
   875                           ;Tomcat_S_main.c: 63: 0b11111111 &
   876                           ;Tomcat_S_main.c: 64: 0b11111110 &
   877                           ;Tomcat_S_main.c: 65: 0b11111101 &
   878                           ;Tomcat_S_main.c: 66: 0b11111111 &
   879                           ;Tomcat_S_main.c: 67: 0b11111111, 131);
   880  000744  0E00               	movlw	0
   881  000746  6E11               	movwf	OpenUSART@spbrg+1,c
   882  000748  0E83               	movlw	131
   883  00074A  6E10               	movwf	OpenUSART@spbrg,c
   884  00074C  0E7C               	movlw	124
   885  00074E  EC48  F009         	call	_OpenUSART
   886  000752                     l1683:
   887                           
   888                           ;Tomcat_S_main.c: 74: temp1 = read_an(1)-133;
   889  000752  0E01               	movlw	1
   890  000754  EC00  F00B         	call	_read_an
   891  000758  6E42               	movwf	??_main& (0+255),c
   892  00075A  0E7B               	movlw	123
   893  00075C  2442               	addwf	??_main,w,c
   894  00075E  0101               	movlb	1	; () banked
   895  000760  0101               	movlb	1	; () banked
   896  000762  6F98               	movwf	main@temp1& (0+255),b
   897  000764  0101               	movlb	1	; () banked
   898  000766  0101               	movlb	1	; () banked
   899  000768  6B99               	clrf	(main@temp1+1)& (0+255),b
   900  00076A  0EFF               	movlw	255
   901  00076C  2399               	addwfc	(main@temp1+1)& (0+255),f,b
   902                           
   903                           ; BSR set to: 1
   904                           ;Tomcat_S_main.c: 75: temp2 = read_an(3)-89;
   905  00076E  0E03               	movlw	3
   906  000770  EC00  F00B         	call	_read_an
   907  000774  6E42               	movwf	??_main& (0+255),c
   908  000776  0EA7               	movlw	167
   909  000778  2442               	addwf	??_main,w,c
   910  00077A  0101               	movlb	1	; () banked
   911  00077C  0101               	movlb	1	; () banked
   912  00077E  6F9A               	movwf	main@temp2& (0+255),b
   913  000780  0101               	movlb	1	; () banked
   914  000782  0101               	movlb	1	; () banked
   915  000784  6B9B               	clrf	(main@temp2+1)& (0+255),b
   916  000786  0EFF               	movlw	255
   917  000788  239B               	addwfc	(main@temp2+1)& (0+255),f,b
   918                           
   919                           ; BSR set to: 1
   920                           ;Tomcat_S_main.c: 76: output[1] = temp1+temp2+127;
   921  00078A  0101               	movlb	1	; () banked
   922  00078C  C198  F042         	movff	main@temp1,??_main
   923  000790  0101               	movlb	1	; () banked
   924  000792  C199  F043         	movff	main@temp1+1,??_main+1
   925  000796  0101               	movlb	1	; () banked
   926  000798  0101               	movlb	1	; () banked
   927  00079A  519A               	movf	main@temp2& (0+255),w,b
   928  00079C  2642               	addwf	??_main,f,c
   929  00079E  0101               	movlb	1	; () banked
   930  0007A0  0101               	movlb	1	; () banked
   931  0007A2  519B               	movf	(main@temp2+1)& (0+255),w,b
   932  0007A4  2243               	addwfc	??_main+1,f,c
   933  0007A6  0E7F               	movlw	127
   934  0007A8  2442               	addwf	??_main,w,c
   935  0007AA  0101               	movlb	1	; () banked
   936  0007AC  0101               	movlb	1	; () banked
   937  0007AE  6F86               	movwf	(main@output+2)& (0+255),b
   938  0007B0  0E00               	movlw	0
   939  0007B2  2043               	addwfc	??_main+1,w,c
   940  0007B4  0101               	movlb	1	; () banked
   941  0007B6  6F87               	movwf	(main@output+3)& (0+255),b
   942                           
   943                           ; BSR set to: 1
   944                           ;Tomcat_S_main.c: 77: output[2] = temp1-temp2+127;
   945  0007B8  0101               	movlb	1	; () banked
   946  0007BA  C19A  F042         	movff	main@temp2,??_main
   947  0007BE  0101               	movlb	1	; () banked
   948  0007C0  C19B  F043         	movff	main@temp2+1,??_main+1
   949  0007C4  1E42               	comf	??_main,f,c
   950  0007C6  1E43               	comf	??_main+1,f,c
   951  0007C8  4A42               	infsnz	??_main,f,c
   952  0007CA  2A43               	incf	??_main+1,f,c
   953  0007CC  0101               	movlb	1	; () banked
   954  0007CE  0101               	movlb	1	; () banked
   955  0007D0  5198               	movf	main@temp1& (0+255),w,b
   956  0007D2  2642               	addwf	??_main,f,c
   957  0007D4  0101               	movlb	1	; () banked
   958  0007D6  0101               	movlb	1	; () banked
   959  0007D8  5199               	movf	(main@temp1+1)& (0+255),w,b
   960  0007DA  2243               	addwfc	??_main+1,f,c
   961  0007DC  0E7F               	movlw	127
   962  0007DE  2442               	addwf	??_main,w,c
   963  0007E0  0101               	movlb	1	; () banked
   964  0007E2  0101               	movlb	1	; () banked
   965  0007E4  6F88               	movwf	(main@output+4)& (0+255),b
   966  0007E6  0E00               	movlw	0
   967  0007E8  2043               	addwfc	??_main+1,w,c
   968  0007EA  0101               	movlb	1	; () banked
   969  0007EC  6F89               	movwf	(main@output+5)& (0+255),b
   970                           
   971                           ; BSR set to: 1
   972                           ;Tomcat_S_main.c: 78: output[3] = read_an(0)-20;
   973  0007EE  0E00               	movlw	0
   974  0007F0  EC00  F00B         	call	_read_an
   975  0007F4  6E42               	movwf	??_main& (0+255),c
   976  0007F6  0EEC               	movlw	236
   977  0007F8  2442               	addwf	??_main,w,c
   978  0007FA  0101               	movlb	1	; () banked
   979  0007FC  0101               	movlb	1	; () banked
   980  0007FE  6F8A               	movwf	(main@output+6)& (0+255),b
   981  000800  0101               	movlb	1	; () banked
   982  000802  0101               	movlb	1	; () banked
   983  000804  6B8B               	clrf	(main@output+7)& (0+255),b
   984  000806  0EFF               	movlw	255
   985  000808  238B               	addwfc	(main@output+7)& (0+255),f,b
   986                           
   987                           ; BSR set to: 1
   988                           ;Tomcat_S_main.c: 79: output[4] = read_an(2)+10;
   989  00080A  0E02               	movlw	2
   990  00080C  EC00  F00B         	call	_read_an
   991  000810  6E42               	movwf	??_main& (0+255),c
   992  000812  0E0A               	movlw	10
   993  000814  2442               	addwf	??_main,w,c
   994  000816  0101               	movlb	1	; () banked
   995  000818  0101               	movlb	1	; () banked
   996  00081A  6F8C               	movwf	(main@output+8)& (0+255),b
   997  00081C  0101               	movlb	1	; () banked
   998  00081E  0101               	movlb	1	; () banked
   999  000820  6B8D               	clrf	(main@output+9)& (0+255),b
  1000  000822  0E00               	movlw	0
  1001  000824  238D               	addwfc	(main@output+9)& (0+255),f,b
  1002                           
  1003                           ; BSR set to: 1
  1004                           ;Tomcat_S_main.c: 80: output[5] = get_claw();
  1005  000826  EC2F  F00B         	call	_get_claw	;wreg free
  1006  00082A  C010  F18E         	movff	?_get_claw,main@output+10
  1007  00082E  C011  F18F         	movff	?_get_claw+1,main@output+11
  1008                           
  1009                           ;Tomcat_S_main.c: 81: output[6] = get_wrist();
  1010  000832  EC1A  F00B         	call	_get_wrist	;wreg free
  1011  000836  C010  F190         	movff	?_get_wrist,main@output+12
  1012  00083A  C011  F191         	movff	?_get_wrist+1,main@output+13
  1013                           
  1014                           ;Tomcat_S_main.c: 82: output[7] = read_an(5);
  1015  00083E  0E05               	movlw	5
  1016  000840  EC00  F00B         	call	_read_an
  1017  000844  6E42               	movwf	??_main& (0+255),c
  1018  000846  5042               	movf	??_main,w,c
  1019  000848  0101               	movlb	1	; () banked
  1020  00084A  0101               	movlb	1	; () banked
  1021  00084C  6F92               	movwf	(main@output+14)& (0+255),b
  1022  00084E  0101               	movlb	1	; () banked
  1023  000850  6B93               	clrf	(main@output+15)& (0+255),b
  1024                           
  1025                           ; BSR set to: 1
  1026                           ;Tomcat_S_main.c: 83: output[8] = read_an(6);
  1027  000852  0E06               	movlw	6
  1028  000854  EC00  F00B         	call	_read_an
  1029  000858  6E42               	movwf	??_main& (0+255),c
  1030  00085A  5042               	movf	??_main,w,c
  1031  00085C  0101               	movlb	1	; () banked
  1032  00085E  0101               	movlb	1	; () banked
  1033  000860  6F94               	movwf	(main@output+16)& (0+255),b
  1034  000862  0101               	movlb	1	; () banked
  1035  000864  6B95               	clrf	(main@output+17)& (0+255),b
  1036                           
  1037                           ; BSR set to: 1
  1038                           ;Tomcat_S_main.c: 84: output[9] = PORTBbits.RB3;
  1039  000866  A681               	btfss	3969,3,c	;volatile
  1040  000868  D003               	goto	u710
  1041  00086A  6A42               	clrf	??_main& (0+255),c
  1042  00086C  2A42               	incf	??_main& (0+255),f,c
  1043  00086E  D001               	goto	u718
  1044  000870                     u710:
  1045  000870  6A42               	clrf	??_main& (0+255),c
  1046  000872                     u718:
  1047  000872  5042               	movf	??_main,w,c
  1048  000874  0101               	movlb	1	; () banked
  1049  000876  0101               	movlb	1	; () banked
  1050  000878  6F96               	movwf	(main@output+18)& (0+255),b
  1051  00087A  0101               	movlb	1	; () banked
  1052  00087C  6B97               	clrf	(main@output+19)& (0+255),b
  1053                           
  1054                           ; BSR set to: 1
  1055                           ;Tomcat_S_main.c: 89: check = 0;
  1056  00087E  0E00               	movlw	0
  1057  000880  0101               	movlb	1	; () banked
  1058  000882  0101               	movlb	1	; () banked
  1059  000884  6F9D               	movwf	(main@check+1)& (0+255),b
  1060  000886  0E00               	movlw	0
  1061  000888  0101               	movlb	1	; () banked
  1062  00088A  6F9C               	movwf	main@check& (0+255),b
  1063                           
  1064                           ; BSR set to: 1
  1065                           ;Tomcat_S_main.c: 90: for (out_count = 1; out_count <= 9; out_count++) {
  1066  00088C  0E00               	movlw	0
  1067  00088E  0101               	movlb	1	; () banked
  1068  000890  0101               	movlb	1	; () banked
  1069  000892  6F9F               	movwf	(main@out_count+1)& (0+255),b
  1070  000894  0E01               	movlw	1
  1071  000896  0101               	movlb	1	; () banked
  1072  000898  6F9E               	movwf	main@out_count& (0+255),b
  1073  00089A                     
  1074                           ; BSR set to: 1
  1075  00089A  0101               	movlb	1	; () banked
  1076  00089C  0101               	movlb	1	; () banked
  1077  00089E  519F               	movf	(main@out_count+1)& (0+255),w,b
  1078  0008A0  0A80               	xorlw	128
  1079  0008A2  0F80               	addlw	-128
  1080  0008A4  0E0A               	movlw	10
  1081  0008A6  B4D8               	btfsc	status,2,c
  1082  0008A8  5D9E               	subwf	main@out_count& (0+255),w,b
  1083  0008AA  B0D8               	btfsc	status,0,c
  1084  0008AC  D027               	goto	l1719
  1085                           
  1086                           ; BSR set to: 1
  1087                           ;Tomcat_S_main.c: 91: check = output[out_count] + check;
  1088                           
  1089                           ; BSR set to: 1
  1090                           
  1091                           ; BSR set to: 1
  1092  0008AE  90D8               	bcf	status,0,c
  1093  0008B0  0101               	movlb	1	; () banked
  1094  0008B2  0101               	movlb	1	; () banked
  1095  0008B4  359E               	rlcf	main@out_count& (0+255),w,b
  1096  0008B6  6E42               	movwf	??_main& (0+255),c
  1097  0008B8  0101               	movlb	1	; () banked
  1098  0008BA  0101               	movlb	1	; () banked
  1099  0008BC  359F               	rlcf	(main@out_count+1)& (0+255),w,b
  1100  0008BE  6E43               	movwf	(??_main+1)& (0+255),c
  1101  0008C0  0101               	movlb	1	; () banked
  1102  0008C2  0E84               	movlw	low main@output
  1103  0008C4  2442               	addwf	??_main,w,c
  1104  0008C6  6ED9               	movwf	fsr2l,c
  1105  0008C8  0101               	movlb	1	; () banked
  1106  0008CA  0E01               	movlw	high main@output
  1107  0008CC  2043               	addwfc	??_main+1,w,c
  1108  0008CE  6EDA               	movwf	fsr2h,c
  1109  0008D0  CFDE F044          	movff	postinc2,??_main+2
  1110  0008D4  CFDD F045          	movff	postdec2,??_main+3
  1111  0008D8  0101               	movlb	1	; () banked
  1112  0008DA  0101               	movlb	1	; () banked
  1113  0008DC  519C               	movf	main@check& (0+255),w,b
  1114  0008DE  2444               	addwf	??_main+2,w,c
  1115  0008E0  0101               	movlb	1	; () banked
  1116  0008E2  0101               	movlb	1	; () banked
  1117  0008E4  6F9C               	movwf	main@check& (0+255),b
  1118  0008E6  0101               	movlb	1	; () banked
  1119  0008E8  0101               	movlb	1	; () banked
  1120  0008EA  519D               	movf	(main@check+1)& (0+255),w,b
  1121  0008EC  2045               	addwfc	??_main+3,w,c
  1122  0008EE  0101               	movlb	1	; () banked
  1123  0008F0  6F9D               	movwf	(main@check+1)& (0+255),b
  1124                           
  1125                           ; BSR set to: 1
  1126  0008F2  0101               	movlb	1	; () banked
  1127  0008F4  0101               	movlb	1	; () banked
  1128  0008F6  4B9E               	infsnz	main@out_count& (0+255),f,b
  1129  0008F8  2B9F               	incf	(main@out_count+1)& (0+255),f,b
  1130  0008FA  D7CF               	goto	L1
  1131  0008FC                     l1719:
  1132                           
  1133                           ; BSR set to: 1
  1134                           ;Tomcat_S_main.c: 92: }
  1135                           ;Tomcat_S_main.c: 93: sprintf(buff, "$%d,%d,%d,%d,%d,%d,%d,%d,%d,%d\n", output[1], outpu
      +                          t[2], output[3], output[4], output[5],
  1136                           ;Tomcat_S_main.c: 94: output[6], output[7], output[8], output[9], check);
  1137  0008FC  0101               	movlb	1	; () banked
  1138  0008FE  0E01               	movlw	high main@buff
  1139  000900  6E1F               	movwf	sprintf@sp+1,c
  1140  000902  0101               	movlb	1	; () banked
  1141  000904  0E00               	movlw	low main@buff
  1142  000906  6E1E               	movwf	sprintf@sp,c
  1143  000908  0E06               	movlw	high STR_1
  1144  00090A  6E21               	movwf	sprintf@f+1,c
  1145  00090C  0E8B               	movlw	low STR_1
  1146  00090E  6E20               	movwf	sprintf@f,c
  1147  000910  C186  F022         	movff	main@output+2,?_sprintf+4
  1148  000914  C187  F023         	movff	main@output+3,?_sprintf+5
  1149  000918  C188  F024         	movff	main@output+4,?_sprintf+6
  1150  00091C  C189  F025         	movff	main@output+5,?_sprintf+7
  1151  000920  C18A  F026         	movff	main@output+6,?_sprintf+8
  1152  000924  C18B  F027         	movff	main@output+7,?_sprintf+9
  1153  000928  C18C  F028         	movff	main@output+8,?_sprintf+10
  1154  00092C  C18D  F029         	movff	main@output+9,?_sprintf+11
  1155  000930  C18E  F02A         	movff	main@output+10,?_sprintf+12
  1156  000934  C18F  F02B         	movff	main@output+11,?_sprintf+13
  1157  000938  C190  F02C         	movff	main@output+12,?_sprintf+14
  1158  00093C  C191  F02D         	movff	main@output+13,?_sprintf+15
  1159  000940  C192  F02E         	movff	main@output+14,?_sprintf+16
  1160  000944  C193  F02F         	movff	main@output+15,?_sprintf+17
  1161  000948  C194  F030         	movff	main@output+16,?_sprintf+18
  1162  00094C  C195  F031         	movff	main@output+17,?_sprintf+19
  1163  000950  C196  F032         	movff	main@output+18,?_sprintf+20
  1164  000954  C197  F033         	movff	main@output+19,?_sprintf+21
  1165  000958  C19C  F034         	movff	main@check,?_sprintf+22
  1166  00095C  C19D  F035         	movff	main@check+1,?_sprintf+23
  1167  000960  ECCF  F006         	call	_sprintf	;wreg free
  1168                           
  1169                           ;Tomcat_S_main.c: 96: putsUSART(buff);
  1170  000964  0101               	movlb	1	; () banked
  1171  000966  0E01               	movlw	high main@buff
  1172  000968  6E12               	movwf	putsUSART@data+1,c
  1173  00096A  0101               	movlb	1	; () banked
  1174  00096C  0E00               	movlw	low main@buff
  1175  00096E  6E11               	movwf	putsUSART@data,c
  1176  000970  EC59  F00B         	call	_putsUSART	;wreg free
  1177                           
  1178                           ;Tomcat_S_main.c: 100: if (recv_flag == 1)
  1179  000974  0101               	movlb	1	; () banked
  1180  000976  0101               	movlb	1	; () banked
  1181  000978  05A5               	decf	_recv_flag& (0+255),w,b
  1182  00097A  A4D8               	btfss	status,2,c
  1183  00097C  D0CA               	goto	l1727
  1184                           
  1185                           ; BSR set to: 1
  1186                           ;Tomcat_S_main.c: 101: {
  1187                           ;Tomcat_S_main.c: 102: char *token;
  1188                           ;Tomcat_S_main.c: 103: token = strtok(recv_buff, ',');
  1189  00097E  0101               	movlb	1	; () banked
  1190  000980  C1A4  F020         	movff	_recv_buff,strtok@s1
  1191  000984  6A21               	clrf	strtok@s1+1,c
  1192  000986  0E00               	movlw	0
  1193  000988  6E24               	movwf	strtok@s2+2,c
  1194  00098A  0E00               	movlw	0
  1195  00098C  6E23               	movwf	strtok@s2+1,c
  1196  00098E  0E2C               	movlw	44
  1197  000990  6E22               	movwf	strtok@s2,c
  1198  000992  EC6C  F008         	call	_strtok	;wreg free
  1199  000996  C020  F1A2         	movff	?_strtok,main@token
  1200  00099A  C021  F1A3         	movff	?_strtok+1,main@token+1
  1201                           
  1202                           ;Tomcat_S_main.c: 104: depth = atoi(token);
  1203  00099E  0101               	movlb	1	; () banked
  1204  0009A0  C1A3  F017         	movff	main@token+1,atoi@s+1
  1205  0009A4  0101               	movlb	1	; () banked
  1206  0009A6  C1A2  F016         	movff	main@token,atoi@s
  1207  0009AA  EC05  F008         	call	_atoi	;wreg free
  1208  0009AE  C016  F17E         	movff	?_atoi,main@depth
  1209  0009B2  C017  F17F         	movff	?_atoi+1,main@depth+1
  1210                           
  1211                           ;Tomcat_S_main.c: 105: token = strtok(recv_buff, ',');
  1212  0009B6  0101               	movlb	1	; () banked
  1213  0009B8  C1A4  F020         	movff	_recv_buff,strtok@s1
  1214  0009BC  6A21               	clrf	strtok@s1+1,c
  1215  0009BE  0E00               	movlw	0
  1216  0009C0  6E24               	movwf	strtok@s2+2,c
  1217  0009C2  0E00               	movlw	0
  1218  0009C4  6E23               	movwf	strtok@s2+1,c
  1219  0009C6  0E2C               	movlw	44
  1220  0009C8  6E22               	movwf	strtok@s2,c
  1221  0009CA  EC6C  F008         	call	_strtok	;wreg free
  1222  0009CE  C020  F1A2         	movff	?_strtok,main@token
  1223  0009D2  C021  F1A3         	movff	?_strtok+1,main@token+1
  1224                           
  1225                           ;Tomcat_S_main.c: 106: heading = atoi(token);
  1226  0009D6  0101               	movlb	1	; () banked
  1227  0009D8  C1A3  F017         	movff	main@token+1,atoi@s+1
  1228  0009DC  0101               	movlb	1	; () banked
  1229  0009DE  C1A2  F016         	movff	main@token,atoi@s
  1230  0009E2  EC05  F008         	call	_atoi	;wreg free
  1231  0009E6  C016  F1A0         	movff	?_atoi,main@heading
  1232  0009EA  C017  F1A1         	movff	?_atoi+1,main@heading+1
  1233                           
  1234                           ;Tomcat_S_main.c: 107: token = strtok(recv_buff, ',');
  1235  0009EE  0101               	movlb	1	; () banked
  1236  0009F0  C1A4  F020         	movff	_recv_buff,strtok@s1
  1237  0009F4  6A21               	clrf	strtok@s1+1,c
  1238  0009F6  0E00               	movlw	0
  1239  0009F8  6E24               	movwf	strtok@s2+2,c
  1240  0009FA  0E00               	movlw	0
  1241  0009FC  6E23               	movwf	strtok@s2+1,c
  1242  0009FE  0E2C               	movlw	44
  1243  000A00  6E22               	movwf	strtok@s2,c
  1244  000A02  EC6C  F008         	call	_strtok	;wreg free
  1245  000A06  C020  F1A2         	movff	?_strtok,main@token
  1246  000A0A  C021  F1A3         	movff	?_strtok+1,main@token+1
  1247                           
  1248                           ;Tomcat_S_main.c: 108: pitch = atoi(token);
  1249  000A0E  0101               	movlb	1	; () banked
  1250  000A10  C1A3  F017         	movff	main@token+1,atoi@s+1
  1251  000A14  0101               	movlb	1	; () banked
  1252  000A16  C1A2  F016         	movff	main@token,atoi@s
  1253  000A1A  EC05  F008         	call	_atoi	;wreg free
  1254  000A1E  C016  F15A         	movff	?_atoi,main@pitch
  1255  000A22  C017  F15B         	movff	?_atoi+1,main@pitch+1
  1256                           
  1257                           ;Tomcat_S_main.c: 109: token = strtok(recv_buff, ',');
  1258  000A26  0101               	movlb	1	; () banked
  1259  000A28  C1A4  F020         	movff	_recv_buff,strtok@s1
  1260  000A2C  6A21               	clrf	strtok@s1+1,c
  1261  000A2E  0E00               	movlw	0
  1262  000A30  6E24               	movwf	strtok@s2+2,c
  1263  000A32  0E00               	movlw	0
  1264  000A34  6E23               	movwf	strtok@s2+1,c
  1265  000A36  0E2C               	movlw	44
  1266  000A38  6E22               	movwf	strtok@s2,c
  1267  000A3A  EC6C  F008         	call	_strtok	;wreg free
  1268  000A3E  C020  F1A2         	movff	?_strtok,main@token
  1269  000A42  C021  F1A3         	movff	?_strtok+1,main@token+1
  1270                           
  1271                           ;Tomcat_S_main.c: 110: roll = atoi(token);
  1272  000A46  0101               	movlb	1	; () banked
  1273  000A48  C1A3  F017         	movff	main@token+1,atoi@s+1
  1274  000A4C  0101               	movlb	1	; () banked
  1275  000A4E  C1A2  F016         	movff	main@token,atoi@s
  1276  000A52  EC05  F008         	call	_atoi	;wreg free
  1277  000A56  C016  F15C         	movff	?_atoi,main@roll
  1278  000A5A  C017  F15D         	movff	?_atoi+1,main@roll+1
  1279                           
  1280                           ;Tomcat_S_main.c: 111: token = strtok(recv_buff, ',');
  1281  000A5E  0101               	movlb	1	; () banked
  1282  000A60  C1A4  F020         	movff	_recv_buff,strtok@s1
  1283  000A64  6A21               	clrf	strtok@s1+1,c
  1284  000A66  0E00               	movlw	0
  1285  000A68  6E24               	movwf	strtok@s2+2,c
  1286  000A6A  0E00               	movlw	0
  1287  000A6C  6E23               	movwf	strtok@s2+1,c
  1288  000A6E  0E2C               	movlw	44
  1289  000A70  6E22               	movwf	strtok@s2,c
  1290  000A72  EC6C  F008         	call	_strtok	;wreg free
  1291  000A76  C020  F1A2         	movff	?_strtok,main@token
  1292  000A7A  C021  F1A3         	movff	?_strtok+1,main@token+1
  1293                           
  1294                           ;Tomcat_S_main.c: 112: ex_temp = atoi(token);
  1295  000A7E  0101               	movlb	1	; () banked
  1296  000A80  C1A3  F017         	movff	main@token+1,atoi@s+1
  1297  000A84  0101               	movlb	1	; () banked
  1298  000A86  C1A2  F016         	movff	main@token,atoi@s
  1299  000A8A  EC05  F008         	call	_atoi	;wreg free
  1300  000A8E  C016  F180         	movff	?_atoi,main@ex_temp
  1301  000A92  C017  F181         	movff	?_atoi+1,main@ex_temp+1
  1302                           
  1303                           ;Tomcat_S_main.c: 113: token = strtok(recv_buff, ',');
  1304  000A96  0101               	movlb	1	; () banked
  1305  000A98  C1A4  F020         	movff	_recv_buff,strtok@s1
  1306  000A9C  6A21               	clrf	strtok@s1+1,c
  1307  000A9E  0E00               	movlw	0
  1308  000AA0  6E24               	movwf	strtok@s2+2,c
  1309  000AA2  0E00               	movlw	0
  1310  000AA4  6E23               	movwf	strtok@s2+1,c
  1311  000AA6  0E2C               	movlw	44
  1312  000AA8  6E22               	movwf	strtok@s2,c
  1313  000AAA  EC6C  F008         	call	_strtok	;wreg free
  1314  000AAE  C020  F1A2         	movff	?_strtok,main@token
  1315  000AB2  C021  F1A3         	movff	?_strtok+1,main@token+1
  1316                           
  1317                           ;Tomcat_S_main.c: 114: int_temp = atoi(token);
  1318  000AB6  0101               	movlb	1	; () banked
  1319  000AB8  C1A3  F017         	movff	main@token+1,atoi@s+1
  1320  000ABC  0101               	movlb	1	; () banked
  1321  000ABE  C1A2  F016         	movff	main@token,atoi@s
  1322  000AC2  EC05  F008         	call	_atoi	;wreg free
  1323  000AC6  C016  F182         	movff	?_atoi,main@int_temp
  1324  000ACA  C017  F183         	movff	?_atoi+1,main@int_temp+1
  1325                           
  1326                           ;Tomcat_S_main.c: 115: token = strtok(recv_buff, ',');
  1327  000ACE  0101               	movlb	1	; () banked
  1328  000AD0  C1A4  F020         	movff	_recv_buff,strtok@s1
  1329  000AD4  6A21               	clrf	strtok@s1+1,c
  1330  000AD6  0E00               	movlw	0
  1331  000AD8  6E24               	movwf	strtok@s2+2,c
  1332  000ADA  0E00               	movlw	0
  1333  000ADC  6E23               	movwf	strtok@s2+1,c
  1334  000ADE  0E2C               	movlw	44
  1335  000AE0  6E22               	movwf	strtok@s2,c
  1336  000AE2  EC6C  F008         	call	_strtok	;wreg free
  1337  000AE6  C020  F1A2         	movff	?_strtok,main@token
  1338  000AEA  C021  F1A3         	movff	?_strtok+1,main@token+1
  1339                           
  1340                           ;Tomcat_S_main.c: 116: int_press = atoi(token);
  1341  000AEE  0101               	movlb	1	; () banked
  1342  000AF0  C1A3  F017         	movff	main@token+1,atoi@s+1
  1343  000AF4  0101               	movlb	1	; () banked
  1344  000AF6  C1A2  F016         	movff	main@token,atoi@s
  1345  000AFA  EC05  F008         	call	_atoi	;wreg free
  1346  000AFE  C016  F15E         	movff	?_atoi,main@int_press
  1347  000B02  C017  F15F         	movff	?_atoi+1,main@int_press+1
  1348                           
  1349                           ;Tomcat_S_main.c: 118: recv_flag = 0;
  1350  000B06  6E42               	movwf	??_main& (0+255),c
  1351  000B08  0E00               	movlw	0
  1352  000B0A  0101               	movlb	1	; () banked
  1353  000B0C  0101               	movlb	1	; () banked
  1354  000B0E  6FA5               	movwf	_recv_flag& (0+255),b
  1355  000B10  5042               	movf	??_main& (0+255),w,c
  1356  000B12                     l1727:
  1357                           
  1358                           ; BSR set to: 1
  1359                           ;Tomcat_S_main.c: 119: }
  1360                           ;Tomcat_S_main.c: 124: sprintf(osd_buff, "Temp:%dC;%dC", int_temp, ex_temp);
  1361  000B12  0101               	movlb	1	; () banked
  1362  000B14  0E01               	movlw	high main@osd_buff
  1363  000B16  6E1F               	movwf	sprintf@sp+1,c
  1364  000B18  0101               	movlb	1	; () banked
  1365  000B1A  0E3C               	movlw	low main@osd_buff
  1366  000B1C  6E1E               	movwf	sprintf@sp,c
  1367  000B1E  0E06               	movlw	high STR_2
  1368  000B20  6E21               	movwf	sprintf@f+1,c
  1369  000B22  0EAB               	movlw	low STR_2
  1370  000B24  6E20               	movwf	sprintf@f,c
  1371  000B26  C182  F022         	movff	main@int_temp,?_sprintf+4
  1372  000B2A  C183  F023         	movff	main@int_temp+1,?_sprintf+5
  1373  000B2E  C180  F024         	movff	main@ex_temp,?_sprintf+6
  1374  000B32  C181  F025         	movff	main@ex_temp+1,?_sprintf+7
  1375  000B36  ECCF  F006         	call	_sprintf	;wreg free
  1376                           
  1377                           ;Tomcat_S_main.c: 125: Str_output(1, 1, osd_buff, strlen(osd_buff));
  1378  000B3A  0E00               	movlw	0
  1379  000B3C  6E21               	movwf	Str_output@row+1,c
  1380  000B3E  0E01               	movlw	1
  1381  000B40  6E20               	movwf	Str_output@row,c
  1382  000B42  0E00               	movlw	0
  1383  000B44  6E23               	movwf	Str_output@col+1,c
  1384  000B46  0E01               	movlw	1
  1385  000B48  6E22               	movwf	Str_output@col,c
  1386  000B4A  0101               	movlb	1	; () banked
  1387  000B4C  0E01               	movlw	high main@osd_buff
  1388  000B4E  6E25               	movwf	Str_output@word+1,c
  1389  000B50  0101               	movlb	1	; () banked
  1390  000B52  0E3C               	movlw	low main@osd_buff
  1391  000B54  6E24               	movwf	Str_output@word,c
  1392  000B56  0101               	movlb	1	; () banked
  1393  000B58  0E01               	movlw	high main@osd_buff
  1394  000B5A  6E11               	movwf	strlen@s+1,c
  1395  000B5C  0101               	movlb	1	; () banked
  1396  000B5E  0E3C               	movlw	low main@osd_buff
  1397  000B60  6E10               	movwf	strlen@s,c
  1398  000B62  ECC6  F00A         	call	_strlen	;wreg free
  1399  000B66  5010               	movf	?_strlen,w,c
  1400  000B68  6E26               	movwf	Str_output@num,c
  1401  000B6A  EC5E  F00A         	call	_Str_output	;wreg free
  1402                           
  1403                           ;Tomcat_S_main.c: 130: char osd_buff[30];
  1404                           ;Tomcat_S_main.c: 132: if (heading < 100)
  1405  000B6E  0101               	movlb	1	; () banked
  1406  000B70  0101               	movlb	1	; () banked
  1407  000B72  51A1               	movf	(main@heading+1)& (0+255),w,b
  1408  000B74  0A80               	xorlw	128
  1409  000B76  6EF3               	movwf	prodl,c
  1410  000B78  0E80               	movlw	128
  1411  000B7A  5CF3               	subwf	prodl,w,c
  1412  000B7C  0E64               	movlw	100
  1413  000B7E  B4D8               	btfsc	status,2,c
  1414  000B80  5DA0               	subwf	main@heading& (0+255),w,b
  1415  000B82  B0D8               	btfsc	status,0,c
  1416  000B84  D010               	goto	l1735
  1417                           
  1418                           ; BSR set to: 1
  1419                           ;Tomcat_S_main.c: 133: sprintf(osd_buff, "Hdg: 0%d\0", heading);
  1420  000B86  0101               	movlb	1	; () banked
  1421  000B88  0E01               	movlw	high main@osd_buff_870
  1422  000B8A  6E1F               	movwf	sprintf@sp+1,c
  1423  000B8C  0101               	movlb	1	; () banked
  1424  000B8E  0E60               	movlw	low main@osd_buff_870
  1425  000B90  6E1E               	movwf	sprintf@sp,c
  1426  000B92  0E06               	movlw	high STR_3
  1427  000B94  6E21               	movwf	sprintf@f+1,c
  1428  000B96  0EC3               	movlw	low STR_3
  1429  000B98  6E20               	movwf	sprintf@f,c
  1430  000B9A  C1A0  F022         	movff	main@heading,?_sprintf+4
  1431  000B9E  C1A1  F023         	movff	main@heading+1,?_sprintf+5
  1432  000BA2  ECCF  F006         	call	_sprintf	;wreg free
  1433  000BA6                     l1735:
  1434                           
  1435                           ;Tomcat_S_main.c: 134: if (heading < 10)
  1436  000BA6  0101               	movlb	1	; () banked
  1437  000BA8  0101               	movlb	1	; () banked
  1438  000BAA  51A1               	movf	(main@heading+1)& (0+255),w,b
  1439  000BAC  0A80               	xorlw	128
  1440  000BAE  6EF3               	movwf	prodl,c
  1441  000BB0  0E80               	movlw	128
  1442  000BB2  5CF3               	subwf	prodl,w,c
  1443  000BB4  0E0A               	movlw	10
  1444  000BB6  B4D8               	btfsc	status,2,c
  1445  000BB8  5DA0               	subwf	main@heading& (0+255),w,b
  1446  000BBA  B0D8               	btfsc	status,0,c
  1447  000BBC  D011               	goto	l1739
  1448                           
  1449                           ; BSR set to: 1
  1450                           ;Tomcat_S_main.c: 135: sprintf(osd_buff, "Hdg: 00%d\0", heading);
  1451  000BBE  0101               	movlb	1	; () banked
  1452  000BC0  0E01               	movlw	high main@osd_buff_870
  1453  000BC2  6E1F               	movwf	sprintf@sp+1,c
  1454  000BC4  0101               	movlb	1	; () banked
  1455  000BC6  0E60               	movlw	low main@osd_buff_870
  1456  000BC8  6E1E               	movwf	sprintf@sp,c
  1457  000BCA  0E06               	movlw	high STR_4
  1458  000BCC  6E21               	movwf	sprintf@f+1,c
  1459  000BCE  0EB8               	movlw	low STR_4
  1460  000BD0  6E20               	movwf	sprintf@f,c
  1461  000BD2  C1A0  F022         	movff	main@heading,?_sprintf+4
  1462  000BD6  C1A1  F023         	movff	main@heading+1,?_sprintf+5
  1463  000BDA  ECCF  F006         	call	_sprintf	;wreg free
  1464  000BDE  D010               	goto	l90
  1465  000BE0                     l1739:
  1466                           
  1467                           ;Tomcat_S_main.c: 136: else
  1468                           ;Tomcat_S_main.c: 137: sprintf(osd_buff, "Hdg: %d\0", heading);
  1469  000BE0  0101               	movlb	1	; () banked
  1470  000BE2  0E01               	movlw	high main@osd_buff_870
  1471  000BE4  6E1F               	movwf	sprintf@sp+1,c
  1472  000BE6  0101               	movlb	1	; () banked
  1473  000BE8  0E60               	movlw	low main@osd_buff_870
  1474  000BEA  6E1E               	movwf	sprintf@sp,c
  1475  000BEC  0E06               	movlw	high STR_5
  1476  000BEE  6E21               	movwf	sprintf@f+1,c
  1477  000BF0  0ECD               	movlw	low STR_5
  1478  000BF2  6E20               	movwf	sprintf@f,c
  1479  000BF4  C1A0  F022         	movff	main@heading,?_sprintf+4
  1480  000BF8  C1A1  F023         	movff	main@heading+1,?_sprintf+5
  1481  000BFC  ECCF  F006         	call	_sprintf	;wreg free
  1482  000C00                     l90:
  1483                           
  1484                           ;Tomcat_S_main.c: 138: Str_output(1, 21, osd_buff, strlen(osd_buff));
  1485  000C00  0E00               	movlw	0
  1486  000C02  6E21               	movwf	Str_output@row+1,c
  1487  000C04  0E01               	movlw	1
  1488  000C06  6E20               	movwf	Str_output@row,c
  1489  000C08  0E00               	movlw	0
  1490  000C0A  6E23               	movwf	Str_output@col+1,c
  1491  000C0C  0E15               	movlw	21
  1492  000C0E  6E22               	movwf	Str_output@col,c
  1493  000C10  0101               	movlb	1	; () banked
  1494  000C12  0E01               	movlw	high main@osd_buff_870
  1495  000C14  6E25               	movwf	Str_output@word+1,c
  1496  000C16  0101               	movlb	1	; () banked
  1497  000C18  0E60               	movlw	low main@osd_buff_870
  1498  000C1A  6E24               	movwf	Str_output@word,c
  1499  000C1C  0101               	movlb	1	; () banked
  1500  000C1E  0E01               	movlw	high main@osd_buff_870
  1501  000C20  6E11               	movwf	strlen@s+1,c
  1502  000C22  0101               	movlb	1	; () banked
  1503  000C24  0E60               	movlw	low main@osd_buff_870
  1504  000C26  6E10               	movwf	strlen@s,c
  1505  000C28  ECC6  F00A         	call	_strlen	;wreg free
  1506  000C2C  5010               	movf	?_strlen,w,c
  1507  000C2E  6E26               	movwf	Str_output@num,c
  1508  000C30  EC5E  F00A         	call	_Str_output	;wreg free
  1509                           
  1510                           ;Tomcat_S_main.c: 143: char osd_buff[30];
  1511                           ;Tomcat_S_main.c: 144: sprintf(osd_buff, "%d m", depth);
  1512  000C34  0101               	movlb	1	; () banked
  1513  000C36  0E01               	movlw	high main@osd_buff_870
  1514  000C38  6E1F               	movwf	sprintf@sp+1,c
  1515  000C3A  0101               	movlb	1	; () banked
  1516  000C3C  0E60               	movlw	low main@osd_buff_870
  1517  000C3E  6E1E               	movwf	sprintf@sp,c
  1518  000C40  0E06               	movlw	high STR_6
  1519  000C42  6E21               	movwf	sprintf@f+1,c
  1520  000C44  0EDC               	movlw	low STR_6
  1521  000C46  6E20               	movwf	sprintf@f,c
  1522  000C48  C17E  F022         	movff	main@depth,?_sprintf+4
  1523  000C4C  C17F  F023         	movff	main@depth+1,?_sprintf+5
  1524  000C50  ECCF  F006         	call	_sprintf	;wreg free
  1525                           
  1526                           ;Tomcat_S_main.c: 145: Str_output(12, 12, osd_buff, strlen(osd_buff));
  1527  000C54  0E00               	movlw	0
  1528  000C56  6E21               	movwf	Str_output@row+1,c
  1529  000C58  0E0C               	movlw	12
  1530  000C5A  6E20               	movwf	Str_output@row,c
  1531  000C5C  0E00               	movlw	0
  1532  000C5E  6E23               	movwf	Str_output@col+1,c
  1533  000C60  0E0C               	movlw	12
  1534  000C62  6E22               	movwf	Str_output@col,c
  1535  000C64  0101               	movlb	1	; () banked
  1536  000C66  0E01               	movlw	high main@osd_buff_870
  1537  000C68  6E25               	movwf	Str_output@word+1,c
  1538  000C6A  0101               	movlb	1	; () banked
  1539  000C6C  0E60               	movlw	low main@osd_buff_870
  1540  000C6E  6E24               	movwf	Str_output@word,c
  1541  000C70  0101               	movlb	1	; () banked
  1542  000C72  0E01               	movlw	high main@osd_buff_870
  1543  000C74  6E11               	movwf	strlen@s+1,c
  1544  000C76  0101               	movlb	1	; () banked
  1545  000C78  0E60               	movlw	low main@osd_buff_870
  1546  000C7A  6E10               	movwf	strlen@s,c
  1547  000C7C  ECC6  F00A         	call	_strlen	;wreg free
  1548  000C80  5010               	movf	?_strlen,w,c
  1549  000C82  6E26               	movwf	Str_output@num,c
  1550  000C84  EC5E  F00A         	call	_Str_output	;wreg free
  1551                           
  1552                           ;Tomcat_S_main.c: 149: if (PORTBbits.RB3 == 1) {
  1553  000C88  A681               	btfss	3969,3,c	;volatile
  1554  000C8A  D016               	goto	l91
  1555                           
  1556                           ;Tomcat_S_main.c: 150: OSD_write(12, 1, 0xF5);
  1557  000C8C  6E42               	movwf	??_main& (0+255),c
  1558  000C8E  0E01               	movlw	1
  1559  000C90  6E16               	movwf	OSD_write@_col,c
  1560  000C92  5042               	movf	??_main& (0+255),w,c
  1561  000C94  6E43               	movwf	(??_main+1)& (0+255),c
  1562  000C96  0EF5               	movlw	245
  1563  000C98  6E17               	movwf	OSD_write@_font,c
  1564  000C9A  5043               	movf	(??_main+1)& (0+255),w,c
  1565  000C9C  0E0C               	movlw	12
  1566  000C9E  EC0F  F009         	call	_OSD_write
  1567                           
  1568                           ;Tomcat_S_main.c: 151: OSD_write(12, 2, 0xF6);
  1569  000CA2  6E42               	movwf	??_main& (0+255),c
  1570  000CA4  0E02               	movlw	2
  1571  000CA6  6E16               	movwf	OSD_write@_col,c
  1572  000CA8  5042               	movf	??_main& (0+255),w,c
  1573  000CAA  6E43               	movwf	(??_main+1)& (0+255),c
  1574  000CAC  0EF6               	movlw	246
  1575  000CAE  6E17               	movwf	OSD_write@_font,c
  1576  000CB0  5043               	movf	(??_main+1)& (0+255),w,c
  1577  000CB2  0E0C               	movlw	12
  1578  000CB4  EC0F  F009         	call	_OSD_write
  1579  000CB8                     l91:
  1580                           
  1581                           ;Tomcat_S_main.c: 152: }
  1582                           ;Tomcat_S_main.c: 182: char osd_buff[30];
  1583                           ;Tomcat_S_main.c: 183: sprintf(osd_buff, "-- --");
  1584  000CB8  0101               	movlb	1	; () banked
  1585  000CBA  0E01               	movlw	high main@osd_buff_870
  1586  000CBC  6E1F               	movwf	sprintf@sp+1,c
  1587  000CBE  0101               	movlb	1	; () banked
  1588  000CC0  0E60               	movlw	low main@osd_buff_870
  1589  000CC2  6E1E               	movwf	sprintf@sp,c
  1590  000CC4  0E06               	movlw	high STR_7
  1591  000CC6  6E21               	movwf	sprintf@f+1,c
  1592  000CC8  0ED6               	movlw	low STR_7
  1593  000CCA  6E20               	movwf	sprintf@f,c
  1594  000CCC  ECCF  F006         	call	_sprintf	;wreg free
  1595                           
  1596                           ;Tomcat_S_main.c: 184: Str_output(7, 13, osd_buff, strlen(osd_buff));
  1597  000CD0  0E00               	movlw	0
  1598  000CD2  6E21               	movwf	Str_output@row+1,c
  1599  000CD4  0E07               	movlw	7
  1600  000CD6  6E20               	movwf	Str_output@row,c
  1601  000CD8  0E00               	movlw	0
  1602  000CDA  6E23               	movwf	Str_output@col+1,c
  1603  000CDC  0E0D               	movlw	13
  1604  000CDE  6E22               	movwf	Str_output@col,c
  1605  000CE0  0101               	movlb	1	; () banked
  1606  000CE2  0E01               	movlw	high main@osd_buff_870
  1607  000CE4  6E25               	movwf	Str_output@word+1,c
  1608  000CE6  0101               	movlb	1	; () banked
  1609  000CE8  0E60               	movlw	low main@osd_buff_870
  1610  000CEA  6E24               	movwf	Str_output@word,c
  1611  000CEC  0101               	movlb	1	; () banked
  1612  000CEE  0E01               	movlw	high main@osd_buff_870
  1613  000CF0  6E11               	movwf	strlen@s+1,c
  1614  000CF2  0101               	movlb	1	; () banked
  1615  000CF4  0E60               	movlw	low main@osd_buff_870
  1616  000CF6  6E10               	movwf	strlen@s,c
  1617  000CF8  ECC6  F00A         	call	_strlen	;wreg free
  1618  000CFC  5010               	movf	?_strlen,w,c
  1619  000CFE  6E26               	movwf	Str_output@num,c
  1620  000D00  EC5E  F00A         	call	_Str_output	;wreg free
  1621                           
  1622                           ;Tomcat_S_main.c: 185: sprintf(osd_buff, "l");
  1623  000D04  0101               	movlb	1	; () banked
  1624  000D06  0E01               	movlw	high main@osd_buff_870
  1625  000D08  6E1F               	movwf	sprintf@sp+1,c
  1626  000D0A  0101               	movlb	1	; () banked
  1627  000D0C  0E60               	movlw	low main@osd_buff_870
  1628  000D0E  6E1E               	movwf	sprintf@sp,c
  1629  000D10  0E06               	movlw	high STR_8
  1630  000D12  6E21               	movwf	sprintf@f+1,c
  1631  000D14  0EE1               	movlw	low STR_8
  1632  000D16  6E20               	movwf	sprintf@f,c
  1633  000D18  ECCF  F006         	call	_sprintf	;wreg free
  1634                           
  1635                           ;Tomcat_S_main.c: 186: Str_output(6, 15, osd_buff, strlen(osd_buff));
  1636  000D1C  0E00               	movlw	0
  1637  000D1E  6E21               	movwf	Str_output@row+1,c
  1638  000D20  0E06               	movlw	6
  1639  000D22  6E20               	movwf	Str_output@row,c
  1640  000D24  0E00               	movlw	0
  1641  000D26  6E23               	movwf	Str_output@col+1,c
  1642  000D28  0E0F               	movlw	15
  1643  000D2A  6E22               	movwf	Str_output@col,c
  1644  000D2C  0101               	movlb	1	; () banked
  1645  000D2E  0E01               	movlw	high main@osd_buff_870
  1646  000D30  6E25               	movwf	Str_output@word+1,c
  1647  000D32  0101               	movlb	1	; () banked
  1648  000D34  0E60               	movlw	low main@osd_buff_870
  1649  000D36  6E24               	movwf	Str_output@word,c
  1650  000D38  0101               	movlb	1	; () banked
  1651  000D3A  0E01               	movlw	high main@osd_buff_870
  1652  000D3C  6E11               	movwf	strlen@s+1,c
  1653  000D3E  0101               	movlb	1	; () banked
  1654  000D40  0E60               	movlw	low main@osd_buff_870
  1655  000D42  6E10               	movwf	strlen@s,c
  1656  000D44  ECC6  F00A         	call	_strlen	;wreg free
  1657  000D48  5010               	movf	?_strlen,w,c
  1658  000D4A  6E26               	movwf	Str_output@num,c
  1659  000D4C  EC5E  F00A         	call	_Str_output	;wreg free
  1660                           
  1661                           ;Tomcat_S_main.c: 187: sprintf(osd_buff, "l");
  1662  000D50  0101               	movlb	1	; () banked
  1663  000D52  0E01               	movlw	high main@osd_buff_870
  1664  000D54  6E1F               	movwf	sprintf@sp+1,c
  1665  000D56  0101               	movlb	1	; () banked
  1666  000D58  0E60               	movlw	low main@osd_buff_870
  1667  000D5A  6E1E               	movwf	sprintf@sp,c
  1668  000D5C  0E06               	movlw	high STR_8
  1669  000D5E  6E21               	movwf	sprintf@f+1,c
  1670  000D60  0EE1               	movlw	low STR_8
  1671  000D62  6E20               	movwf	sprintf@f,c
  1672  000D64  ECCF  F006         	call	_sprintf	;wreg free
  1673                           
  1674                           ;Tomcat_S_main.c: 188: Str_output(8, 15, osd_buff, strlen(osd_buff));
  1675  000D68  0E00               	movlw	0
  1676  000D6A  6E21               	movwf	Str_output@row+1,c
  1677  000D6C  0E08               	movlw	8
  1678  000D6E  6E20               	movwf	Str_output@row,c
  1679  000D70  0E00               	movlw	0
  1680  000D72  6E23               	movwf	Str_output@col+1,c
  1681  000D74  0E0F               	movlw	15
  1682  000D76  6E22               	movwf	Str_output@col,c
  1683  000D78  0101               	movlb	1	; () banked
  1684  000D7A  0E01               	movlw	high main@osd_buff_870
  1685  000D7C  6E25               	movwf	Str_output@word+1,c
  1686  000D7E  0101               	movlb	1	; () banked
  1687  000D80  0E60               	movlw	low main@osd_buff_870
  1688  000D82  6E24               	movwf	Str_output@word,c
  1689  000D84  0101               	movlb	1	; () banked
  1690  000D86  0E01               	movlw	high main@osd_buff_870
  1691  000D88  6E11               	movwf	strlen@s+1,c
  1692  000D8A  0101               	movlb	1	; () banked
  1693  000D8C  0E60               	movlw	low main@osd_buff_870
  1694  000D8E  6E10               	movwf	strlen@s,c
  1695  000D90  ECC6  F00A         	call	_strlen	;wreg free
  1696  000D94  5010               	movf	?_strlen,w,c
  1697  000D96  6E26               	movwf	Str_output@num,c
  1698  000D98  EC5E  F00A         	call	_Str_output	;wreg free
  1699  000D9C  D4DA               	goto	l1683
  1700  000D9E                     __end_of_main:
  1701                           	opt stack 0
  1702                           tblptru	equ	0xFF8
  1703                           prodl	equ	0xFF3
  1704                           intcon2	equ	0xFF1
  1705                           postinc2	equ	0xFDE
  1706                           postdec2	equ	0xFDD
  1707                           fsr2h	equ	0xFDA
  1708                           fsr2l	equ	0xFD9
  1709                           status	equ	0xFD8
  1710                           
  1711 ;; *************** function _strtok *****************
  1712 ;; Defined at:
  1713 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.30\sources\common\strtok.c"
  1714 ;; Parameters:    Size  Location     Type
  1715 ;;  s1              2   31[COMRAM] PTR unsigned char 
  1716 ;;		 -> NULL(0), RAM(1535), 
  1717 ;;  s2              3   33[COMRAM] PTR const unsigned char 
  1718 ;;		 -> ROM(32767), 
  1719 ;; Auto vars:     Size  Location     Type
  1720 ;;		None
  1721 ;; Return value:  Size  Location     Type
  1722 ;;                  2   31[COMRAM] PTR unsigned char 
  1723 ;; Registers used:
  1724 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, btemp+8, btemp+9, btemp+10, btemp+11, tosl, structret, tblptrl, tblptrh, tblp
      +tru, prodl, prodh, bsr, cstack
  1725 ;; Tracked objects:
  1726 ;;		On entry : 0/0
  1727 ;;		On exit  : 0/0
  1728 ;;		Unchanged: 0/0
  1729 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1730 ;;      Params:         5       0       0       0       0       0       0
  1731 ;;      Locals:         0       0       0       0       0       0       0
  1732 ;;      Temps:          0       0       0       0       0       0       0
  1733 ;;      Totals:         5       0       0       0       0       0       0
  1734 ;;Total ram usage:        5 bytes
  1735 ;; Hardware stack levels used:    1
  1736 ;; Hardware stack levels required when called:    3
  1737 ;; This function calls:
  1738 ;;		_strcspn
  1739 ;;		_strspn
  1740 ;; This function is called by:
  1741 ;;		_main
  1742 ;; This function uses a non-reentrant model
  1743 ;;
  1744                           
  1745                           	psect	text1
  1746  0010D8                     __ptext1:
  1747                           	opt stack 0
  1748  0010D8                     _strtok:
  1749                           	opt stack 27
  1750                           
  1751                           ;incstack = 0
  1752  0010D8  5021               	movf	strtok@s1+1,w,c
  1753  0010DA  1020               	iorwf	strtok@s1,w,c
  1754  0010DC  A4D8               	btfss	status,2,c
  1755  0010DE  D004               	goto	l891
  1756  0010E0  C047  F021         	movff	strtok@sp+1,strtok@s1+1
  1757  0010E4  C046  F020         	movff	strtok@sp,strtok@s1
  1758  0010E8                     l891:
  1759  0010E8  5021               	movf	strtok@s1+1,w,c
  1760  0010EA  1020               	iorwf	strtok@s1,w,c
  1761  0010EC  A4D8               	btfss	status,2,c
  1762  0010EE  D005               	goto	l1965
  1763  0010F0  0E00               	movlw	0
  1764  0010F2  6E21               	movwf	?_strtok+1,c
  1765  0010F4  0E00               	movlw	0
  1766  0010F6  6E20               	movwf	?_strtok,c
  1767  0010F8  D04A               	goto	l893
  1768  0010FA                     l1965:
  1769  0010FA  C021  F019         	movff	strtok@s1+1,strspn@s1+1
  1770  0010FE  C020  F018         	movff	strtok@s1,strspn@s1
  1771  001102  C024  F01C         	movff	strtok@s2+2,strspn@s2+2
  1772  001106  C023  F01B         	movff	strtok@s2+1,strspn@s2+1
  1773  00110A  C022  F01A         	movff	strtok@s2,strspn@s2
  1774  00110E  ECDB  F009         	call	_strspn	;wreg free
  1775  001112  5018               	movf	?_strspn,w,c
  1776  001114  2620               	addwf	strtok@s1,f,c
  1777  001116  5019               	movf	?_strspn+1,w,c
  1778  001118  2221               	addwfc	strtok@s1+1,f,c
  1779  00111A  C020  FFD9         	movff	strtok@s1,fsr2l
  1780  00111E  C021  FFDA         	movff	strtok@s1+1,fsr2h
  1781  001122  50DF               	movf	indf2,w,c
  1782  001124  A4D8               	btfss	status,2,c
  1783  001126  D009               	goto	l1973
  1784  001128  0E00               	movlw	0
  1785  00112A  6E47               	movwf	strtok@sp+1,c
  1786  00112C  0E00               	movlw	0
  1787  00112E  6E46               	movwf	strtok@sp,c
  1788  001130  C047  F021         	movff	strtok@sp+1,?_strtok+1
  1789  001134  C046  F020         	movff	strtok@sp,?_strtok
  1790  001138  D02A               	goto	l893
  1791  00113A                     l1973:
  1792  00113A  C021  F019         	movff	strtok@s1+1,strcspn@s1+1
  1793  00113E  C020  F018         	movff	strtok@s1,strcspn@s1
  1794  001142  C024  F01C         	movff	strtok@s2+2,strcspn@s2+2
  1795  001146  C023  F01B         	movff	strtok@s2+1,strcspn@s2+1
  1796  00114A  C022  F01A         	movff	strtok@s2,strcspn@s2
  1797  00114E  EC07  F00A         	call	_strcspn	;wreg free
  1798  001152  5018               	movf	?_strcspn,w,c
  1799  001154  2420               	addwf	strtok@s1,w,c
  1800  001156  6E46               	movwf	strtok@sp,c
  1801  001158  5019               	movf	?_strcspn+1,w,c
  1802  00115A  2021               	addwfc	strtok@s1+1,w,c
  1803  00115C  6E47               	movwf	strtok@sp+1,c
  1804  00115E  C046  FFD9         	movff	strtok@sp,fsr2l
  1805  001162  C047  FFDA         	movff	strtok@sp+1,fsr2h
  1806  001166  50DF               	movf	indf2,w,c
  1807  001168  B4D8               	btfsc	status,2,c
  1808  00116A  D009               	goto	l1981
  1809  00116C  C046  FFD9         	movff	strtok@sp,fsr2l
  1810  001170  C047  FFDA         	movff	strtok@sp+1,fsr2h
  1811  001174  0E00               	movlw	0
  1812  001176  6EDF               	movwf	indf2,c
  1813  001178  4A46               	infsnz	strtok@sp,f,c
  1814  00117A  2A47               	incf	strtok@sp+1,f,c
  1815  00117C  D004               	goto	l896
  1816  00117E                     l1981:
  1817  00117E  0E00               	movlw	0
  1818  001180  6E47               	movwf	strtok@sp+1,c
  1819  001182  0E00               	movlw	0
  1820  001184  6E46               	movwf	strtok@sp,c
  1821  001186                     l896:
  1822  001186  C021  F021         	movff	strtok@s1+1,?_strtok+1
  1823  00118A  C020  F020         	movff	strtok@s1,?_strtok
  1824  00118E                     l893:
  1825  00118E  0012               	return	
  1826  001190                     __end_of_strtok:
  1827                           	opt stack 0
  1828                           tblptru	equ	0xFF8
  1829                           prodl	equ	0xFF3
  1830                           intcon2	equ	0xFF1
  1831                           indf2	equ	0xFDF
  1832                           postinc2	equ	0xFDE
  1833                           postdec2	equ	0xFDD
  1834                           fsr2h	equ	0xFDA
  1835                           fsr2l	equ	0xFD9
  1836                           status	equ	0xFD8
  1837                           
  1838 ;; *************** function _strspn *****************
  1839 ;; Defined at:
  1840 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.30\sources\common\strspn.c"
  1841 ;; Parameters:    Size  Location     Type
  1842 ;;  s1              2   23[COMRAM] PTR const unsigned char 
  1843 ;;		 -> NULL(0), RAM(1535), 
  1844 ;;  s2              3   25[COMRAM] PTR const unsigned char 
  1845 ;;		 -> ROM(32767), 
  1846 ;; Auto vars:     Size  Location     Type
  1847 ;;  i               2   29[COMRAM] unsigned int 
  1848 ;; Return value:  Size  Location     Type
  1849 ;;                  2   23[COMRAM] unsigned int 
  1850 ;; Registers used:
  1851 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  1852 ;; Tracked objects:
  1853 ;;		On entry : 0/0
  1854 ;;		On exit  : 0/0
  1855 ;;		Unchanged: 0/0
  1856 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1857 ;;      Params:         5       0       0       0       0       0       0
  1858 ;;      Locals:         2       0       0       0       0       0       0
  1859 ;;      Temps:          1       0       0       0       0       0       0
  1860 ;;      Totals:         8       0       0       0       0       0       0
  1861 ;;Total ram usage:        8 bytes
  1862 ;; Hardware stack levels used:    1
  1863 ;; Hardware stack levels required when called:    2
  1864 ;; This function calls:
  1865 ;;		_strchr
  1866 ;; This function is called by:
  1867 ;;		_strtok
  1868 ;; This function uses a non-reentrant model
  1869 ;;
  1870                           
  1871                           	psect	text2
  1872  0013B6                     __ptext2:
  1873                           	opt stack 0
  1874  0013B6                     _strspn:
  1875                           	opt stack 27
  1876                           
  1877                           ;incstack = 0
  1878  0013B6  0E00               	movlw	0
  1879  0013B8  6E1F               	movwf	strspn@i+1,c
  1880  0013BA  0E00               	movlw	0
  1881  0013BC  6E1E               	movwf	strspn@i,c
  1882  0013BE  D004               	goto	l2247
  1883  0013C0                     l2245:
  1884  0013C0  4A18               	infsnz	strspn@s1,f,c
  1885  0013C2  2A19               	incf	strspn@s1+1,f,c
  1886  0013C4  4A1E               	infsnz	strspn@i,f,c
  1887  0013C6  2A1F               	incf	strspn@i+1,f,c
  1888  0013C8                     l2247:
  1889  0013C8  C018  FFD9         	movff	strspn@s1,fsr2l
  1890  0013CC  C019  FFDA         	movff	strspn@s1+1,fsr2h
  1891  0013D0  50DF               	movf	indf2,w,c
  1892  0013D2  B4D8               	btfsc	status,2,c
  1893  0013D4  D017               	goto	l926
  1894  0013D6  C01C  F012         	movff	strspn@s2+2,strchr@ptr+2
  1895  0013DA  C01B  F011         	movff	strspn@s2+1,strchr@ptr+1
  1896  0013DE  C01A  F010         	movff	strspn@s2,strchr@ptr
  1897  0013E2  C018  FFD9         	movff	strspn@s1,fsr2l
  1898  0013E6  C019  FFDA         	movff	strspn@s1+1,fsr2h
  1899  0013EA  50DF               	movf	indf2,w,c
  1900  0013EC  6E1D               	movwf	??_strspn& (0+255),c
  1901  0013EE  501D               	movf	??_strspn,w,c
  1902  0013F0  6E13               	movwf	strchr@chr,c
  1903  0013F2  6A14               	clrf	strchr@chr+1,c
  1904  0013F4  EC7D  F009         	call	_strchr	;wreg free
  1905  0013F8  5012               	movf	?_strchr+2,w,c
  1906  0013FA  0BDF               	andlw	223
  1907  0013FC  1011               	iorwf	?_strchr+1,w,c
  1908  0013FE  1010               	iorwf	?_strchr,w,c
  1909  001400  A4D8               	btfss	status,2,c
  1910  001402  D7DE               	goto	l2245
  1911  001404                     l926:
  1912  001404  C01E  F018         	movff	strspn@i,?_strspn
  1913  001408  C01F  F019         	movff	strspn@i+1,?_strspn+1
  1914  00140C  0012               	return	
  1915  00140E                     __end_of_strspn:
  1916                           	opt stack 0
  1917                           tblptru	equ	0xFF8
  1918                           prodl	equ	0xFF3
  1919                           intcon2	equ	0xFF1
  1920                           indf2	equ	0xFDF
  1921                           postinc2	equ	0xFDE
  1922                           postdec2	equ	0xFDD
  1923                           fsr2h	equ	0xFDA
  1924                           fsr2l	equ	0xFD9
  1925                           status	equ	0xFD8
  1926                           
  1927 ;; *************** function _strcspn *****************
  1928 ;; Defined at:
  1929 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.30\sources\common\strcspn.c"
  1930 ;; Parameters:    Size  Location     Type
  1931 ;;  s1              2   23[COMRAM] PTR const unsigned char 
  1932 ;;		 -> NULL(0), RAM(1535), 
  1933 ;;  s2              3   25[COMRAM] PTR const unsigned char 
  1934 ;;		 -> ROM(32767), 
  1935 ;; Auto vars:     Size  Location     Type
  1936 ;;  i               2   29[COMRAM] unsigned int 
  1937 ;; Return value:  Size  Location     Type
  1938 ;;                  2   23[COMRAM] unsigned int 
  1939 ;; Registers used:
  1940 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  1941 ;; Tracked objects:
  1942 ;;		On entry : 0/0
  1943 ;;		On exit  : 0/0
  1944 ;;		Unchanged: 0/0
  1945 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1946 ;;      Params:         5       0       0       0       0       0       0
  1947 ;;      Locals:         2       0       0       0       0       0       0
  1948 ;;      Temps:          1       0       0       0       0       0       0
  1949 ;;      Totals:         8       0       0       0       0       0       0
  1950 ;;Total ram usage:        8 bytes
  1951 ;; Hardware stack levels used:    1
  1952 ;; Hardware stack levels required when called:    2
  1953 ;; This function calls:
  1954 ;;		_strchr
  1955 ;; This function is called by:
  1956 ;;		_strtok
  1957 ;; This function uses a non-reentrant model
  1958 ;;
  1959                           
  1960                           	psect	text3
  1961  00140E                     __ptext3:
  1962                           	opt stack 0
  1963  00140E                     _strcspn:
  1964                           	opt stack 27
  1965                           
  1966                           ;incstack = 0
  1967  00140E  0E00               	movlw	0
  1968  001410  6E1F               	movwf	strcspn@i+1,c
  1969  001412  0E00               	movlw	0
  1970  001414  6E1E               	movwf	strcspn@i,c
  1971  001416  D004               	goto	l2255
  1972  001418                     l2253:
  1973  001418  4A18               	infsnz	strcspn@s1,f,c
  1974  00141A  2A19               	incf	strcspn@s1+1,f,c
  1975  00141C  4A1E               	infsnz	strcspn@i,f,c
  1976  00141E  2A1F               	incf	strcspn@i+1,f,c
  1977  001420                     l2255:
  1978  001420  C018  FFD9         	movff	strcspn@s1,fsr2l
  1979  001424  C019  FFDA         	movff	strcspn@s1+1,fsr2h
  1980  001428  50DF               	movf	indf2,w,c
  1981  00142A  B4D8               	btfsc	status,2,c
  1982  00142C  D017               	goto	l916
  1983  00142E  C01C  F012         	movff	strcspn@s2+2,strchr@ptr+2
  1984  001432  C01B  F011         	movff	strcspn@s2+1,strchr@ptr+1
  1985  001436  C01A  F010         	movff	strcspn@s2,strchr@ptr
  1986  00143A  C018  FFD9         	movff	strcspn@s1,fsr2l
  1987  00143E  C019  FFDA         	movff	strcspn@s1+1,fsr2h
  1988  001442  50DF               	movf	indf2,w,c
  1989  001444  6E1D               	movwf	??_strcspn& (0+255),c
  1990  001446  501D               	movf	??_strcspn,w,c
  1991  001448  6E13               	movwf	strchr@chr,c
  1992  00144A  6A14               	clrf	strchr@chr+1,c
  1993  00144C  EC7D  F009         	call	_strchr	;wreg free
  1994  001450  5012               	movf	?_strchr+2,w,c
  1995  001452  0BDF               	andlw	223
  1996  001454  1011               	iorwf	?_strchr+1,w,c
  1997  001456  1010               	iorwf	?_strchr,w,c
  1998  001458  B4D8               	btfsc	status,2,c
  1999  00145A  D7DE               	goto	l2253
  2000  00145C                     l916:
  2001  00145C  C01E  F018         	movff	strcspn@i,?_strcspn
  2002  001460  C01F  F019         	movff	strcspn@i+1,?_strcspn+1
  2003  001464  0012               	return	
  2004  001466                     __end_of_strcspn:
  2005                           	opt stack 0
  2006                           tblptru	equ	0xFF8
  2007                           prodl	equ	0xFF3
  2008                           intcon2	equ	0xFF1
  2009                           indf2	equ	0xFDF
  2010                           postinc2	equ	0xFDE
  2011                           postdec2	equ	0xFDD
  2012                           fsr2h	equ	0xFDA
  2013                           fsr2l	equ	0xFD9
  2014                           status	equ	0xFD8
  2015                           
  2016 ;; *************** function _strchr *****************
  2017 ;; Defined at:
  2018 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.30\sources\common\strchr.c"
  2019 ;; Parameters:    Size  Location     Type
  2020 ;;  ptr             3   15[COMRAM] PTR const unsigned char 
  2021 ;;		 -> ROM(32767), 
  2022 ;;  chr             2   18[COMRAM] int 
  2023 ;; Auto vars:     Size  Location     Type
  2024 ;;		None
  2025 ;; Return value:  Size  Location     Type
  2026 ;;                  3   15[COMRAM] PTR unsigned char 
  2027 ;; Registers used:
  2028 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru
  2029 ;; Tracked objects:
  2030 ;;		On entry : 0/0
  2031 ;;		On exit  : 0/0
  2032 ;;		Unchanged: 0/0
  2033 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2034 ;;      Params:         5       0       0       0       0       0       0
  2035 ;;      Locals:         0       0       0       0       0       0       0
  2036 ;;      Temps:          3       0       0       0       0       0       0
  2037 ;;      Totals:         8       0       0       0       0       0       0
  2038 ;;Total ram usage:        8 bytes
  2039 ;; Hardware stack levels used:    1
  2040 ;; Hardware stack levels required when called:    1
  2041 ;; This function calls:
  2042 ;;		Nothing
  2043 ;; This function is called by:
  2044 ;;		_strcspn
  2045 ;;		_strspn
  2046 ;; This function uses a non-reentrant model
  2047 ;;
  2048                           
  2049                           	psect	text4
  2050  0012FA                     __ptext4:
  2051                           	opt stack 0
  2052  0012FA                     _strchr:
  2053                           	opt stack 27
  2054  0012FA                     l930:
  2055  0012FA  C010  FFF6         	movff	strchr@ptr,tblptrl
  2056  0012FE  C011  FFF7         	movff	strchr@ptr+1,tblptrh
  2057  001302  C012  FFF8         	movff	strchr@ptr+2,tblptru
  2058  001306  0008               	tblrd		*
  2059  001308  50F5               	movf	tablat,w,c
  2060  00130A  1813               	xorwf	strchr@chr,w,c
  2061  00130C  A4D8               	btfss	status,2,c
  2062  00130E  D007               	goto	l2271
  2063  001310  C012  F012         	movff	strchr@ptr+2,?_strchr+2
  2064  001314  C011  F011         	movff	strchr@ptr+1,?_strchr+1
  2065  001318  C010  F010         	movff	strchr@ptr,?_strchr
  2066  00131C  D01D               	goto	l932
  2067  00131E                     l2271:
  2068  00131E  EE20  F010         	lfsr	2,strchr@ptr
  2069  001322  CFDF F015          	movff	indf2,??_strchr
  2070  001326  2ADE               	incf	postinc2,f,c
  2071  001328  CFDE F016          	movff	postinc2,??_strchr+1
  2072  00132C  CFDD F017          	movff	postdec2,??_strchr+2
  2073  001330  0E00               	movlw	0
  2074  001332  22DE               	addwfc	postinc2,f,c
  2075  001334  22DF               	addwfc	indf2,f,c
  2076  001336  C015  FFF6         	movff	??_strchr,tblptrl
  2077  00133A  C016  FFF7         	movff	??_strchr+1,tblptrh
  2078  00133E  C017  FFF8         	movff	??_strchr+2,tblptru
  2079  001342  0008               	tblrd		*
  2080  001344  50F5               	movf	tablat,w,c
  2081  001346  0900               	iorlw	0
  2082  001348  A4D8               	btfss	status,2,c
  2083  00134A  D7D7               	goto	l930
  2084  00134C  0E20               	movlw	32
  2085  00134E  6E12               	movwf	?_strchr+2,c
  2086  001350  0E00               	movlw	0
  2087  001352  6E11               	movwf	?_strchr+1,c
  2088  001354  0E00               	movlw	0
  2089  001356  6E10               	movwf	?_strchr,c
  2090  001358                     l932:
  2091  001358  0012               	return	
  2092  00135A                     __end_of_strchr:
  2093                           	opt stack 0
  2094                           tblptru	equ	0xFF8
  2095                           tblptrh	equ	0xFF7
  2096                           tblptrl	equ	0xFF6
  2097                           tablat	equ	0xFF5
  2098                           prodl	equ	0xFF3
  2099                           intcon2	equ	0xFF1
  2100                           indf2	equ	0xFDF
  2101                           postinc2	equ	0xFDE
  2102                           postdec2	equ	0xFDD
  2103                           fsr2h	equ	0xFDA
  2104                           fsr2l	equ	0xFD9
  2105                           status	equ	0xFD8
  2106                           
  2107 ;; *************** function _strlen *****************
  2108 ;; Defined at:
  2109 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.30\sources\common\strlen.c"
  2110 ;; Parameters:    Size  Location     Type
  2111 ;;  s               2   15[COMRAM] PTR const unsigned char 
  2112 ;;		 -> main@osd_buff_870(30), main@osd_buff(30), 
  2113 ;; Auto vars:     Size  Location     Type
  2114 ;;  cp              2   19[COMRAM] PTR const unsigned char 
  2115 ;;		 -> main@osd_buff_870(30), main@osd_buff(30), 
  2116 ;; Return value:  Size  Location     Type
  2117 ;;                  2   15[COMRAM] unsigned int 
  2118 ;; Registers used:
  2119 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  2120 ;; Tracked objects:
  2121 ;;		On entry : 0/0
  2122 ;;		On exit  : 0/0
  2123 ;;		Unchanged: 0/0
  2124 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2125 ;;      Params:         2       0       0       0       0       0       0
  2126 ;;      Locals:         2       0       0       0       0       0       0
  2127 ;;      Temps:          2       0       0       0       0       0       0
  2128 ;;      Totals:         6       0       0       0       0       0       0
  2129 ;;Total ram usage:        6 bytes
  2130 ;; Hardware stack levels used:    1
  2131 ;; Hardware stack levels required when called:    1
  2132 ;; This function calls:
  2133 ;;		Nothing
  2134 ;; This function is called by:
  2135 ;;		_main
  2136 ;; This function uses a non-reentrant model
  2137 ;;
  2138                           
  2139                           	psect	text5
  2140  00158C                     __ptext5:
  2141                           	opt stack 0
  2142  00158C                     _strlen:
  2143                           	opt stack 29
  2144                           
  2145                           ;incstack = 0
  2146  00158C  C011  F015         	movff	strlen@s+1,strlen@cp+1
  2147  001590  C010  F014         	movff	strlen@s,strlen@cp
  2148  001594  D002               	goto	l2019
  2149  001596                     l2017:
  2150  001596  4A14               	infsnz	strlen@cp,f,c
  2151  001598  2A15               	incf	strlen@cp+1,f,c
  2152  00159A                     l2019:
  2153  00159A  C014  FFD9         	movff	strlen@cp,fsr2l
  2154  00159E  C015  FFDA         	movff	strlen@cp+1,fsr2h
  2155  0015A2  50DF               	movf	indf2,w,c
  2156  0015A4  A4D8               	btfss	status,2,c
  2157  0015A6  D7F7               	goto	l2017
  2158  0015A8  C010  F012         	movff	strlen@s,??_strlen
  2159  0015AC  C011  F013         	movff	strlen@s+1,??_strlen+1
  2160  0015B0  1E12               	comf	??_strlen,f,c
  2161  0015B2  1E13               	comf	??_strlen+1,f,c
  2162  0015B4  4A12               	infsnz	??_strlen,f,c
  2163  0015B6  2A13               	incf	??_strlen+1,f,c
  2164  0015B8  5014               	movf	strlen@cp,w,c
  2165  0015BA  2412               	addwf	??_strlen,w,c
  2166  0015BC  6E10               	movwf	?_strlen,c
  2167  0015BE  5015               	movf	strlen@cp+1,w,c
  2168  0015C0  2013               	addwfc	??_strlen+1,w,c
  2169  0015C2  6E11               	movwf	?_strlen+1,c
  2170  0015C4  0012               	return	
  2171  0015C6                     __end_of_strlen:
  2172                           	opt stack 0
  2173                           tblptru	equ	0xFF8
  2174                           tblptrh	equ	0xFF7
  2175                           tblptrl	equ	0xFF6
  2176                           tablat	equ	0xFF5
  2177                           prodl	equ	0xFF3
  2178                           intcon2	equ	0xFF1
  2179                           indf2	equ	0xFDF
  2180                           postinc2	equ	0xFDE
  2181                           postdec2	equ	0xFDD
  2182                           fsr2h	equ	0xFDA
  2183                           fsr2l	equ	0xFD9
  2184                           status	equ	0xFD8
  2185                           
  2186 ;; *************** function _sprintf *****************
  2187 ;; Defined at:
  2188 ;;		line 492 in file "C:\Program Files (x86)\Microchip\xc8\v1.30\sources\common\doprnt.c"
  2189 ;; Parameters:    Size  Location     Type
  2190 ;;  sp              2   29[COMRAM] PTR unsigned char 
  2191 ;;		 -> main@osd_buff_870(30), main@osd_buff(30), main@buff(60), 
  2192 ;;  f               2   31[COMRAM] PTR const unsigned char 
  2193 ;;		 -> STR_9(2), STR_8(2), STR_7(6), STR_6(5), 
  2194 ;;		 -> STR_5(9), STR_4(11), STR_3(10), STR_2(13), 
  2195 ;;		 -> STR_1(32), 
  2196 ;; Auto vars:     Size  Location     Type
  2197 ;;  _val            5   59[COMRAM] struct .
  2198 ;;  ap              2   55[COMRAM] PTR void [1]
  2199 ;;		 -> ?_sprintf(2), 
  2200 ;;  c               1   64[COMRAM] char 
  2201 ;;  prec            1   58[COMRAM] char 
  2202 ;;  flag            1   57[COMRAM] unsigned char 
  2203 ;; Return value:  Size  Location     Type
  2204 ;;                  2   29[COMRAM] int 
  2205 ;; Registers used:
  2206 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2207 ;; Tracked objects:
  2208 ;;		On entry : 0/0
  2209 ;;		On exit  : 0/0
  2210 ;;		Unchanged: 0/0
  2211 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2212 ;;      Params:        24       0       0       0       0       0       0
  2213 ;;      Locals:        10       0       0       0       0       0       0
  2214 ;;      Temps:          2       0       0       0       0       0       0
  2215 ;;      Totals:        36       0       0       0       0       0       0
  2216 ;;Total ram usage:       36 bytes
  2217 ;; Hardware stack levels used:    1
  2218 ;; Hardware stack levels required when called:    2
  2219 ;; This function calls:
  2220 ;;		___lwdiv
  2221 ;;		___lwmod
  2222 ;; This function is called by:
  2223 ;;		_main
  2224 ;; This function uses a non-reentrant model
  2225 ;;
  2226                           
  2227                           	psect	text6
  2228  000D9E                     __ptext6:
  2229                           	opt stack 0
  2230  000D9E                     _sprintf:
  2231                           	opt stack 28
  2232                           
  2233                           ;doprnt.c: 494: va_list ap;
  2234                           ;doprnt.c: 499: signed char c;
  2235                           ;doprnt.c: 506: signed char prec;
  2236                           ;doprnt.c: 508: unsigned char flag;
  2237                           ;doprnt.c: 527: union {
  2238                           ;doprnt.c: 528: unsigned int _val;
  2239                           ;doprnt.c: 529: struct {
  2240                           ;doprnt.c: 530: const char * _cp;
  2241                           ;doprnt.c: 531: unsigned _len;
  2242                           ;doprnt.c: 532: } _str;
  2243                           ;doprnt.c: 533: } _val;
  2244                           ;doprnt.c: 542: *ap = __va_start();
  2245                           
  2246                           ;incstack = 0
  2247  000D9E  0E00               	movlw	high (?_sprintf+4)
  2248  000DA0  6E39               	movwf	sprintf@ap+1,c
  2249  000DA2  0E22               	movlw	low (?_sprintf+4)
  2250  000DA4  6E38               	movwf	sprintf@ap,c
  2251                           
  2252                           ;doprnt.c: 545: while(c = *f++) {
  2253  000DA6  D09C               	goto	l1947
  2254  000DA8                     l1895:
  2255                           
  2256                           ;doprnt.c: 547: if(c != '%')
  2257  000DA8  5041               	movf	sprintf@c,w,c
  2258  000DAA  0A25               	xorlw	37
  2259  000DAC  B4D8               	btfsc	status,2,c
  2260  000DAE  D009               	goto	l1901
  2261                           
  2262                           ;doprnt.c: 549: {
  2263                           ;doprnt.c: 550: ((*sp++ = (c)));
  2264  000DB0  C01E  FFD9         	movff	sprintf@sp,fsr2l
  2265  000DB4  C01F  FFDA         	movff	sprintf@sp+1,fsr2h
  2266  000DB8  C041  FFDF         	movff	sprintf@c,indf2
  2267  000DBC  4A1E               	infsnz	sprintf@sp,f,c
  2268  000DBE  2A1F               	incf	sprintf@sp+1,f,c
  2269                           
  2270                           ;doprnt.c: 551: continue;
  2271  000DC0  D08F               	goto	l1947
  2272  000DC2                     l1901:
  2273                           
  2274                           ;doprnt.c: 552: }
  2275                           ;doprnt.c: 557: flag = 0;
  2276  000DC2  6E36               	movwf	??_sprintf& (0+255),c
  2277  000DC4  0E00               	movlw	0
  2278  000DC6  6E3A               	movwf	sprintf@flag,c
  2279  000DC8  5036               	movf	??_sprintf& (0+255),w,c
  2280                           
  2281                           ;doprnt.c: 831: }
  2282                           
  2283                           ;doprnt.c: 822: continue;
  2284                           
  2285                           ;doprnt.c: 811: default:
  2286                           
  2287                           ;doprnt.c: 707: case 'i':
  2288                           ;doprnt.c: 708: break;
  2289                           
  2290                           ;doprnt.c: 706: case 'd':
  2291                           
  2292                           ;doprnt.c: 647: goto alldone;
  2293                           
  2294                           ;doprnt.c: 646: case 0:
  2295                           
  2296                           ;doprnt.c: 644: switch(c = *f++) {
  2297  000DCA  C020  FFF6         	movff	sprintf@f,tblptrl
  2298  000DCE  C021  FFF7         	movff	sprintf@f+1,tblptrh
  2299  000DD2  4A20               	infsnz	sprintf@f,f,c
  2300  000DD4  2A21               	incf	sprintf@f+1,f,c
  2301  000DD6  0008               	tblrd		*
  2302  000DD8  CFF5 F041          	movff	tablat,sprintf@c
  2303  000DDC  5041               	movf	sprintf@c& (0+255),w,c
  2304                           
  2305                           ; Switch size 1, requested type "space"
  2306                           ; Number of cases is 3, Range of values is 0 to 105
  2307                           ; switch strategies available:
  2308                           ; Name         Instructions Cycles
  2309                           ; simple_byte           10     6 (average)
  2310                           ;	Chosen strategy is simple_byte
  2311  000DDE  0A00               	xorlw	0	; case 0
  2312  000DE0  B4D8               	btfsc	status,2,c
  2313  000DE2  D089               	goto	l1949
  2314  000DE4  0A64               	xorlw	100	; case 100
  2315  000DE6  B4D8               	btfsc	status,2,c
  2316  000DE8  D003               	goto	l1907
  2317  000DEA  0A0D               	xorlw	13	; case 105
  2318  000DEC  A4D8               	btfss	status,2,c
  2319  000DEE  D078               	goto	l1947
  2320  000DF0                     l1907:
  2321                           
  2322                           ;doprnt.c: 1262: {
  2323                           ;doprnt.c: 1268: _val._val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
  2324  000DF0  C038  FFD9         	movff	sprintf@ap,fsr2l
  2325  000DF4  C039  FFDA         	movff	sprintf@ap+1,fsr2h
  2326  000DF8  CFDE F03C          	movff	postinc2,sprintf@_val
  2327  000DFC  CFDD F03D          	movff	postdec2,sprintf@_val+1
  2328  000E00  0E02               	movlw	2
  2329  000E02  2638               	addwf	sprintf@ap,f,c
  2330  000E04  0E00               	movlw	0
  2331  000E06  2239               	addwfc	sprintf@ap+1,f,c
  2332                           
  2333                           ;doprnt.c: 1270: if((int)_val._val < 0) {
  2334  000E08  503D               	movf	sprintf@_val+1,w,c
  2335  000E0A  0A80               	xorlw	128
  2336  000E0C  6EF3               	movwf	prodl,c
  2337  000E0E  0E80               	movlw	128
  2338  000E10  5CF3               	subwf	prodl,w,c
  2339  000E12  0E00               	movlw	0
  2340  000E14  B4D8               	btfsc	status,2,c
  2341  000E16  5C3C               	subwf	sprintf@_val,w,c
  2342  000E18  B0D8               	btfsc	status,0,c
  2343  000E1A  D006               	goto	l1917
  2344                           
  2345                           ;doprnt.c: 1271: flag |= 0x03;
  2346  000E1C  0E03               	movlw	3
  2347  000E1E  123A               	iorwf	sprintf@flag,f,c
  2348                           
  2349                           ;doprnt.c: 1272: _val._val = -_val._val;
  2350  000E20  6C3C               	negf	sprintf@_val,c
  2351  000E22  1E3D               	comf	sprintf@_val+1,f,c
  2352  000E24  B0D8               	btfsc	status,0,c
  2353  000E26  2A3D               	incf	sprintf@_val+1,f,c
  2354  000E28                     l1917:
  2355                           
  2356                           ;doprnt.c: 1273: }
  2357                           ;doprnt.c: 1275: }
  2358                           ;doprnt.c: 1314: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  2359  000E28  6E36               	movwf	??_sprintf& (0+255),c
  2360  000E2A  0E01               	movlw	1
  2361  000E2C  6E41               	movwf	sprintf@c,c
  2362  000E2E  5036               	movf	??_sprintf& (0+255),w,c
  2363  000E30  5041               	movf	sprintf@c,w,c
  2364  000E32  0A05               	xorlw	5
  2365  000E34  B4D8               	btfsc	status,2,c
  2366  000E36  D016               	goto	l1931
  2367                           
  2368                           ;doprnt.c: 1315: if(_val._val < dpowers[c])
  2369  000E38  5041               	movf	sprintf@c,w,c
  2370  000E3A  0D02               	mullw	2
  2371  000E3C  0E81               	movlw	low _dpowers
  2372  000E3E  24F3               	addwf	prodl,w,c
  2373  000E40  6EF6               	movwf	tblptrl,c
  2374  000E42  0E06               	movlw	high _dpowers
  2375  000E44  20F4               	addwfc	prodh,w,c
  2376  000E46  6EF7               	movwf	tblptrh,c
  2377  000E48  0009               	tblrd		*+
  2378  000E4A  CFF5 F036          	movff	tablat,??_sprintf
  2379  000E4E  0009               	tblrd		*+
  2380  000E50  CFF5 F037          	movff	tablat,??_sprintf+1
  2381  000E54  5036               	movf	??_sprintf,w,c
  2382  000E56  5C3C               	subwf	sprintf@_val,w,c
  2383  000E58  5037               	movf	??_sprintf+1,w,c
  2384  000E5A  583D               	subwfb	sprintf@_val+1,w,c
  2385  000E5C  A0D8               	btfss	status,0,c
  2386  000E5E  D002               	goto	l1931
  2387                           
  2388                           ;doprnt.c: 1316: break;
  2389  000E60  2A41               	incf	sprintf@c,f,c
  2390  000E62  D7E6               	goto	L2
  2391  000E64                     l1931:
  2392                           
  2393                           ;doprnt.c: 1431: {
  2394                           ;doprnt.c: 1447: if(flag & 0x03)
  2395  000E64  C03A  F036         	movff	sprintf@flag,??_sprintf
  2396  000E68  0E03               	movlw	3
  2397  000E6A  1636               	andwf	??_sprintf,f,c
  2398  000E6C  B4D8               	btfsc	status,2,c
  2399  000E6E  D008               	goto	l1937
  2400                           
  2401                           ;doprnt.c: 1448: ((*sp++ = ('-')));
  2402  000E70  C01E  FFD9         	movff	sprintf@sp,fsr2l
  2403  000E74  C01F  FFDA         	movff	sprintf@sp+1,fsr2h
  2404  000E78  0E2D               	movlw	45
  2405  000E7A  6EDF               	movwf	indf2,c
  2406  000E7C  4A1E               	infsnz	sprintf@sp,f,c
  2407  000E7E  2A1F               	incf	sprintf@sp+1,f,c
  2408  000E80                     l1937:
  2409                           
  2410                           ;doprnt.c: 1478: }
  2411                           ;doprnt.c: 1481: prec = c;
  2412  000E80  C041  F03B         	movff	sprintf@c,sprintf@prec
  2413                           
  2414                           ;doprnt.c: 1483: while(prec--) {
  2415  000E84  D029               	goto	l1945
  2416  000E86                     l1939:
  2417                           
  2418                           ;doprnt.c: 1487: {
  2419                           ;doprnt.c: 1498: c = (_val._val / dpowers[prec]) % 10 + '0';
  2420  000E86  503B               	movf	sprintf@prec,w,c
  2421  000E88  0D02               	mullw	2
  2422  000E8A  0E81               	movlw	low _dpowers
  2423  000E8C  24F3               	addwf	prodl,w,c
  2424  000E8E  6EF6               	movwf	tblptrl,c
  2425  000E90  0E06               	movlw	high _dpowers
  2426  000E92  20F4               	addwfc	prodh,w,c
  2427  000E94  6EF7               	movwf	tblptrh,c
  2428  000E96  0009               	tblrd		*+
  2429  000E98  CFF5 F012          	movff	tablat,___lwdiv@divisor
  2430  000E9C  000A               	tblrd		*-
  2431  000E9E  CFF5 F013          	movff	tablat,___lwdiv@divisor+1
  2432  000EA2  C03C  F010         	movff	sprintf@_val,___lwdiv@dividend
  2433  000EA6  C03D  F011         	movff	sprintf@_val+1,___lwdiv@dividend+1
  2434  000EAA  EC33  F00A         	call	___lwdiv	;wreg free
  2435  000EAE  C010  F018         	movff	?___lwdiv,___lwmod@dividend
  2436  000EB2  C011  F019         	movff	?___lwdiv+1,___lwmod@dividend+1
  2437  000EB6  0E00               	movlw	0
  2438  000EB8  6E1B               	movwf	___lwmod@divisor+1,c
  2439  000EBA  0E0A               	movlw	10
  2440  000EBC  6E1A               	movwf	___lwmod@divisor,c
  2441  000EBE  EC85  F00A         	call	___lwmod	;wreg free
  2442  000EC2  5018               	movf	?___lwmod,w,c
  2443  000EC4  0F30               	addlw	48
  2444  000EC6  6E41               	movwf	sprintf@c,c
  2445                           
  2446                           ;doprnt.c: 1532: }
  2447                           ;doprnt.c: 1533: ((*sp++ = (c)));
  2448  000EC8  C01E  FFD9         	movff	sprintf@sp,fsr2l
  2449  000ECC  C01F  FFDA         	movff	sprintf@sp+1,fsr2h
  2450  000ED0  C041  FFDF         	movff	sprintf@c,indf2
  2451  000ED4  4A1E               	infsnz	sprintf@sp,f,c
  2452  000ED6  2A1F               	incf	sprintf@sp+1,f,c
  2453  000ED8                     l1945:
  2454  000ED8  063B               	decf	sprintf@prec,f,c
  2455  000EDA  283B               	incf	sprintf@prec& (0+255),w,c
  2456  000EDC  A4D8               	btfss	status,2,c
  2457  000EDE  D7D3               	goto	l1939
  2458  000EE0                     l1947:
  2459  000EE0  C020  FFF6         	movff	sprintf@f,tblptrl
  2460  000EE4  C021  FFF7         	movff	sprintf@f+1,tblptrh
  2461  000EE8  4A20               	infsnz	sprintf@f,f,c
  2462  000EEA  2A21               	incf	sprintf@f+1,f,c
  2463  000EEC  0008               	tblrd		*
  2464  000EEE  CFF5 F041          	movff	tablat,sprintf@c
  2465  000EF2  6641               	tstfsz	sprintf@c& (0+255),c
  2466  000EF4  D759               	goto	l1895
  2467  000EF6                     l1949:
  2468                           
  2469                           ;doprnt.c: 1547: *sp = 0;
  2470  000EF6  C01E  FFD9         	movff	sprintf@sp,fsr2l
  2471  000EFA  C01F  FFDA         	movff	sprintf@sp+1,fsr2h
  2472  000EFE  0E00               	movlw	0
  2473  000F00  6EDF               	movwf	indf2,c
  2474                           
  2475                           ;doprnt.c: 1549: return 0;
  2476                           ;	Return value of _sprintf is never used
  2477  000F02  0012               	return	
  2478  000F04                     __end_of_sprintf:
  2479                           	opt stack 0
  2480                           tblptru	equ	0xFF8
  2481                           tblptrh	equ	0xFF7
  2482                           tblptrl	equ	0xFF6
  2483                           tablat	equ	0xFF5
  2484                           prodh	equ	0xFF4
  2485                           prodl	equ	0xFF3
  2486                           intcon2	equ	0xFF1
  2487                           indf2	equ	0xFDF
  2488                           postinc2	equ	0xFDE
  2489                           postdec2	equ	0xFDD
  2490                           fsr2h	equ	0xFDA
  2491                           fsr2l	equ	0xFD9
  2492                           status	equ	0xFD8
  2493                           
  2494 ;; *************** function ___lwmod *****************
  2495 ;; Defined at:
  2496 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.30\sources\common\lwmod.c"
  2497 ;; Parameters:    Size  Location     Type
  2498 ;;  dividend        2   23[COMRAM] unsigned int 
  2499 ;;  divisor         2   25[COMRAM] unsigned int 
  2500 ;; Auto vars:     Size  Location     Type
  2501 ;;  counter         1   28[COMRAM] unsigned char 
  2502 ;; Return value:  Size  Location     Type
  2503 ;;                  2   23[COMRAM] unsigned int 
  2504 ;; Registers used:
  2505 ;;		wreg, status,2, status,0
  2506 ;; Tracked objects:
  2507 ;;		On entry : 0/0
  2508 ;;		On exit  : 0/0
  2509 ;;		Unchanged: 0/0
  2510 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2511 ;;      Params:         4       0       0       0       0       0       0
  2512 ;;      Locals:         1       0       0       0       0       0       0
  2513 ;;      Temps:          1       0       0       0       0       0       0
  2514 ;;      Totals:         6       0       0       0       0       0       0
  2515 ;;Total ram usage:        6 bytes
  2516 ;; Hardware stack levels used:    1
  2517 ;; Hardware stack levels required when called:    1
  2518 ;; This function calls:
  2519 ;;		Nothing
  2520 ;; This function is called by:
  2521 ;;		_sprintf
  2522 ;; This function uses a non-reentrant model
  2523 ;;
  2524                           
  2525                           	psect	text7
  2526  00150A                     __ptext7:
  2527                           	opt stack 0
  2528  00150A                     ___lwmod:
  2529                           	opt stack 28
  2530                           
  2531                           ;incstack = 0
  2532  00150A  501B               	movf	___lwmod@divisor+1,w,c
  2533  00150C  101A               	iorwf	___lwmod@divisor,w,c
  2534  00150E  B4D8               	btfsc	status,2,c
  2535  001510  D01A               	goto	l859
  2536  001512  6E1C               	movwf	??___lwmod& (0+255),c
  2537  001514  0E01               	movlw	1
  2538  001516  6E1D               	movwf	___lwmod@counter,c
  2539  001518  501C               	movf	??___lwmod& (0+255),w,c
  2540  00151A  D004               	goto	l2233
  2541  00151C                     l2231:
  2542  00151C  90D8               	bcf	status,0,c
  2543  00151E  361A               	rlcf	___lwmod@divisor,f,c
  2544  001520  361B               	rlcf	___lwmod@divisor+1,f,c
  2545  001522  2A1D               	incf	___lwmod@counter,f,c
  2546  001524                     l2233:
  2547  001524  AE1B               	btfss	___lwmod@divisor+1,7,c
  2548  001526  D7FA               	goto	l2231
  2549  001528                     l2235:
  2550  001528  501A               	movf	___lwmod@divisor,w,c
  2551  00152A  5C18               	subwf	___lwmod@dividend,w,c
  2552  00152C  501B               	movf	___lwmod@divisor+1,w,c
  2553  00152E  5819               	subwfb	___lwmod@dividend+1,w,c
  2554  001530  A0D8               	btfss	status,0,c
  2555  001532  D004               	goto	l2239
  2556  001534  501A               	movf	___lwmod@divisor,w,c
  2557  001536  5E18               	subwf	___lwmod@dividend,f,c
  2558  001538  501B               	movf	___lwmod@divisor+1,w,c
  2559  00153A  5A19               	subwfb	___lwmod@dividend+1,f,c
  2560  00153C                     l2239:
  2561  00153C  90D8               	bcf	status,0,c
  2562  00153E  321B               	rrcf	___lwmod@divisor+1,f,c
  2563  001540  321A               	rrcf	___lwmod@divisor,f,c
  2564  001542  2E1D               	decfsz	___lwmod@counter,f,c
  2565  001544  D7F1               	goto	l2235
  2566  001546                     l859:
  2567  001546  C018  F018         	movff	___lwmod@dividend,?___lwmod
  2568  00154A  C019  F019         	movff	___lwmod@dividend+1,?___lwmod+1
  2569  00154E  0012               	return	
  2570  001550                     __end_of___lwmod:
  2571                           	opt stack 0
  2572                           tblptru	equ	0xFF8
  2573                           tblptrh	equ	0xFF7
  2574                           tblptrl	equ	0xFF6
  2575                           tablat	equ	0xFF5
  2576                           prodh	equ	0xFF4
  2577                           prodl	equ	0xFF3
  2578                           intcon2	equ	0xFF1
  2579                           indf2	equ	0xFDF
  2580                           postinc2	equ	0xFDE
  2581                           postdec2	equ	0xFDD
  2582                           fsr2h	equ	0xFDA
  2583                           fsr2l	equ	0xFD9
  2584                           status	equ	0xFD8
  2585                           
  2586 ;; *************** function ___lwdiv *****************
  2587 ;; Defined at:
  2588 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.30\sources\common\lwdiv.c"
  2589 ;; Parameters:    Size  Location     Type
  2590 ;;  dividend        2   15[COMRAM] unsigned int 
  2591 ;;  divisor         2   17[COMRAM] unsigned int 
  2592 ;; Auto vars:     Size  Location     Type
  2593 ;;  quotient        2   20[COMRAM] unsigned int 
  2594 ;;  counter         1   22[COMRAM] unsigned char 
  2595 ;; Return value:  Size  Location     Type
  2596 ;;                  2   15[COMRAM] unsigned int 
  2597 ;; Registers used:
  2598 ;;		wreg, status,2, status,0
  2599 ;; Tracked objects:
  2600 ;;		On entry : 0/0
  2601 ;;		On exit  : 0/0
  2602 ;;		Unchanged: 0/0
  2603 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2604 ;;      Params:         4       0       0       0       0       0       0
  2605 ;;      Locals:         3       0       0       0       0       0       0
  2606 ;;      Temps:          1       0       0       0       0       0       0
  2607 ;;      Totals:         8       0       0       0       0       0       0
  2608 ;;Total ram usage:        8 bytes
  2609 ;; Hardware stack levels used:    1
  2610 ;; Hardware stack levels required when called:    1
  2611 ;; This function calls:
  2612 ;;		Nothing
  2613 ;; This function is called by:
  2614 ;;		_sprintf
  2615 ;; This function uses a non-reentrant model
  2616 ;;
  2617                           
  2618                           	psect	text8
  2619  001466                     __ptext8:
  2620                           	opt stack 0
  2621  001466                     ___lwdiv:
  2622                           	opt stack 28
  2623                           
  2624                           ;incstack = 0
  2625  001466  0E00               	movlw	0
  2626  001468  6E16               	movwf	___lwdiv@quotient+1,c
  2627  00146A  0E00               	movlw	0
  2628  00146C  6E15               	movwf	___lwdiv@quotient,c
  2629  00146E  5013               	movf	___lwdiv@divisor+1,w,c
  2630  001470  1012               	iorwf	___lwdiv@divisor,w,c
  2631  001472  B4D8               	btfsc	status,2,c
  2632  001474  D01E               	goto	l849
  2633  001476  6E14               	movwf	??___lwdiv& (0+255),c
  2634  001478  0E01               	movlw	1
  2635  00147A  6E17               	movwf	___lwdiv@counter,c
  2636  00147C  5014               	movf	??___lwdiv& (0+255),w,c
  2637  00147E  D004               	goto	l2213
  2638  001480                     l2211:
  2639  001480  90D8               	bcf	status,0,c
  2640  001482  3612               	rlcf	___lwdiv@divisor,f,c
  2641  001484  3613               	rlcf	___lwdiv@divisor+1,f,c
  2642  001486  2A17               	incf	___lwdiv@counter,f,c
  2643  001488                     l2213:
  2644  001488  AE13               	btfss	___lwdiv@divisor+1,7,c
  2645  00148A  D7FA               	goto	l2211
  2646  00148C                     l2215:
  2647  00148C  90D8               	bcf	status,0,c
  2648  00148E  3615               	rlcf	___lwdiv@quotient,f,c
  2649  001490  3616               	rlcf	___lwdiv@quotient+1,f,c
  2650  001492  5012               	movf	___lwdiv@divisor,w,c
  2651  001494  5C10               	subwf	___lwdiv@dividend,w,c
  2652  001496  5013               	movf	___lwdiv@divisor+1,w,c
  2653  001498  5811               	subwfb	___lwdiv@dividend+1,w,c
  2654  00149A  A0D8               	btfss	status,0,c
  2655  00149C  D005               	goto	l2223
  2656  00149E  5012               	movf	___lwdiv@divisor,w,c
  2657  0014A0  5E10               	subwf	___lwdiv@dividend,f,c
  2658  0014A2  5013               	movf	___lwdiv@divisor+1,w,c
  2659  0014A4  5A11               	subwfb	___lwdiv@dividend+1,f,c
  2660  0014A6  8015               	bsf	___lwdiv@quotient,0,c
  2661  0014A8                     l2223:
  2662  0014A8  90D8               	bcf	status,0,c
  2663  0014AA  3213               	rrcf	___lwdiv@divisor+1,f,c
  2664  0014AC  3212               	rrcf	___lwdiv@divisor,f,c
  2665  0014AE  2E17               	decfsz	___lwdiv@counter,f,c
  2666  0014B0  D7ED               	goto	l2215
  2667  0014B2                     l849:
  2668  0014B2  C015  F010         	movff	___lwdiv@quotient,?___lwdiv
  2669  0014B6  C016  F011         	movff	___lwdiv@quotient+1,?___lwdiv+1
  2670  0014BA  0012               	return	
  2671  0014BC                     __end_of___lwdiv:
  2672                           	opt stack 0
  2673                           tblptru	equ	0xFF8
  2674                           tblptrh	equ	0xFF7
  2675                           tblptrl	equ	0xFF6
  2676                           tablat	equ	0xFF5
  2677                           prodh	equ	0xFF4
  2678                           prodl	equ	0xFF3
  2679                           intcon2	equ	0xFF1
  2680                           indf2	equ	0xFDF
  2681                           postinc2	equ	0xFDE
  2682                           postdec2	equ	0xFDD
  2683                           fsr2h	equ	0xFDA
  2684                           fsr2l	equ	0xFD9
  2685                           status	equ	0xFD8
  2686                           
  2687 ;; *************** function _read_an *****************
  2688 ;; Defined at:
  2689 ;;		line 201 in file "Tomcat_S_main.c"
  2690 ;; Parameters:    Size  Location     Type
  2691 ;;  channel         1    wreg     unsigned char 
  2692 ;; Auto vars:     Size  Location     Type
  2693 ;;  channel         1   16[COMRAM] unsigned char 
  2694 ;;  num             1   17[COMRAM] unsigned char 
  2695 ;; Return value:  Size  Location     Type
  2696 ;;                  1    wreg      unsigned char 
  2697 ;; Registers used:
  2698 ;;		wreg, status,2, status,0
  2699 ;; Tracked objects:
  2700 ;;		On entry : 0/0
  2701 ;;		On exit  : 0/0
  2702 ;;		Unchanged: 0/0
  2703 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2704 ;;      Params:         0       0       0       0       0       0       0
  2705 ;;      Locals:         2       0       0       0       0       0       0
  2706 ;;      Temps:          1       0       0       0       0       0       0
  2707 ;;      Totals:         3       0       0       0       0       0       0
  2708 ;;Total ram usage:        3 bytes
  2709 ;; Hardware stack levels used:    1
  2710 ;; Hardware stack levels required when called:    1
  2711 ;; This function calls:
  2712 ;;		Nothing
  2713 ;; This function is called by:
  2714 ;;		_main
  2715 ;; This function uses a non-reentrant model
  2716 ;;
  2717                           
  2718                           	psect	text9
  2719  001600                     __ptext9:
  2720                           	opt stack 0
  2721  001600                     _read_an:
  2722                           	opt stack 29
  2723                           
  2724                           ;incstack = 0
  2725                           ;read_an@channel stored from wreg
  2726  001600  CFE8 F011          	movff	wreg,read_an@channel
  2727                           
  2728                           ;Tomcat_S_main.c: 202: unsigned char num = 0;
  2729  001604  6E10               	movwf	??_read_an& (0+255),c
  2730  001606  0E00               	movlw	0
  2731  001608  6E12               	movwf	read_an@num,c
  2732  00160A  5010               	movf	??_read_an& (0+255),w,c
  2733                           
  2734                           ;Tomcat_S_main.c: 203: _delay(1000);
  2735  00160C  0EFA               	movlw	250
  2736  00160E                     u1377:
  2737  00160E  F000               	nop	
  2738  001610  2EE8               	decfsz	wreg,f,c
  2739  001612  D7FD               	goto	u1377
  2740                           
  2741                           ;Tomcat_S_main.c: 204: ADCON0bits.CHS = channel;
  2742  001614  C011  F010         	movff	read_an@channel,??_read_an
  2743  001618  4610               	rlncf	??_read_an,f,c
  2744  00161A  4610               	rlncf	??_read_an,f,c
  2745  00161C  50C2               	movf	4034,w,c	;volatile
  2746  00161E  1810               	xorwf	??_read_an,w,c
  2747  001620  0BC3               	andlw	-61
  2748  001622  1810               	xorwf	??_read_an,w,c
  2749  001624  6EC2               	movwf	4034,c	;volatile
  2750                           
  2751                           ;Tomcat_S_main.c: 205: ADCON0bits.GO = 1;
  2752  001626  82C2               	bsf	4034,1,c	;volatile
  2753  001628                     l106:
  2754  001628  B2C2               	btfsc	4034,1,c	;volatile
  2755  00162A  D7FE               	goto	l106
  2756                           
  2757                           ;Tomcat_S_main.c: 207: num = ADRESH;
  2758  00162C  CFC4 F012          	movff	4036,read_an@num	;volatile
  2759                           
  2760                           ;Tomcat_S_main.c: 208: return (num);
  2761  001630  5012               	movf	read_an@num,w,c
  2762  001632  0012               	return	
  2763  001634                     __end_of_read_an:
  2764                           	opt stack 0
  2765                           tblptru	equ	0xFF8
  2766                           tblptrh	equ	0xFF7
  2767                           tblptrl	equ	0xFF6
  2768                           tablat	equ	0xFF5
  2769                           prodh	equ	0xFF4
  2770                           prodl	equ	0xFF3
  2771                           intcon2	equ	0xFF1
  2772                           wreg	equ	0xFE8
  2773                           indf2	equ	0xFDF
  2774                           postinc2	equ	0xFDE
  2775                           postdec2	equ	0xFDD
  2776                           fsr2h	equ	0xFDA
  2777                           fsr2l	equ	0xFD9
  2778                           status	equ	0xFD8
  2779                           
  2780 ;; *************** function _putsUSART *****************
  2781 ;; Defined at:
  2782 ;;		line 14 in file "C:\Program Files (x86)\Microchip\xc8\v1.30\sources\pic18\plib\USART\uputs.c"
  2783 ;; Parameters:    Size  Location     Type
  2784 ;;  data            2   16[COMRAM] PTR unsigned char 
  2785 ;;		 -> main@buff(60), 
  2786 ;; Auto vars:     Size  Location     Type
  2787 ;;		None
  2788 ;; Return value:  Size  Location     Type
  2789 ;;		None               void
  2790 ;; Registers used:
  2791 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  2792 ;; Tracked objects:
  2793 ;;		On entry : 0/0
  2794 ;;		On exit  : 0/0
  2795 ;;		Unchanged: 0/0
  2796 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2797 ;;      Params:         2       0       0       0       0       0       0
  2798 ;;      Locals:         0       0       0       0       0       0       0
  2799 ;;      Temps:          0       0       0       0       0       0       0
  2800 ;;      Totals:         2       0       0       0       0       0       0
  2801 ;;Total ram usage:        2 bytes
  2802 ;; Hardware stack levels used:    1
  2803 ;; Hardware stack levels required when called:    2
  2804 ;; This function calls:
  2805 ;;		_WriteUSART
  2806 ;; This function is called by:
  2807 ;;		_main
  2808 ;; This function uses a non-reentrant model
  2809 ;;
  2810                           
  2811                           	psect	text10
  2812  0016B2                     __ptext10:
  2813                           	opt stack 0
  2814  0016B2                     _putsUSART:
  2815                           	opt stack 28
  2816  0016B2                     l308:
  2817  0016B2  A2AC               	btfss	4012,1,c	;volatile
  2818  0016B4  D7FE               	goto	l308
  2819  0016B6  C011  FFD9         	movff	putsUSART@data,fsr2l
  2820  0016BA  C012  FFDA         	movff	putsUSART@data+1,fsr2h
  2821  0016BE  50DF               	movf	indf2,w,c
  2822  0016C0  EC85  F00B         	call	_WriteUSART
  2823  0016C4  C011  FFD9         	movff	putsUSART@data,fsr2l
  2824  0016C8  C012  FFDA         	movff	putsUSART@data+1,fsr2h
  2825  0016CC  4A11               	infsnz	putsUSART@data,f,c
  2826  0016CE  2A12               	incf	putsUSART@data+1,f,c
  2827  0016D0  50DF               	movf	indf2,w,c
  2828  0016D2  B4D8               	btfsc	status,2,c
  2829  0016D4  0012               	return	
  2830  0016D6  D7ED               	goto	l308
  2831  0016D8                     __end_of_putsUSART:
  2832                           	opt stack 0
  2833                           tblptru	equ	0xFF8
  2834                           tblptrh	equ	0xFF7
  2835                           tblptrl	equ	0xFF6
  2836                           tablat	equ	0xFF5
  2837                           prodh	equ	0xFF4
  2838                           prodl	equ	0xFF3
  2839                           intcon2	equ	0xFF1
  2840                           wreg	equ	0xFE8
  2841                           indf2	equ	0xFDF
  2842                           postinc2	equ	0xFDE
  2843                           postdec2	equ	0xFDD
  2844                           fsr2h	equ	0xFDA
  2845                           fsr2l	equ	0xFD9
  2846                           status	equ	0xFD8
  2847                           
  2848 ;; *************** function _WriteUSART *****************
  2849 ;; Defined at:
  2850 ;;		line 13 in file "C:\Program Files (x86)\Microchip\xc8\v1.30\sources\pic18\plib\USART\uwrite.c"
  2851 ;; Parameters:    Size  Location     Type
  2852 ;;  data            1    wreg     unsigned char 
  2853 ;; Auto vars:     Size  Location     Type
  2854 ;;  data            1   15[COMRAM] unsigned char 
  2855 ;; Return value:  Size  Location     Type
  2856 ;;		None               void
  2857 ;; Registers used:
  2858 ;;		wreg
  2859 ;; Tracked objects:
  2860 ;;		On entry : 0/0
  2861 ;;		On exit  : 0/0
  2862 ;;		Unchanged: 0/0
  2863 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2864 ;;      Params:         0       0       0       0       0       0       0
  2865 ;;      Locals:         1       0       0       0       0       0       0
  2866 ;;      Temps:          0       0       0       0       0       0       0
  2867 ;;      Totals:         1       0       0       0       0       0       0
  2868 ;;Total ram usage:        1 bytes
  2869 ;; Hardware stack levels used:    1
  2870 ;; Hardware stack levels required when called:    1
  2871 ;; This function calls:
  2872 ;;		Nothing
  2873 ;; This function is called by:
  2874 ;;		_putsUSART
  2875 ;;		_tx_chars
  2876 ;; This function uses a non-reentrant model
  2877 ;;
  2878                           
  2879                           	psect	text11
  2880  00170A                     __ptext11:
  2881                           	opt stack 0
  2882  00170A                     _WriteUSART:
  2883                           	opt stack 28
  2884                           
  2885                           ;incstack = 0
  2886                           ;WriteUSART@data stored from wreg
  2887  00170A  CFE8 F010          	movff	wreg,WriteUSART@data
  2888  00170E  ACAC               	btfss	4012,6,c	;volatile
  2889  001710  D003               	goto	l2071
  2890  001712  90AC               	bcf	4012,0,c	;volatile
  2891  001714  B248               	btfsc	_USART_Status,1,c
  2892  001716  80AC               	bsf	4012,0,c	;volatile
  2893  001718                     l2071:
  2894  001718  C010  FFAD         	movff	WriteUSART@data,4013	;volatile
  2895  00171C  0012               	return	
  2896  00171E                     __end_of_WriteUSART:
  2897                           	opt stack 0
  2898                           tblptru	equ	0xFF8
  2899                           tblptrh	equ	0xFF7
  2900                           tblptrl	equ	0xFF6
  2901                           tablat	equ	0xFF5
  2902                           prodh	equ	0xFF4
  2903                           prodl	equ	0xFF3
  2904                           intcon2	equ	0xFF1
  2905                           wreg	equ	0xFE8
  2906                           indf2	equ	0xFDF
  2907                           postinc2	equ	0xFDE
  2908                           postdec2	equ	0xFDD
  2909                           fsr2h	equ	0xFDA
  2910                           fsr2l	equ	0xFD9
  2911                           status	equ	0xFD8
  2912                           
  2913 ;; *************** function _get_wrist *****************
  2914 ;; Defined at:
  2915 ;;		line 223 in file "Tomcat_S_main.c"
  2916 ;; Parameters:    Size  Location     Type
  2917 ;;		None
  2918 ;; Auto vars:     Size  Location     Type
  2919 ;;  wrist           2   17[COMRAM] int 
  2920 ;; Return value:  Size  Location     Type
  2921 ;;                  2   15[COMRAM] unsigned int 
  2922 ;; Registers used:
  2923 ;;		wreg, status,2
  2924 ;; Tracked objects:
  2925 ;;		On entry : 0/0
  2926 ;;		On exit  : 0/0
  2927 ;;		Unchanged: 0/0
  2928 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2929 ;;      Params:         2       0       0       0       0       0       0
  2930 ;;      Locals:         2       0       0       0       0       0       0
  2931 ;;      Temps:          0       0       0       0       0       0       0
  2932 ;;      Totals:         4       0       0       0       0       0       0
  2933 ;;Total ram usage:        4 bytes
  2934 ;; Hardware stack levels used:    1
  2935 ;; Hardware stack levels required when called:    1
  2936 ;; This function calls:
  2937 ;;		Nothing
  2938 ;; This function is called by:
  2939 ;;		_main
  2940 ;; This function uses a non-reentrant model
  2941 ;;
  2942                           
  2943                           	psect	text12
  2944  001634                     __ptext12:
  2945                           	opt stack 0
  2946  001634                     _get_wrist:
  2947                           	opt stack 29
  2948                           
  2949                           ;Tomcat_S_main.c: 224: int wrist;
  2950                           ;Tomcat_S_main.c: 225: if (PORTDbits.RD0 == 1)
  2951                           
  2952                           ;incstack = 0
  2953  001634  A083               	btfss	3971,0,c	;volatile
  2954  001636  D004               	goto	l119
  2955                           
  2956                           ;Tomcat_S_main.c: 226: wrist = 187;
  2957  001638  0E00               	movlw	0
  2958  00163A  6E13               	movwf	get_wrist@wrist+1,c
  2959  00163C  0EBB               	movlw	187
  2960  00163E  D009               	goto	L4
  2961  001640                     l119:
  2962                           
  2963                           ;Tomcat_S_main.c: 227: else if (PORTCbits.RC2 == 1)
  2964  001640  A482               	btfss	3970,2,c	;volatile
  2965  001642  D004               	goto	l1887
  2966                           
  2967                           ;Tomcat_S_main.c: 228: wrist = 67;
  2968  001644  0E00               	movlw	0
  2969  001646  6E13               	movwf	get_wrist@wrist+1,c
  2970  001648  0E43               	movlw	67
  2971  00164A  D003               	goto	L4
  2972  00164C                     l1887:
  2973                           
  2974                           ;Tomcat_S_main.c: 229: else
  2975                           ;Tomcat_S_main.c: 230: wrist = 127;
  2976  00164C  0E00               	movlw	0
  2977  00164E  6E13               	movwf	get_wrist@wrist+1,c
  2978  001650  0E7F               	movlw	127
  2979  001652                     L4:
  2980  001652  6E12               	movwf	get_wrist@wrist,c
  2981                           
  2982                           ;Tomcat_S_main.c: 231: return (wrist);
  2983  001654  C012  F010         	movff	get_wrist@wrist,?_get_wrist
  2984  001658  C013  F011         	movff	get_wrist@wrist+1,?_get_wrist+1
  2985  00165C  0012               	return	
  2986  00165E                     __end_of_get_wrist:
  2987                           	opt stack 0
  2988                           tblptru	equ	0xFF8
  2989                           tblptrh	equ	0xFF7
  2990                           tblptrl	equ	0xFF6
  2991                           tablat	equ	0xFF5
  2992                           prodh	equ	0xFF4
  2993                           prodl	equ	0xFF3
  2994                           intcon2	equ	0xFF1
  2995                           wreg	equ	0xFE8
  2996                           indf2	equ	0xFDF
  2997                           postinc2	equ	0xFDE
  2998                           postdec2	equ	0xFDD
  2999                           fsr2h	equ	0xFDA
  3000                           fsr2l	equ	0xFD9
  3001                           status	equ	0xFD8
  3002                           
  3003 ;; *************** function _get_claw *****************
  3004 ;; Defined at:
  3005 ;;		line 211 in file "Tomcat_S_main.c"
  3006 ;; Parameters:    Size  Location     Type
  3007 ;;		None
  3008 ;; Auto vars:     Size  Location     Type
  3009 ;;  claw            2   17[COMRAM] int 
  3010 ;; Return value:  Size  Location     Type
  3011 ;;                  2   15[COMRAM] unsigned int 
  3012 ;; Registers used:
  3013 ;;		wreg, status,2
  3014 ;; Tracked objects:
  3015 ;;		On entry : 0/0
  3016 ;;		On exit  : 0/0
  3017 ;;		Unchanged: 0/0
  3018 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3019 ;;      Params:         2       0       0       0       0       0       0
  3020 ;;      Locals:         2       0       0       0       0       0       0
  3021 ;;      Temps:          0       0       0       0       0       0       0
  3022 ;;      Totals:         4       0       0       0       0       0       0
  3023 ;;Total ram usage:        4 bytes
  3024 ;; Hardware stack levels used:    1
  3025 ;; Hardware stack levels required when called:    1
  3026 ;; This function calls:
  3027 ;;		Nothing
  3028 ;; This function is called by:
  3029 ;;		_main
  3030 ;; This function uses a non-reentrant model
  3031 ;;
  3032                           
  3033                           	psect	text13
  3034  00165E                     __ptext13:
  3035                           	opt stack 0
  3036  00165E                     _get_claw:
  3037                           	opt stack 29
  3038                           
  3039                           ;Tomcat_S_main.c: 212: int claw;
  3040                           ;Tomcat_S_main.c: 213: if (PORTBbits.RB4 == 1)
  3041                           
  3042                           ;incstack = 0
  3043  00165E  A881               	btfss	3969,4,c	;volatile
  3044  001660  D004               	goto	l112
  3045                           
  3046                           ;Tomcat_S_main.c: 214: claw = 187;
  3047  001662  0E00               	movlw	0
  3048  001664  6E13               	movwf	get_claw@claw+1,c
  3049  001666  0EBB               	movlw	187
  3050  001668  D009               	goto	L6
  3051  00166A                     l112:
  3052                           
  3053                           ;Tomcat_S_main.c: 215: else if (PORTAbits.RA4 == 1)
  3054  00166A  A880               	btfss	3968,4,c	;volatile
  3055  00166C  D004               	goto	l1875
  3056                           
  3057                           ;Tomcat_S_main.c: 216: claw = 67;
  3058  00166E  0E00               	movlw	0
  3059  001670  6E13               	movwf	get_claw@claw+1,c
  3060  001672  0E43               	movlw	67
  3061  001674  D003               	goto	L6
  3062  001676                     l1875:
  3063                           
  3064                           ;Tomcat_S_main.c: 217: else
  3065                           ;Tomcat_S_main.c: 218: claw = 127;
  3066  001676  0E00               	movlw	0
  3067  001678  6E13               	movwf	get_claw@claw+1,c
  3068  00167A  0E7F               	movlw	127
  3069  00167C                     L6:
  3070  00167C  6E12               	movwf	get_claw@claw,c
  3071                           
  3072                           ;Tomcat_S_main.c: 219: return (claw);
  3073  00167E  C012  F010         	movff	get_claw@claw,?_get_claw
  3074  001682  C013  F011         	movff	get_claw@claw+1,?_get_claw+1
  3075  001686  0012               	return	
  3076  001688                     __end_of_get_claw:
  3077                           	opt stack 0
  3078                           tblptru	equ	0xFF8
  3079                           tblptrh	equ	0xFF7
  3080                           tblptrl	equ	0xFF6
  3081                           tablat	equ	0xFF5
  3082                           prodh	equ	0xFF4
  3083                           prodl	equ	0xFF3
  3084                           intcon2	equ	0xFF1
  3085                           wreg	equ	0xFE8
  3086                           indf2	equ	0xFDF
  3087                           postinc2	equ	0xFDE
  3088                           postdec2	equ	0xFDD
  3089                           fsr2h	equ	0xFDA
  3090                           fsr2l	equ	0xFD9
  3091                           status	equ	0xFD8
  3092                           
  3093 ;; *************** function _atoi *****************
  3094 ;; Defined at:
  3095 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.30\sources\common\atoi.c"
  3096 ;; Parameters:    Size  Location     Type
  3097 ;;  s               2   21[COMRAM] PTR const unsigned char 
  3098 ;;		 -> NULL(0), RAM(1535), 
  3099 ;; Auto vars:     Size  Location     Type
  3100 ;;  a               2   26[COMRAM] int 
  3101 ;;  sign            1   25[COMRAM] unsigned char 
  3102 ;; Return value:  Size  Location     Type
  3103 ;;                  2   21[COMRAM] int 
  3104 ;; Registers used:
  3105 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3106 ;; Tracked objects:
  3107 ;;		On entry : 0/0
  3108 ;;		On exit  : 0/0
  3109 ;;		Unchanged: 0/0
  3110 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3111 ;;      Params:         2       0       0       0       0       0       0
  3112 ;;      Locals:         3       0       0       0       0       0       0
  3113 ;;      Temps:          2       0       0       0       0       0       0
  3114 ;;      Totals:         7       0       0       0       0       0       0
  3115 ;;Total ram usage:        7 bytes
  3116 ;; Hardware stack levels used:    1
  3117 ;; Hardware stack levels required when called:    2
  3118 ;; This function calls:
  3119 ;;		___wmul
  3120 ;;		_isdigit
  3121 ;; This function is called by:
  3122 ;;		_main
  3123 ;; This function uses a non-reentrant model
  3124 ;;
  3125                           
  3126                           	psect	text14
  3127  00100A                     __ptext14:
  3128                           	opt stack 0
  3129  00100A                     _atoi:
  3130                           	opt stack 28
  3131                           
  3132                           ;incstack = 0
  3133  00100A  D002               	goto	l1989
  3134  00100C                     l1987:
  3135  00100C  4A16               	infsnz	atoi@s,f,c
  3136  00100E  2A17               	incf	atoi@s+1,f,c
  3137  001010                     l1989:
  3138  001010  C016  FFD9         	movff	atoi@s,fsr2l
  3139  001014  C017  FFDA         	movff	atoi@s+1,fsr2h
  3140  001018  50DF               	movf	indf2,w,c
  3141  00101A  0A20               	xorlw	32
  3142  00101C  B4D8               	btfsc	status,2,c
  3143  00101E  D7F6               	goto	l1987
  3144  001020  C016  FFD9         	movff	atoi@s,fsr2l
  3145  001024  C017  FFDA         	movff	atoi@s+1,fsr2h
  3146  001028  50DF               	movf	indf2,w,c
  3147  00102A  0A09               	xorlw	9
  3148  00102C  B4D8               	btfsc	status,2,c
  3149  00102E  D7EE               	goto	l1987
  3150  001030  0E00               	movlw	0
  3151  001032  6E1C               	movwf	atoi@a+1,c
  3152  001034  0E00               	movlw	0
  3153  001036  6E1B               	movwf	atoi@a,c
  3154  001038  6E18               	movwf	??_atoi& (0+255),c
  3155  00103A  0E00               	movlw	0
  3156  00103C  6E1A               	movwf	atoi@sign,c
  3157  00103E  5018               	movf	??_atoi& (0+255),w,c
  3158  001040  0E2D               	movlw	45
  3159  001042  C016  FFD9         	movff	atoi@s,fsr2l
  3160  001046  C017  FFDA         	movff	atoi@s+1,fsr2h
  3161  00104A  62DF               	cpfseq	indf2,c
  3162  00104C  D002               	goto	l2001
  3163  00104E  2A1A               	incf	atoi@sign,f,c
  3164  001050  D023               	goto	L7
  3165  001052                     l2001:
  3166  001052  0E2B               	movlw	43
  3167  001054  C016  FFD9         	movff	atoi@s,fsr2l
  3168  001058  C017  FFDA         	movff	atoi@s+1,fsr2h
  3169  00105C  62DF               	cpfseq	indf2,c
  3170  00105E  D01E               	goto	l2009
  3171  001060  D01B               	goto	L7
  3172  001062                     l2005:
  3173  001062  C01B  F010         	movff	atoi@a,___wmul@multiplier
  3174  001066  C01C  F011         	movff	atoi@a+1,___wmul@multiplier+1
  3175  00106A  0E00               	movlw	0
  3176  00106C  6E13               	movwf	___wmul@multiplicand+1,c
  3177  00106E  0E0A               	movlw	10
  3178  001070  6E12               	movwf	___wmul@multiplicand,c
  3179  001072  ECE3  F00A         	call	___wmul	;wreg free
  3180  001076  C016  FFD9         	movff	atoi@s,fsr2l
  3181  00107A  C017  FFDA         	movff	atoi@s+1,fsr2h
  3182  00107E  50DF               	movf	indf2,w,c
  3183  001080  6E18               	movwf	??_atoi& (0+255),c
  3184  001082  6A19               	clrf	(??_atoi+1)& (0+255),c
  3185  001084  5010               	movf	?___wmul,w,c
  3186  001086  2618               	addwf	??_atoi,f,c
  3187  001088  5011               	movf	?___wmul+1,w,c
  3188  00108A  2219               	addwfc	??_atoi+1,f,c
  3189  00108C  0ED0               	movlw	208
  3190  00108E  2418               	addwf	??_atoi,w,c
  3191  001090  6E1B               	movwf	atoi@a,c
  3192  001092  0EFF               	movlw	255
  3193  001094  2019               	addwfc	??_atoi+1,w,c
  3194  001096  6E1C               	movwf	atoi@a+1,c
  3195  001098                     L7:
  3196  001098  4A16               	infsnz	atoi@s,f,c
  3197  00109A  2A17               	incf	atoi@s+1,f,c
  3198  00109C                     l2009:
  3199  00109C  C016  FFD9         	movff	atoi@s,fsr2l
  3200  0010A0  C017  FFDA         	movff	atoi@s+1,fsr2h
  3201  0010A4  50DF               	movf	indf2,w,c
  3202  0010A6  EC44  F00B         	call	_isdigit
  3203  0010AA  B0D8               	btfsc	status,0,c
  3204  0010AC  D7DA               	goto	l2005
  3205  0010AE  501A               	movf	atoi@sign,w,c
  3206  0010B0  B4D8               	btfsc	status,2,c
  3207  0010B2  D00D               	goto	l487
  3208  0010B4  C01B  F018         	movff	atoi@a,??_atoi
  3209  0010B8  C01C  F019         	movff	atoi@a+1,??_atoi+1
  3210  0010BC  1E18               	comf	??_atoi,f,c
  3211  0010BE  1E19               	comf	??_atoi+1,f,c
  3212  0010C0  4A18               	infsnz	??_atoi,f,c
  3213  0010C2  2A19               	incf	??_atoi+1,f,c
  3214  0010C4  C018  F016         	movff	??_atoi,?_atoi
  3215  0010C8  C019  F017         	movff	??_atoi+1,?_atoi+1
  3216  0010CC  D004               	goto	l488
  3217  0010CE                     l487:
  3218  0010CE  C01B  F016         	movff	atoi@a,?_atoi
  3219  0010D2  C01C  F017         	movff	atoi@a+1,?_atoi+1
  3220  0010D6                     l488:
  3221  0010D6  0012               	return	
  3222  0010D8                     __end_of_atoi:
  3223                           	opt stack 0
  3224                           tblptru	equ	0xFF8
  3225                           tblptrh	equ	0xFF7
  3226                           tblptrl	equ	0xFF6
  3227                           tablat	equ	0xFF5
  3228                           prodh	equ	0xFF4
  3229                           prodl	equ	0xFF3
  3230                           intcon2	equ	0xFF1
  3231                           wreg	equ	0xFE8
  3232                           indf2	equ	0xFDF
  3233                           postinc2	equ	0xFDE
  3234                           postdec2	equ	0xFDD
  3235                           fsr2h	equ	0xFDA
  3236                           fsr2l	equ	0xFD9
  3237                           status	equ	0xFD8
  3238                           
  3239 ;; *************** function _isdigit *****************
  3240 ;; Defined at:
  3241 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.30\sources\common\isdigit.c"
  3242 ;; Parameters:    Size  Location     Type
  3243 ;;  c               1    wreg     unsigned char 
  3244 ;; Auto vars:     Size  Location     Type
  3245 ;;  c               1   17[COMRAM] unsigned char 
  3246 ;; Return value:  Size  Location     Type
  3247 ;;		None               void
  3248 ;; Registers used:
  3249 ;;		wreg, status,2, status,0
  3250 ;; Tracked objects:
  3251 ;;		On entry : 0/0
  3252 ;;		On exit  : 0/0
  3253 ;;		Unchanged: 0/0
  3254 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3255 ;;      Params:         0       0       0       0       0       0       0
  3256 ;;      Locals:         2       0       0       0       0       0       0
  3257 ;;      Temps:          1       0       0       0       0       0       0
  3258 ;;      Totals:         3       0       0       0       0       0       0
  3259 ;;Total ram usage:        3 bytes
  3260 ;; Hardware stack levels used:    1
  3261 ;; Hardware stack levels required when called:    1
  3262 ;; This function calls:
  3263 ;;		Nothing
  3264 ;; This function is called by:
  3265 ;;		_atoi
  3266 ;; This function uses a non-reentrant model
  3267 ;;
  3268                           
  3269                           	psect	text15
  3270  001688                     __ptext15:
  3271                           	opt stack 0
  3272  001688                     _isdigit:
  3273                           	opt stack 28
  3274                           
  3275                           ;incstack = 0
  3276                           ;isdigit@c stored from wreg
  3277  001688  CFE8 F012          	movff	wreg,isdigit@c
  3278  00168C  6E10               	movwf	??_isdigit& (0+255),c
  3279  00168E  0E00               	movlw	0
  3280  001690  6E11               	movwf	_isdigit$2144,c
  3281  001692  5010               	movf	??_isdigit& (0+255),w,c
  3282  001694  0E3A               	movlw	58
  3283  001696  5C12               	subwf	isdigit@c,w,c
  3284  001698  B0D8               	btfsc	status,0,c
  3285  00169A  D007               	goto	l2201
  3286  00169C  0E2F               	movlw	47
  3287  00169E  6412               	cpfsgt	isdigit@c,c
  3288  0016A0  D004               	goto	l2201
  3289  0016A2  6E10               	movwf	??_isdigit& (0+255),c
  3290  0016A4  0E01               	movlw	1
  3291  0016A6  6E11               	movwf	_isdigit$2144,c
  3292  0016A8  5010               	movf	??_isdigit& (0+255),w,c
  3293  0016AA                     l2201:
  3294  0016AA  C011  F010         	movff	_isdigit$2144,??_isdigit
  3295  0016AE  3010               	rrcf	??_isdigit,w,c
  3296  0016B0  0012               	return	
  3297  0016B2                     __end_of_isdigit:
  3298                           	opt stack 0
  3299                           tblptru	equ	0xFF8
  3300                           tblptrh	equ	0xFF7
  3301                           tblptrl	equ	0xFF6
  3302                           tablat	equ	0xFF5
  3303                           prodh	equ	0xFF4
  3304                           prodl	equ	0xFF3
  3305                           intcon2	equ	0xFF1
  3306                           wreg	equ	0xFE8
  3307                           indf2	equ	0xFDF
  3308                           postinc2	equ	0xFDE
  3309                           postdec2	equ	0xFDD
  3310                           fsr2h	equ	0xFDA
  3311                           fsr2l	equ	0xFD9
  3312                           status	equ	0xFD8
  3313                           
  3314 ;; *************** function _Str_output *****************
  3315 ;; Defined at:
  3316 ;;		line 118 in file "OSD.c"
  3317 ;; Parameters:    Size  Location     Type
  3318 ;;  row             2   31[COMRAM] int 
  3319 ;;  col             2   33[COMRAM] int 
  3320 ;;  word            2   35[COMRAM] PTR unsigned char 
  3321 ;;		 -> main@osd_buff_870(30), main@osd_buff(30), 
  3322 ;;  num             1   37[COMRAM] unsigned char 
  3323 ;; Auto vars:     Size  Location     Type
  3324 ;;  n               1   39[COMRAM] unsigned char 
  3325 ;; Return value:  Size  Location     Type
  3326 ;;		None               void
  3327 ;; Registers used:
  3328 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, btemp+8, btemp+9, btemp+10, btemp+11, tosl, structret, tblptrl, tblptrh, tblp
      +tru, prodl, prodh, bsr, cstack
  3329 ;; Tracked objects:
  3330 ;;		On entry : 0/0
  3331 ;;		On exit  : 0/0
  3332 ;;		Unchanged: 0/0
  3333 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3334 ;;      Params:         7       0       0       0       0       0       0
  3335 ;;      Locals:         1       0       0       0       0       0       0
  3336 ;;      Temps:          1       0       0       0       0       0       0
  3337 ;;      Totals:         9       0       0       0       0       0       0
  3338 ;;Total ram usage:        9 bytes
  3339 ;; Hardware stack levels used:    1
  3340 ;; Hardware stack levels required when called:    3
  3341 ;; This function calls:
  3342 ;;		_OSD_write
  3343 ;; This function is called by:
  3344 ;;		_main
  3345 ;; This function uses a non-reentrant model
  3346 ;;
  3347                           
  3348                           	psect	text16
  3349  0014BC                     __ptext16:
  3350                           	opt stack 0
  3351  0014BC                     _Str_output:
  3352                           	opt stack 27
  3353                           
  3354                           ;OSD.c: 121: char n = 0;
  3355                           
  3356                           ;incstack = 0
  3357  0014BC  6E27               	movwf	??_Str_output& (0+255),c
  3358  0014BE  0E00               	movlw	0
  3359  0014C0  6E28               	movwf	Str_output@n,c
  3360  0014C2  5027               	movf	??_Str_output& (0+255),w,c
  3361                           
  3362                           ;OSD.c: 122: while (n <= num) {
  3363  0014C4  D01D               	goto	l2033
  3364  0014C6                     l2027:
  3365                           
  3366                           ;OSD.c: 123: OSD_write(row, col, char_map[word[n]]);
  3367  0014C6  C022  F016         	movff	Str_output@col,OSD_write@_col
  3368  0014CA  5028               	movf	Str_output@n,w,c
  3369  0014CC  0D01               	mullw	1
  3370  0014CE  50F3               	movf	prodl,w,c
  3371  0014D0  2424               	addwf	Str_output@word,w,c
  3372  0014D2  6ED9               	movwf	fsr2l,c
  3373  0014D4  50F4               	movf	prodh,w,c
  3374  0014D6  2025               	addwfc	Str_output@word+1,w,c
  3375  0014D8  6EDA               	movwf	fsr2h,c
  3376  0014DA  50DF               	movf	indf2,w,c
  3377  0014DC  6E27               	movwf	??_Str_output& (0+255),c
  3378  0014DE  5027               	movf	??_Str_output,w,c
  3379  0014E0  0D01               	mullw	1
  3380  0014E2  0E01               	movlw	low _char_map
  3381  0014E4  24F3               	addwf	prodl,w,c
  3382  0014E6  6EF6               	movwf	tblptrl,c
  3383  0014E8  0E06               	movlw	high _char_map
  3384  0014EA  20F4               	addwfc	prodh,w,c
  3385  0014EC  6EF7               	movwf	tblptrh,c
  3386  0014EE  0008               	tblrd		*
  3387  0014F0  CFF5 F017          	movff	tablat,OSD_write@_font
  3388  0014F4  5020               	movf	Str_output@row,w,c
  3389  0014F6  EC0F  F009         	call	_OSD_write
  3390                           
  3391                           ;OSD.c: 124: n++;
  3392  0014FA  2A28               	incf	Str_output@n,f,c
  3393                           
  3394                           ;OSD.c: 125: col++;
  3395  0014FC  4A22               	infsnz	Str_output@col,f,c
  3396  0014FE  2A23               	incf	Str_output@col+1,f,c
  3397  001500                     l2033:
  3398  001500  5028               	movf	Str_output@n,w,c
  3399  001502  5C26               	subwf	Str_output@num,w,c
  3400  001504  A0D8               	btfss	status,0,c
  3401  001506  0012               	return	
  3402  001508  D7DE               	goto	l2027
  3403  00150A                     __end_of_Str_output:
  3404                           	opt stack 0
  3405                           tblptru	equ	0xFF8
  3406                           tblptrh	equ	0xFF7
  3407                           tblptrl	equ	0xFF6
  3408                           tablat	equ	0xFF5
  3409                           prodh	equ	0xFF4
  3410                           prodl	equ	0xFF3
  3411                           intcon2	equ	0xFF1
  3412                           wreg	equ	0xFE8
  3413                           indf2	equ	0xFDF
  3414                           postinc2	equ	0xFDE
  3415                           postdec2	equ	0xFDD
  3416                           fsr2h	equ	0xFDA
  3417                           fsr2l	equ	0xFD9
  3418                           status	equ	0xFD8
  3419                           
  3420 ;; *************** function _OSD_write *****************
  3421 ;; Defined at:
  3422 ;;		line 4 in file "OSD.c"
  3423 ;; Parameters:    Size  Location     Type
  3424 ;;  _row            1    wreg     unsigned char 
  3425 ;;  _col            1   21[COMRAM] unsigned char 
  3426 ;;  _font           1   22[COMRAM] unsigned char 
  3427 ;; Auto vars:     Size  Location     Type
  3428 ;;  _row            1   26[COMRAM] unsigned char 
  3429 ;;  pos             2   29[COMRAM] unsigned int 
  3430 ;;  posh            1   28[COMRAM] unsigned char 
  3431 ;;  posl            1   27[COMRAM] unsigned char 
  3432 ;; Return value:  Size  Location     Type
  3433 ;;		None               void
  3434 ;; Registers used:
  3435 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  3436 ;; Tracked objects:
  3437 ;;		On entry : 0/0
  3438 ;;		On exit  : 0/0
  3439 ;;		Unchanged: 0/0
  3440 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3441 ;;      Params:         2       0       0       0       0       0       0
  3442 ;;      Locals:         5       0       0       0       0       0       0
  3443 ;;      Temps:          3       0       0       0       0       0       0
  3444 ;;      Totals:        10       0       0       0       0       0       0
  3445 ;;Total ram usage:       10 bytes
  3446 ;; Hardware stack levels used:    1
  3447 ;; Hardware stack levels required when called:    2
  3448 ;; This function calls:
  3449 ;;		_WriteSPI
  3450 ;;		___wmul
  3451 ;; This function is called by:
  3452 ;;		_main
  3453 ;;		_Str_output
  3454 ;; This function uses a non-reentrant model
  3455 ;;
  3456                           
  3457                           	psect	text17
  3458  00121E                     __ptext17:
  3459                           	opt stack 0
  3460  00121E                     _OSD_write:
  3461                           	opt stack 27
  3462                           
  3463                           ;incstack = 0
  3464                           ;OSD_write@_row stored from wreg
  3465  00121E  CFE8 F01B          	movff	wreg,OSD_write@_row
  3466                           
  3467                           ;OSD.c: 6: unsigned int pos=30*(_row-1)+(_col-1);
  3468  001222  0EFF               	movlw	255
  3469  001224  241B               	addwf	OSD_write@_row,w,c
  3470  001226  6E10               	movwf	___wmul@multiplier,c
  3471  001228  6A11               	clrf	___wmul@multiplier+1,c
  3472  00122A  0EFF               	movlw	255
  3473  00122C  2211               	addwfc	___wmul@multiplier+1,f,c
  3474  00122E  0E00               	movlw	0
  3475  001230  6E13               	movwf	___wmul@multiplicand+1,c
  3476  001232  0E1E               	movlw	30
  3477  001234  6E12               	movwf	___wmul@multiplicand,c
  3478  001236  ECE3  F00A         	call	___wmul	;wreg free
  3479  00123A  5016               	movf	OSD_write@_col,w,c
  3480  00123C  6E18               	movwf	??_OSD_write& (0+255),c
  3481  00123E  6A19               	clrf	(??_OSD_write+1)& (0+255),c
  3482  001240  5010               	movf	?___wmul,w,c
  3483  001242  2618               	addwf	??_OSD_write,f,c
  3484  001244  5011               	movf	?___wmul+1,w,c
  3485  001246  2219               	addwfc	??_OSD_write+1,f,c
  3486  001248  0EFF               	movlw	255
  3487  00124A  2418               	addwf	??_OSD_write,w,c
  3488  00124C  6E1E               	movwf	OSD_write@pos,c
  3489  00124E  0EFF               	movlw	255
  3490  001250  2019               	addwfc	??_OSD_write+1,w,c
  3491  001252  6E1F               	movwf	OSD_write@pos+1,c
  3492                           
  3493                           ;OSD.c: 7: unsigned char posl=pos;
  3494  001254  C01E  F01C         	movff	OSD_write@pos,OSD_write@posl
  3495                           
  3496                           ;OSD.c: 8: unsigned char posh=pos>>8;
  3497  001258  C01F  F018         	movff	OSD_write@pos+1,??_OSD_write
  3498  00125C  C018  F019         	movff	??_OSD_write,??_OSD_write+1
  3499  001260  6A1A               	clrf	(??_OSD_write+2)& (0+255),c
  3500  001262  5019               	movf	??_OSD_write+1,w,c
  3501  001264  6E1D               	movwf	OSD_write@posh,c
  3502                           
  3503                           ;OSD.c: 9: INTCONbits.GIE=0;
  3504  001266  9EF2               	bcf	intcon,7,c	;volatile
  3505                           
  3506                           ;OSD.c: 10: WriteSPI(0x05);
  3507  001268  0E05               	movlw	5
  3508  00126A  EC6C  F00B         	call	_WriteSPI
  3509                           
  3510                           ;OSD.c: 11: WriteSPI(posh);
  3511  00126E  501D               	movf	OSD_write@posh,w,c
  3512  001270  EC6C  F00B         	call	_WriteSPI
  3513                           
  3514                           ;OSD.c: 13: WriteSPI(0x06);
  3515  001274  0E06               	movlw	6
  3516  001276  EC6C  F00B         	call	_WriteSPI
  3517                           
  3518                           ;OSD.c: 14: WriteSPI(posl);
  3519  00127A  501C               	movf	OSD_write@posl,w,c
  3520  00127C  EC6C  F00B         	call	_WriteSPI
  3521                           
  3522                           ;OSD.c: 16: WriteSPI(0x07);
  3523  001280  0E07               	movlw	7
  3524  001282  EC6C  F00B         	call	_WriteSPI
  3525                           
  3526                           ;OSD.c: 17: WriteSPI(_font);
  3527  001286  5017               	movf	OSD_write@_font,w,c
  3528  001288  EC6C  F00B         	call	_WriteSPI
  3529                           
  3530                           ;OSD.c: 18: INTCONbits.GIE=1;
  3531  00128C  8EF2               	bsf	intcon,7,c	;volatile
  3532  00128E  0012               	return	
  3533  001290                     __end_of_OSD_write:
  3534                           	opt stack 0
  3535                           tblptru	equ	0xFF8
  3536                           tblptrh	equ	0xFF7
  3537                           tblptrl	equ	0xFF6
  3538                           tablat	equ	0xFF5
  3539                           prodh	equ	0xFF4
  3540                           prodl	equ	0xFF3
  3541                           intcon	equ	0xFF2
  3542                           intcon2	equ	0xFF1
  3543                           wreg	equ	0xFE8
  3544                           indf2	equ	0xFDF
  3545                           postinc2	equ	0xFDE
  3546                           postdec2	equ	0xFDD
  3547                           fsr2h	equ	0xFDA
  3548                           fsr2l	equ	0xFD9
  3549                           status	equ	0xFD8
  3550                           
  3551 ;; *************** function ___wmul *****************
  3552 ;; Defined at:
  3553 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.30\sources\common\wmul.c"
  3554 ;; Parameters:    Size  Location     Type
  3555 ;;  multiplier      2   15[COMRAM] unsigned int 
  3556 ;;  multiplicand    2   17[COMRAM] unsigned int 
  3557 ;; Auto vars:     Size  Location     Type
  3558 ;;  product         2   19[COMRAM] unsigned int 
  3559 ;; Return value:  Size  Location     Type
  3560 ;;                  2   15[COMRAM] unsigned int 
  3561 ;; Registers used:
  3562 ;;		wreg, status,2, status,0, prodl, prodh
  3563 ;; Tracked objects:
  3564 ;;		On entry : 0/0
  3565 ;;		On exit  : 0/0
  3566 ;;		Unchanged: 0/0
  3567 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3568 ;;      Params:         4       0       0       0       0       0       0
  3569 ;;      Locals:         2       0       0       0       0       0       0
  3570 ;;      Temps:          0       0       0       0       0       0       0
  3571 ;;      Totals:         6       0       0       0       0       0       0
  3572 ;;Total ram usage:        6 bytes
  3573 ;; Hardware stack levels used:    1
  3574 ;; Hardware stack levels required when called:    1
  3575 ;; This function calls:
  3576 ;;		Nothing
  3577 ;; This function is called by:
  3578 ;;		_OSD_write
  3579 ;;		_atoi
  3580 ;;		_OSD_write_blink
  3581 ;; This function uses a non-reentrant model
  3582 ;;
  3583                           
  3584                           	psect	text18
  3585  0015C6                     __ptext18:
  3586                           	opt stack 0
  3587  0015C6                     ___wmul:
  3588                           	opt stack 28
  3589                           
  3590                           ;incstack = 0
  3591  0015C6  5010               	movf	___wmul@multiplier,w,c
  3592  0015C8  0212               	mulwf	___wmul@multiplicand,c
  3593  0015CA  CFF3 F014          	movff	prodl,___wmul@product
  3594  0015CE  CFF4 F015          	movff	prodh,___wmul@product+1
  3595  0015D2  5010               	movf	___wmul@multiplier,w,c
  3596  0015D4  0213               	mulwf	___wmul@multiplicand+1,c
  3597  0015D6  CFF3 FFF4          	movff	prodl,prodh
  3598  0015DA  6AF3               	clrf	prodl,c
  3599  0015DC  50F3               	movf	prodl,w,c
  3600  0015DE  2614               	addwf	___wmul@product,f,c
  3601  0015E0  50F4               	movf	prodh,w,c
  3602  0015E2  2215               	addwfc	___wmul@product+1,f,c
  3603  0015E4  5011               	movf	___wmul@multiplier+1,w,c
  3604  0015E6  0212               	mulwf	___wmul@multiplicand,c
  3605  0015E8  CFF3 FFF4          	movff	prodl,prodh
  3606  0015EC  6AF3               	clrf	prodl,c
  3607  0015EE  50F3               	movf	prodl,w,c
  3608  0015F0  2614               	addwf	___wmul@product,f,c
  3609  0015F2  50F4               	movf	prodh,w,c
  3610  0015F4  2215               	addwfc	___wmul@product+1,f,c
  3611  0015F6  C014  F010         	movff	___wmul@product,?___wmul
  3612  0015FA  C015  F011         	movff	___wmul@product+1,?___wmul+1
  3613  0015FE  0012               	return	
  3614  001600                     __end_of___wmul:
  3615                           	opt stack 0
  3616                           tblptru	equ	0xFF8
  3617                           tblptrh	equ	0xFF7
  3618                           tblptrl	equ	0xFF6
  3619                           tablat	equ	0xFF5
  3620                           prodh	equ	0xFF4
  3621                           prodl	equ	0xFF3
  3622                           intcon	equ	0xFF2
  3623                           intcon2	equ	0xFF1
  3624                           wreg	equ	0xFE8
  3625                           indf2	equ	0xFDF
  3626                           postinc2	equ	0xFDE
  3627                           postdec2	equ	0xFDD
  3628                           fsr2h	equ	0xFDA
  3629                           fsr2l	equ	0xFD9
  3630                           status	equ	0xFD8
  3631                           
  3632 ;; *************** function _OpenUSART *****************
  3633 ;; Defined at:
  3634 ;;		line 73 in file "C:\Program Files (x86)\Microchip\xc8\v1.30\sources\pic18\plib\USART\uopen.c"
  3635 ;; Parameters:    Size  Location     Type
  3636 ;;  config          1    wreg     unsigned char 
  3637 ;;  spbrg           2   15[COMRAM] unsigned int 
  3638 ;; Auto vars:     Size  Location     Type
  3639 ;;  config          1   20[COMRAM] unsigned char 
  3640 ;; Return value:  Size  Location     Type
  3641 ;;		None               void
  3642 ;; Registers used:
  3643 ;;		wreg, status,2
  3644 ;; Tracked objects:
  3645 ;;		On entry : 0/0
  3646 ;;		On exit  : 0/0
  3647 ;;		Unchanged: 0/0
  3648 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3649 ;;      Params:         2       0       0       0       0       0       0
  3650 ;;      Locals:         1       0       0       0       0       0       0
  3651 ;;      Temps:          3       0       0       0       0       0       0
  3652 ;;      Totals:         6       0       0       0       0       0       0
  3653 ;;Total ram usage:        6 bytes
  3654 ;; Hardware stack levels used:    1
  3655 ;; Hardware stack levels required when called:    1
  3656 ;; This function calls:
  3657 ;;		Nothing
  3658 ;; This function is called by:
  3659 ;;		_main
  3660 ;;		_Tomcat_S_Setup
  3661 ;; This function uses a non-reentrant model
  3662 ;;
  3663                           
  3664                           	psect	text19
  3665  001290                     __ptext19:
  3666                           	opt stack 0
  3667  001290                     _OpenUSART:
  3668                           	opt stack 29
  3669                           
  3670                           ;incstack = 0
  3671                           ;OpenUSART@config stored from wreg
  3672  001290  CFE8 F015          	movff	wreg,OpenUSART@config
  3673  001294  0E00               	movlw	0
  3674  001296  6EAC               	movwf	4012,c	;volatile
  3675  001298  0E00               	movlw	0
  3676  00129A  6EAB               	movwf	4011,c	;volatile
  3677  00129C  B015               	btfsc	OpenUSART@config,0,c
  3678  00129E  88AC               	bsf	4012,4,c	;volatile
  3679  0012A0  A215               	btfss	OpenUSART@config,1,c
  3680  0012A2  D002               	goto	l1817
  3681  0012A4  8CAC               	bsf	4012,6,c	;volatile
  3682  0012A6  8CAB               	bsf	4011,6,c	;volatile
  3683  0012A8                     l1817:
  3684  0012A8  B415               	btfsc	OpenUSART@config,2,c
  3685  0012AA  8EAC               	bsf	4012,7,c	;volatile
  3686  0012AC  A615               	btfss	OpenUSART@config,3,c
  3687  0012AE  D002               	goto	l291
  3688  0012B0  88AB               	bsf	4011,4,c	;volatile
  3689  0012B2  D001               	goto	l1825
  3690  0012B4                     l291:
  3691  0012B4  8AAB               	bsf	4011,5,c	;volatile
  3692  0012B6                     l1825:
  3693  0012B6  B815               	btfsc	OpenUSART@config,4,c
  3694  0012B8  84AC               	bsf	4012,2,c	;volatile
  3695  0012BA  989E               	bcf	3998,4,c	;volatile
  3696  0012BC  BA15               	btfsc	OpenUSART@config,5,c
  3697  0012BE  86AB               	bsf	4011,3,c	;volatile
  3698  0012C0  AC15               	btfss	OpenUSART@config,6,c
  3699  0012C2  D002               	goto	l295
  3700  0012C4  8A9D               	bsf	3997,5,c	;volatile
  3701  0012C6  D001               	goto	l296
  3702  0012C8                     l295:
  3703  0012C8  9A9D               	bcf	3997,5,c	;volatile
  3704  0012CA                     l296:
  3705  0012CA  9A9E               	bcf	3998,5,c	;volatile
  3706  0012CC  AE15               	btfss	OpenUSART@config,7,c
  3707  0012CE  D002               	goto	l297
  3708  0012D0  889D               	bsf	3997,4,c	;volatile
  3709  0012D2  D001               	goto	l298
  3710  0012D4                     l297:
  3711  0012D4  989D               	bcf	3997,4,c	;volatile
  3712  0012D6                     l298:
  3713  0012D6  C010  FFAF         	movff	OpenUSART@spbrg,4015	;volatile
  3714  0012DA  C011  F012         	movff	OpenUSART@spbrg+1,??_OpenUSART
  3715  0012DE  C012  F013         	movff	??_OpenUSART,??_OpenUSART+1
  3716  0012E2  6A14               	clrf	(??_OpenUSART+2)& (0+255),c
  3717  0012E4  5013               	movf	??_OpenUSART+1,w,c
  3718  0012E6  6EB0               	movwf	4016,c	;volatile
  3719  0012E8  8AAC               	bsf	4012,5,c	;volatile
  3720  0012EA  8EAB               	bsf	4011,7,c	;volatile
  3721  0012EC  9C94               	bcf	3988,6,c	;volatile
  3722  0012EE  8E94               	bsf	3988,7,c	;volatile
  3723  0012F0  B8AC               	btfsc	4012,4,c	;volatile
  3724  0012F2  BEAC               	btfsc	4012,7,c	;volatile
  3725  0012F4  D001               	goto	l300
  3726  0012F6  8C94               	bsf	3988,6,c	;volatile
  3727  0012F8                     l300:
  3728  0012F8  0012               	return	
  3729  0012FA                     __end_of_OpenUSART:
  3730                           	opt stack 0
  3731                           tblptru	equ	0xFF8
  3732                           tblptrh	equ	0xFF7
  3733                           tblptrl	equ	0xFF6
  3734                           tablat	equ	0xFF5
  3735                           prodh	equ	0xFF4
  3736                           prodl	equ	0xFF3
  3737                           intcon	equ	0xFF2
  3738                           intcon2	equ	0xFF1
  3739                           wreg	equ	0xFE8
  3740                           indf2	equ	0xFDF
  3741                           postinc2	equ	0xFDE
  3742                           postdec2	equ	0xFDD
  3743                           fsr2h	equ	0xFDA
  3744                           fsr2l	equ	0xFD9
  3745                           status	equ	0xFD8
  3746                           
  3747 ;; *************** function _OSD_init *****************
  3748 ;; Defined at:
  3749 ;;		line 51 in file "OSD.c"
  3750 ;; Parameters:    Size  Location     Type
  3751 ;;		None
  3752 ;; Auto vars:     Size  Location     Type
  3753 ;;		None
  3754 ;; Return value:  Size  Location     Type
  3755 ;;		None               void
  3756 ;; Registers used:
  3757 ;;		wreg, status,2, status,0, cstack
  3758 ;; Tracked objects:
  3759 ;;		On entry : 0/0
  3760 ;;		On exit  : 0/0
  3761 ;;		Unchanged: 0/0
  3762 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3763 ;;      Params:         0       0       0       0       0       0       0
  3764 ;;      Locals:         0       0       0       0       0       0       0
  3765 ;;      Temps:          2       0       0       0       0       0       0
  3766 ;;      Totals:         2       0       0       0       0       0       0
  3767 ;;Total ram usage:        2 bytes
  3768 ;; Hardware stack levels used:    1
  3769 ;; Hardware stack levels required when called:    3
  3770 ;; This function calls:
  3771 ;;		_OSD_disp
  3772 ;;		_OpenSPI
  3773 ;;		_WriteSPI
  3774 ;; This function is called by:
  3775 ;;		_main
  3776 ;;		_Tomcat_S_Setup
  3777 ;; This function uses a non-reentrant model
  3778 ;;
  3779                           
  3780                           	psect	text20
  3781  000F04                     __ptext20:
  3782                           	opt stack 0
  3783  000F04                     _OSD_init:
  3784                           	opt stack 27
  3785                           
  3786                           ;OSD.c: 53: TRISCbits.RC0=0;
  3787                           
  3788                           ;incstack = 0
  3789  000F04  9094               	bcf	3988,0,c	;volatile
  3790                           
  3791                           ;OSD.c: 54: LATCbits.LATC0=0;
  3792  000F06  908B               	bcf	3979,0,c	;volatile
  3793                           
  3794                           ;OSD.c: 55: INTCONbits.GIE=0;
  3795  000F08  9EF2               	bcf	intcon,7,c	;volatile
  3796                           
  3797                           ;OSD.c: 56: OpenSPI(0b00000000,0b00000000,0b00000000);
  3798  000F0A  6E15               	movwf	??_OSD_init& (0+255),c
  3799  000F0C  0E00               	movlw	0
  3800  000F0E  6E10               	movwf	OpenSPI@bus_mode,c
  3801  000F10  5015               	movf	??_OSD_init& (0+255),w,c
  3802  000F12  6E16               	movwf	(??_OSD_init+1)& (0+255),c
  3803  000F14  0E00               	movlw	0
  3804  000F16  6E11               	movwf	OpenSPI@smp_phase,c
  3805  000F18  5016               	movf	(??_OSD_init+1)& (0+255),w,c
  3806  000F1A  0E00               	movlw	0
  3807  000F1C  ECAD  F009         	call	_OpenSPI
  3808                           
  3809                           ;OSD.c: 57: _delay(100000);
  3810  000F20  0E82               	movlw	130
  3811  000F22  6E15               	movwf	??_OSD_init& (0+255),c
  3812  000F24  0EDE               	movlw	222
  3813  000F26                     u1387:
  3814  000F26  2EE8               	decfsz	wreg,f,c
  3815  000F28  D7FE               	goto	u1387
  3816  000F2A  2E15               	decfsz	??_OSD_init& (0+255),f,c
  3817  000F2C  D7FC               	goto	u1387
  3818                           
  3819                           ;OSD.c: 58: _delay(100000);
  3820  000F2E  0E82               	movlw	130
  3821  000F30  6E15               	movwf	??_OSD_init& (0+255),c
  3822  000F32  0EDE               	movlw	222
  3823  000F34                     u1397:
  3824  000F34  2EE8               	decfsz	wreg,f,c
  3825  000F36  D7FE               	goto	u1397
  3826  000F38  2E15               	decfsz	??_OSD_init& (0+255),f,c
  3827  000F3A  D7FC               	goto	u1397
  3828                           
  3829                           ;OSD.c: 59: _delay(100000);
  3830  000F3C  0E82               	movlw	130
  3831  000F3E  6E15               	movwf	??_OSD_init& (0+255),c
  3832  000F40  0EDE               	movlw	222
  3833  000F42                     u1407:
  3834  000F42  2EE8               	decfsz	wreg,f,c
  3835  000F44  D7FE               	goto	u1407
  3836  000F46  2E15               	decfsz	??_OSD_init& (0+255),f,c
  3837  000F48  D7FC               	goto	u1407
  3838                           
  3839                           ;OSD.c: 60: LATCbits.LATC0=1;
  3840  000F4A  808B               	bsf	3979,0,c	;volatile
  3841                           
  3842                           ;OSD.c: 61: _delay(100000);
  3843  000F4C  0E82               	movlw	130
  3844  000F4E  6E15               	movwf	??_OSD_init& (0+255),c
  3845  000F50  0EDE               	movlw	222
  3846  000F52                     u1417:
  3847  000F52  2EE8               	decfsz	wreg,f,c
  3848  000F54  D7FE               	goto	u1417
  3849  000F56  2E15               	decfsz	??_OSD_init& (0+255),f,c
  3850  000F58  D7FC               	goto	u1417
  3851                           
  3852                           ;OSD.c: 62: _delay(100000);
  3853  000F5A  0E82               	movlw	130
  3854  000F5C  6E15               	movwf	??_OSD_init& (0+255),c
  3855  000F5E  0EDE               	movlw	222
  3856  000F60                     u1427:
  3857  000F60  2EE8               	decfsz	wreg,f,c
  3858  000F62  D7FE               	goto	u1427
  3859  000F64  2E15               	decfsz	??_OSD_init& (0+255),f,c
  3860  000F66  D7FC               	goto	u1427
  3861                           
  3862                           ;OSD.c: 63: _delay(100000);
  3863  000F68  0E82               	movlw	130
  3864  000F6A  6E15               	movwf	??_OSD_init& (0+255),c
  3865  000F6C  0EDE               	movlw	222
  3866  000F6E                     u1437:
  3867  000F6E  2EE8               	decfsz	wreg,f,c
  3868  000F70  D7FE               	goto	u1437
  3869  000F72  2E15               	decfsz	??_OSD_init& (0+255),f,c
  3870  000F74  D7FC               	goto	u1437
  3871                           
  3872                           ;OSD.c: 64: WriteSPI(0x00);
  3873  000F76  0E00               	movlw	0
  3874  000F78  EC6C  F00B         	call	_WriteSPI
  3875                           
  3876                           ;OSD.c: 65: WriteSPI(0b00000100);
  3877  000F7C  0E04               	movlw	4
  3878  000F7E  EC6C  F00B         	call	_WriteSPI
  3879                           
  3880                           ;OSD.c: 66: WriteSPI(0x01);
  3881  000F82  0E01               	movlw	1
  3882  000F84  EC6C  F00B         	call	_WriteSPI
  3883                           
  3884                           ;OSD.c: 67: WriteSPI(0b01001111);
  3885  000F88  0E4F               	movlw	79
  3886  000F8A  EC6C  F00B         	call	_WriteSPI
  3887                           
  3888                           ;OSD.c: 68: WriteSPI(0x02);
  3889  000F8E  0E02               	movlw	2
  3890  000F90  EC6C  F00B         	call	_WriteSPI
  3891                           
  3892                           ;OSD.c: 69: WriteSPI(0b00101011);
  3893  000F94  0E2B               	movlw	43
  3894  000F96  EC6C  F00B         	call	_WriteSPI
  3895                           
  3896                           ;OSD.c: 70: WriteSPI(0x03);
  3897  000F9A  0E03               	movlw	3
  3898  000F9C  EC6C  F00B         	call	_WriteSPI
  3899                           
  3900                           ;OSD.c: 71: WriteSPI(0b00010110);
  3901  000FA0  0E16               	movlw	22
  3902  000FA2  EC6C  F00B         	call	_WriteSPI
  3903                           
  3904                           ;OSD.c: 73: OSD_disp(0);
  3905  000FA6  0E00               	movlw	0
  3906  000FA8  ECA8  F00A         	call	_OSD_disp
  3907                           
  3908                           ;OSD.c: 74: INTCONbits.GIE=0;
  3909  000FAC  9EF2               	bcf	intcon,7,c	;volatile
  3910                           
  3911                           ;OSD.c: 75: WriteSPI(0x09);
  3912  000FAE  0E09               	movlw	9
  3913  000FB0  EC6C  F00B         	call	_WriteSPI
  3914                           
  3915                           ;OSD.c: 76: WriteSPI(0x00);
  3916  000FB4  0E00               	movlw	0
  3917  000FB6  EC6C  F00B         	call	_WriteSPI
  3918                           
  3919                           ;OSD.c: 77: WriteSPI(0x08);
  3920  000FBA  0E08               	movlw	8
  3921  000FBC  EC6C  F00B         	call	_WriteSPI
  3922                           
  3923                           ;OSD.c: 78: WriteSPI(0b01010000);
  3924  000FC0  0E50               	movlw	80
  3925  000FC2  EC6C  F00B         	call	_WriteSPI
  3926                           
  3927                           ;OSD.c: 79: WriteSPI(0x0A);
  3928  000FC6  0E0A               	movlw	10
  3929  000FC8  EC6C  F00B         	call	_WriteSPI
  3930                           
  3931                           ;OSD.c: 80: WriteSPI(0x01);
  3932  000FCC  0E01               	movlw	1
  3933  000FCE  EC6C  F00B         	call	_WriteSPI
  3934                           
  3935                           ;OSD.c: 81: WriteSPI(0x0B);
  3936  000FD2  0E0B               	movlw	11
  3937  000FD4  EC6C  F00B         	call	_WriteSPI
  3938                           
  3939                           ;OSD.c: 82: WriteSPI(0b01010101);
  3940  000FD8  0E55               	movlw	85
  3941  000FDA  EC6C  F00B         	call	_WriteSPI
  3942                           
  3943                           ;OSD.c: 83: WriteSPI(0x08);
  3944  000FDE  0E08               	movlw	8
  3945  000FE0  EC6C  F00B         	call	_WriteSPI
  3946                           
  3947                           ;OSD.c: 84: WriteSPI(0b10100000);
  3948  000FE4  0EA0               	movlw	160
  3949  000FE6  EC6C  F00B         	call	_WriteSPI
  3950                           
  3951                           ;OSD.c: 85: _delay(100000);
  3952  000FEA  0E82               	movlw	130
  3953  000FEC  6E15               	movwf	??_OSD_init& (0+255),c
  3954  000FEE  0EDE               	movlw	222
  3955  000FF0                     u1447:
  3956  000FF0  2EE8               	decfsz	wreg,f,c
  3957  000FF2  D7FE               	goto	u1447
  3958  000FF4  2E15               	decfsz	??_OSD_init& (0+255),f,c
  3959  000FF6  D7FC               	goto	u1447
  3960                           
  3961                           ;OSD.c: 86: _delay(100000);
  3962  000FF8  0E82               	movlw	130
  3963  000FFA  6E15               	movwf	??_OSD_init& (0+255),c
  3964  000FFC  0EDE               	movlw	222
  3965  000FFE                     u1457:
  3966  000FFE  2EE8               	decfsz	wreg,f,c
  3967  001000  D7FE               	goto	u1457
  3968  001002  2E15               	decfsz	??_OSD_init& (0+255),f,c
  3969  001004  D7FC               	goto	u1457
  3970                           
  3971                           ;OSD.c: 87: INTCONbits.GIE=1;
  3972  001006  8EF2               	bsf	intcon,7,c	;volatile
  3973  001008  0012               	return	
  3974  00100A                     __end_of_OSD_init:
  3975                           	opt stack 0
  3976                           tblptru	equ	0xFF8
  3977                           tblptrh	equ	0xFF7
  3978                           tblptrl	equ	0xFF6
  3979                           tablat	equ	0xFF5
  3980                           prodh	equ	0xFF4
  3981                           prodl	equ	0xFF3
  3982                           intcon	equ	0xFF2
  3983                           intcon2	equ	0xFF1
  3984                           wreg	equ	0xFE8
  3985                           indf2	equ	0xFDF
  3986                           postinc2	equ	0xFDE
  3987                           postdec2	equ	0xFDD
  3988                           fsr2h	equ	0xFDA
  3989                           fsr2l	equ	0xFD9
  3990                           status	equ	0xFD8
  3991                           
  3992 ;; *************** function _OpenSPI *****************
  3993 ;; Defined at:
  3994 ;;		line 14 in file "C:\Program Files (x86)\Microchip\xc8\v1.30\sources\pic18\plib\SPI\spi_open.c"
  3995 ;; Parameters:    Size  Location     Type
  3996 ;;  sync_mode       1    wreg     unsigned char 
  3997 ;;  bus_mode        1   15[COMRAM] unsigned char 
  3998 ;;  smp_phase       1   16[COMRAM] unsigned char 
  3999 ;; Auto vars:     Size  Location     Type
  4000 ;;  sync_mode       1   17[COMRAM] unsigned char 
  4001 ;; Return value:  Size  Location     Type
  4002 ;;		None               void
  4003 ;; Registers used:
  4004 ;;		wreg, status,2, status,0
  4005 ;; Tracked objects:
  4006 ;;		On entry : 0/0
  4007 ;;		On exit  : 0/0
  4008 ;;		Unchanged: 0/0
  4009 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4010 ;;      Params:         2       0       0       0       0       0       0
  4011 ;;      Locals:         1       0       0       0       0       0       0
  4012 ;;      Temps:          0       0       0       0       0       0       0
  4013 ;;      Totals:         3       0       0       0       0       0       0
  4014 ;;Total ram usage:        3 bytes
  4015 ;; Hardware stack levels used:    1
  4016 ;; Hardware stack levels required when called:    1
  4017 ;; This function calls:
  4018 ;;		Nothing
  4019 ;; This function is called by:
  4020 ;;		_OSD_init
  4021 ;; This function uses a non-reentrant model
  4022 ;;
  4023                           
  4024                           	psect	text21
  4025  00135A                     __ptext21:
  4026                           	opt stack 0
  4027  00135A                     _OpenSPI:
  4028                           	opt stack 28
  4029                           
  4030                           ;incstack = 0
  4031                           ;OpenSPI@sync_mode stored from wreg
  4032  00135A  CFE8 F012          	movff	wreg,OpenSPI@sync_mode
  4033  00135E  0E3F               	movlw	63
  4034  001360  16C7               	andwf	4039,f,c	;volatile
  4035  001362  0E00               	movlw	0
  4036  001364  6EC6               	movwf	4038,c	;volatile
  4037  001366  5012               	movf	OpenSPI@sync_mode,w,c
  4038  001368  12C6               	iorwf	4038,f,c	;volatile
  4039  00136A  5011               	movf	OpenSPI@smp_phase,w,c
  4040  00136C  12C7               	iorwf	4039,f,c	;volatile
  4041  00136E  D005               	goto	l2145
  4042  001370                     l231:
  4043  001370  8CC7               	bsf	4039,6,c	;volatile
  4044  001372  D015               	goto	l2149
  4045  001374                     l233:
  4046  001374  8CC7               	bsf	4039,6,c	;volatile
  4047  001376                     l234:
  4048  001376  88C6               	bsf	4038,4,c	;volatile
  4049  001378  D012               	goto	l2149
  4050  00137A                     l2145:
  4051  00137A  5010               	movf	OpenSPI@bus_mode,w,c
  4052                           
  4053                           ; Switch size 1, requested type "space"
  4054                           ; Number of cases is 3, Range of values is 0 to 3
  4055                           ; switch strategies available:
  4056                           ; Name         Instructions Cycles
  4057                           ; simple_byte           10     6 (average)
  4058                           ;	Chosen strategy is simple_byte
  4059  00137C  0A00               	xorlw	0	; case 0
  4060  00137E  B4D8               	btfsc	status,2,c
  4061  001380  D7F7               	goto	l231
  4062  001382  0A02               	xorlw	2	; case 2
  4063  001384  B4D8               	btfsc	status,2,c
  4064  001386  D7F6               	goto	l233
  4065  001388  0A01               	xorlw	1	; case 3
  4066  00138A  B4D8               	btfsc	status,2,c
  4067  00138C  D7F4               	goto	l234
  4068  00138E  D007               	goto	l2149
  4069  001390                     l237:
  4070  001390  8694               	bsf	3988,3,c	;volatile
  4071  001392  8A92               	bsf	3986,5,c	;volatile
  4072  001394  D00C               	goto	l238
  4073  001396                     l239:
  4074  001396  8694               	bsf	3988,3,c	;volatile
  4075  001398  D00A               	goto	l238
  4076  00139A                     l240:
  4077  00139A  9694               	bcf	3988,3,c	;volatile
  4078  00139C  D008               	goto	l238
  4079  00139E                     l2149:
  4080  00139E  5012               	movf	OpenSPI@sync_mode,w,c
  4081                           
  4082                           ; Switch size 1, requested type "space"
  4083                           ; Number of cases is 2, Range of values is 4 to 5
  4084                           ; switch strategies available:
  4085                           ; Name         Instructions Cycles
  4086                           ; simple_byte            7     4 (average)
  4087                           ;	Chosen strategy is simple_byte
  4088  0013A0  0A04               	xorlw	4	; case 4
  4089  0013A2  B4D8               	btfsc	status,2,c
  4090  0013A4  D7F5               	goto	l237
  4091  0013A6  0A01               	xorlw	1	; case 5
  4092  0013A8  B4D8               	btfsc	status,2,c
  4093  0013AA  D7F5               	goto	l239
  4094  0013AC  D7F6               	goto	l240
  4095  0013AE                     l238:
  4096  0013AE  8894               	bsf	3988,4,c	;volatile
  4097  0013B0  9A94               	bcf	3988,5,c	;volatile
  4098  0013B2  8AC6               	bsf	4038,5,c	;volatile
  4099  0013B4  0012               	return	
  4100  0013B6                     __end_of_OpenSPI:
  4101                           	opt stack 0
  4102                           tblptru	equ	0xFF8
  4103                           tblptrh	equ	0xFF7
  4104                           tblptrl	equ	0xFF6
  4105                           tablat	equ	0xFF5
  4106                           prodh	equ	0xFF4
  4107                           prodl	equ	0xFF3
  4108                           intcon	equ	0xFF2
  4109                           intcon2	equ	0xFF1
  4110                           wreg	equ	0xFE8
  4111                           indf2	equ	0xFDF
  4112                           postinc2	equ	0xFDE
  4113                           postdec2	equ	0xFDD
  4114                           fsr2h	equ	0xFDA
  4115                           fsr2l	equ	0xFD9
  4116                           status	equ	0xFD8
  4117                           
  4118 ;; *************** function _OSD_disp *****************
  4119 ;; Defined at:
  4120 ;;		line 89 in file "OSD.c"
  4121 ;; Parameters:    Size  Location     Type
  4122 ;;  _on             1    wreg     unsigned char 
  4123 ;; Auto vars:     Size  Location     Type
  4124 ;;  _on             1   18[COMRAM] unsigned char 
  4125 ;;  vm0             1   19[COMRAM] unsigned char 
  4126 ;; Return value:  Size  Location     Type
  4127 ;;		None               void
  4128 ;; Registers used:
  4129 ;;		wreg, status,2, status,0, cstack
  4130 ;; Tracked objects:
  4131 ;;		On entry : 0/0
  4132 ;;		On exit  : 0/0
  4133 ;;		Unchanged: 0/0
  4134 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4135 ;;      Params:         0       0       0       0       0       0       0
  4136 ;;      Locals:         2       0       0       0       0       0       0
  4137 ;;      Temps:          1       0       0       0       0       0       0
  4138 ;;      Totals:         3       0       0       0       0       0       0
  4139 ;;Total ram usage:        3 bytes
  4140 ;; Hardware stack levels used:    1
  4141 ;; Hardware stack levels required when called:    2
  4142 ;; This function calls:
  4143 ;;		_ReadSPI
  4144 ;;		_WriteSPI
  4145 ;; This function is called by:
  4146 ;;		_OSD_init
  4147 ;;		_Tomcat_S_Setup
  4148 ;; This function uses a non-reentrant model
  4149 ;;
  4150                           
  4151                           	psect	text22
  4152  001550                     __ptext22:
  4153                           	opt stack 0
  4154  001550                     _OSD_disp:
  4155                           	opt stack 27
  4156                           
  4157                           ;incstack = 0
  4158                           ;OSD_disp@_on stored from wreg
  4159  001550  CFE8 F013          	movff	wreg,OSD_disp@_on
  4160                           
  4161                           ;OSD.c: 91: char vm0=0;
  4162  001554  6E12               	movwf	??_OSD_disp& (0+255),c
  4163  001556  0E00               	movlw	0
  4164  001558  6E14               	movwf	OSD_disp@vm0,c
  4165  00155A  5012               	movf	??_OSD_disp& (0+255),w,c
  4166                           
  4167                           ;OSD.c: 92: INTCONbits.GIE=0;
  4168  00155C  9EF2               	bcf	intcon,7,c	;volatile
  4169                           
  4170                           ;OSD.c: 93: WriteSPI(0x80);
  4171  00155E  0E80               	movlw	128
  4172  001560  EC6C  F00B         	call	_WriteSPI
  4173                           
  4174                           ;OSD.c: 94: vm0=ReadSPI();
  4175  001564  EC8F  F00B         	call	_ReadSPI	;wreg free
  4176  001568  6E14               	movwf	OSD_disp@vm0,c
  4177                           
  4178                           ;OSD.c: 95: if(_on){
  4179  00156A  5013               	movf	OSD_disp@_on,w,c
  4180  00156C  B4D8               	btfsc	status,2,c
  4181  00156E  D003               	goto	l2163
  4182                           
  4183                           ;OSD.c: 97: vm0=vm0|8;
  4184  001570  5014               	movf	OSD_disp@vm0,w,c
  4185  001572  0908               	iorlw	8
  4186  001574  D002               	goto	L8
  4187  001576                     l2163:
  4188                           
  4189                           ;OSD.c: 99: else
  4190                           ;OSD.c: 100: {
  4191                           ;OSD.c: 101: vm0=vm0&~8;
  4192  001576  5014               	movf	OSD_disp@vm0,w,c
  4193  001578  0BF7               	andlw	247
  4194  00157A                     L8:
  4195  00157A  6E14               	movwf	OSD_disp@vm0,c
  4196                           
  4197                           ;OSD.c: 102: }
  4198                           ;OSD.c: 103: WriteSPI(0x00);
  4199  00157C  0E00               	movlw	0
  4200  00157E  EC6C  F00B         	call	_WriteSPI
  4201                           
  4202                           ;OSD.c: 104: WriteSPI(8);
  4203  001582  0E08               	movlw	8
  4204  001584  EC6C  F00B         	call	_WriteSPI
  4205                           
  4206                           ;OSD.c: 105: INTCONbits.GIE=1;
  4207  001588  8EF2               	bsf	intcon,7,c	;volatile
  4208  00158A  0012               	return	
  4209  00158C                     __end_of_OSD_disp:
  4210                           	opt stack 0
  4211                           tblptru	equ	0xFF8
  4212                           tblptrh	equ	0xFF7
  4213                           tblptrl	equ	0xFF6
  4214                           tablat	equ	0xFF5
  4215                           prodh	equ	0xFF4
  4216                           prodl	equ	0xFF3
  4217                           intcon	equ	0xFF2
  4218                           intcon2	equ	0xFF1
  4219                           wreg	equ	0xFE8
  4220                           indf2	equ	0xFDF
  4221                           postinc2	equ	0xFDE
  4222                           postdec2	equ	0xFDD
  4223                           fsr2h	equ	0xFDA
  4224                           fsr2l	equ	0xFD9
  4225                           status	equ	0xFD8
  4226                           
  4227 ;; *************** function _WriteSPI *****************
  4228 ;; Defined at:
  4229 ;;		line 13 in file "C:\Program Files (x86)\Microchip\xc8\v1.30\sources\pic18\plib\SPI\spi_writ.c"
  4230 ;; Parameters:    Size  Location     Type
  4231 ;;  data_out        1    wreg     unsigned char 
  4232 ;; Auto vars:     Size  Location     Type
  4233 ;;  data_out        1   16[COMRAM] unsigned char 
  4234 ;;  TempVar         1   15[COMRAM] unsigned char 
  4235 ;; Return value:  Size  Location     Type
  4236 ;;                  1    wreg      char 
  4237 ;; Registers used:
  4238 ;;		wreg
  4239 ;; Tracked objects:
  4240 ;;		On entry : 0/0
  4241 ;;		On exit  : 0/0
  4242 ;;		Unchanged: 0/0
  4243 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4244 ;;      Params:         0       0       0       0       0       0       0
  4245 ;;      Locals:         2       0       0       0       0       0       0
  4246 ;;      Temps:          0       0       0       0       0       0       0
  4247 ;;      Totals:         2       0       0       0       0       0       0
  4248 ;;Total ram usage:        2 bytes
  4249 ;; Hardware stack levels used:    1
  4250 ;; Hardware stack levels required when called:    1
  4251 ;; This function calls:
  4252 ;;		Nothing
  4253 ;; This function is called by:
  4254 ;;		_OSD_write
  4255 ;;		_OSD_init
  4256 ;;		_OSD_disp
  4257 ;;		_OSD_write_blink
  4258 ;;		_OSD_clear
  4259 ;; This function uses a non-reentrant model
  4260 ;;
  4261                           
  4262                           	psect	text23
  4263  0016D8                     __ptext23:
  4264                           	opt stack 0
  4265  0016D8                     _WriteSPI:
  4266                           	opt stack 27
  4267                           
  4268                           ;incstack = 0
  4269                           ;WriteSPI@data_out stored from wreg
  4270  0016D8  CFE8 F011          	movff	wreg,WriteSPI@data_out
  4271  0016DC  CFC9 F010          	movff	4041,WriteSPI@TempVar	;volatile
  4272  0016E0  969E               	bcf	3998,3,c	;volatile
  4273  0016E2  9EC6               	bcf	4038,7,c	;volatile
  4274  0016E4  C011  FFC9         	movff	WriteSPI@data_out,4041	;volatile
  4275  0016E8  BEC6               	btfsc	4038,7,c	;volatile
  4276  0016EA  D002               	goto	l263
  4277  0016EC                     l265:
  4278  0016EC  A69E               	btfss	3998,3,c	;volatile
  4279  0016EE  D7FE               	goto	l265
  4280  0016F0                     l263:
  4281  0016F0  0012               	return	
  4282  0016F2                     __end_of_WriteSPI:
  4283                           	opt stack 0
  4284                           tblptru	equ	0xFF8
  4285                           tblptrh	equ	0xFF7
  4286                           tblptrl	equ	0xFF6
  4287                           tablat	equ	0xFF5
  4288                           prodh	equ	0xFF4
  4289                           prodl	equ	0xFF3
  4290                           intcon	equ	0xFF2
  4291                           intcon2	equ	0xFF1
  4292                           wreg	equ	0xFE8
  4293                           indf2	equ	0xFDF
  4294                           postinc2	equ	0xFDE
  4295                           postdec2	equ	0xFDD
  4296                           fsr2h	equ	0xFDA
  4297                           fsr2l	equ	0xFD9
  4298                           status	equ	0xFD8
  4299                           
  4300 ;; *************** function _ReadSPI *****************
  4301 ;; Defined at:
  4302 ;;		line 12 in file "C:\Program Files (x86)\Microchip\xc8\v1.30\sources\pic18\plib\SPI\spi_read.c"
  4303 ;; Parameters:    Size  Location     Type
  4304 ;;		None
  4305 ;; Auto vars:     Size  Location     Type
  4306 ;;  TempVar         1   15[COMRAM] unsigned char 
  4307 ;; Return value:  Size  Location     Type
  4308 ;;                  1    wreg      unsigned char 
  4309 ;; Registers used:
  4310 ;;		wreg, status,2
  4311 ;; Tracked objects:
  4312 ;;		On entry : 0/0
  4313 ;;		On exit  : 0/0
  4314 ;;		Unchanged: 0/0
  4315 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4316 ;;      Params:         0       0       0       0       0       0       0
  4317 ;;      Locals:         1       0       0       0       0       0       0
  4318 ;;      Temps:          0       0       0       0       0       0       0
  4319 ;;      Totals:         1       0       0       0       0       0       0
  4320 ;;Total ram usage:        1 bytes
  4321 ;; Hardware stack levels used:    1
  4322 ;; Hardware stack levels required when called:    1
  4323 ;; This function calls:
  4324 ;;		Nothing
  4325 ;; This function is called by:
  4326 ;;		_OSD_disp
  4327 ;;		_OSD_write_blink
  4328 ;;		_OSD_clear
  4329 ;; This function uses a non-reentrant model
  4330 ;;
  4331                           
  4332                           	psect	text24
  4333  00171E                     __ptext24:
  4334                           	opt stack 0
  4335  00171E                     _ReadSPI:
  4336                           	opt stack 27
  4337                           
  4338                           ;incstack = 0
  4339  00171E  CFC9 F010          	movff	4041,ReadSPI@TempVar	;volatile
  4340  001722  969E               	bcf	3998,3,c	;volatile
  4341  001724  0E00               	movlw	0
  4342  001726  6EC9               	movwf	4041,c	;volatile
  4343  001728                     l248:
  4344  001728  A69E               	btfss	3998,3,c	;volatile
  4345  00172A  D7FE               	goto	l248
  4346  00172C  50C9               	movf	4041,w,c	;volatile
  4347  00172E  0012               	return	
  4348  001730                     __end_of_ReadSPI:
  4349                           	opt stack 0
  4350                           tblptru	equ	0xFF8
  4351                           tblptrh	equ	0xFF7
  4352                           tblptrl	equ	0xFF6
  4353                           tablat	equ	0xFF5
  4354                           prodh	equ	0xFF4
  4355                           prodl	equ	0xFF3
  4356                           intcon	equ	0xFF2
  4357                           intcon2	equ	0xFF1
  4358                           wreg	equ	0xFE8
  4359                           indf2	equ	0xFDF
  4360                           postinc2	equ	0xFDE
  4361                           postdec2	equ	0xFDD
  4362                           fsr2h	equ	0xFDA
  4363                           fsr2l	equ	0xFD9
  4364                           status	equ	0xFD8
  4365                           
  4366 ;; *************** function _isr *****************
  4367 ;; Defined at:
  4368 ;;		line 28 in file "Tomcat_S_main.c"
  4369 ;; Parameters:    Size  Location     Type
  4370 ;;		None
  4371 ;; Auto vars:     Size  Location     Type
  4372 ;;		None
  4373 ;; Return value:  Size  Location     Type
  4374 ;;		None               void
  4375 ;; Registers used:
  4376 ;;		wreg, status,2, status,0
  4377 ;; Tracked objects:
  4378 ;;		On entry : 0/0
  4379 ;;		On exit  : 0/0
  4380 ;;		Unchanged: 0/0
  4381 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4382 ;;      Params:         0       0       0       0       0       0       0
  4383 ;;      Locals:         0       0       0       0       0       0       0
  4384 ;;      Temps:         15       0       0       0       0       0       0
  4385 ;;      Totals:        15       0       0       0       0       0       0
  4386 ;;Total ram usage:       15 bytes
  4387 ;; Hardware stack levels used:    1
  4388 ;; This function calls:
  4389 ;;		Nothing
  4390 ;; This function is called by:
  4391 ;;		Interrupt level 2
  4392 ;; This function uses a non-reentrant model
  4393 ;;
  4394                           
  4395                           	psect	intcode
  4396  000008                     __pintcode:
  4397                           	opt stack 0
  4398  000008                     _isr:
  4399                           	opt stack 27
  4400                           
  4401                           ;incstack = 0
  4402  000008  CFFA F002          	movff	pclath,??_isr+1
  4403  00000C  CFFB F003          	movff	pclatu,??_isr+2
  4404  000010  EDC8  F008         	call	int_func,f	;refresh shadow registers
  4405                           pclatu	equ	0xFFB
  4406                           pclath	equ	0xFFA
  4407                           tblptru	equ	0xFF8
  4408                           tblptrh	equ	0xFF7
  4409                           tblptrl	equ	0xFF6
  4410                           tablat	equ	0xFF5
  4411                           prodh	equ	0xFF4
  4412                           prodl	equ	0xFF3
  4413                           intcon	equ	0xFF2
  4414                           intcon2	equ	0xFF1
  4415                           wreg	equ	0xFE8
  4416                           indf2	equ	0xFDF
  4417                           postinc2	equ	0xFDE
  4418                           postdec2	equ	0xFDD
  4419                           fsr2h	equ	0xFDA
  4420                           fsr2l	equ	0xFD9
  4421                           status	equ	0xFD8
  4422                           
  4423                           	psect	intcode_body
  4424  001190                     __pintcode_body:
  4425                           	opt stack 27
  4426  001190                     int_func:
  4427                           	opt stack 27
  4428  001190  0006               	pop		; remove dummy address from shadow register refresh
  4429  001192  CFE9 F004          	movff	fsr0l,??_isr+3
  4430  001196  CFEA F005          	movff	fsr0h,??_isr+4
  4431  00119A  CFE1 F006          	movff	fsr1l,??_isr+5
  4432  00119E  CFE2 F007          	movff	fsr1h,??_isr+6
  4433  0011A2  CFD9 F008          	movff	fsr2l,??_isr+7
  4434  0011A6  CFDA F009          	movff	fsr2h,??_isr+8
  4435  0011AA  CFF3 F00A          	movff	prodl,??_isr+9
  4436  0011AE  CFF4 F00B          	movff	prodh,??_isr+10
  4437  0011B2  CFF6 F00C          	movff	tblptrl,??_isr+11
  4438  0011B6  CFF7 F00D          	movff	tblptrh,??_isr+12
  4439  0011BA  CFF8 F00E          	movff	tblptru,??_isr+13
  4440  0011BE  CFF5 F00F          	movff	tablat,??_isr+14
  4441                           
  4442                           ;Tomcat_S_main.c: 29: INTCONbits.GIE = 0;
  4443  0011C2  9EF2               	bcf	intcon,7,c	;volatile
  4444                           
  4445                           ;Tomcat_S_main.c: 31: if (PIR1bits.RCIF) {
  4446  0011C4  AA9E               	btfss	3998,5,c	;volatile
  4447  0011C6  D00D               	goto	i2l1667
  4448                           
  4449                           ;Tomcat_S_main.c: 32: recv_buff = RCREG;
  4450  0011C8  CFAE F1A4          	movff	4014,_recv_buff	;volatile
  4451                           
  4452                           ;Tomcat_S_main.c: 33: if (recv_buff == 0xff)recv_flag = 1;
  4453  0011CC  0101               	movlb	1	; () banked
  4454  0011CE  0101               	movlb	1	; () banked
  4455  0011D0  29A4               	incf	_recv_buff& (0+255),w,b
  4456  0011D2  A4D8               	btfss	status,2,c
  4457  0011D4  D006               	goto	i2l1667
  4458                           
  4459                           ; BSR set to: 1
  4460  0011D6  6E01               	movwf	??_isr& (0+255),c
  4461  0011D8  0E01               	movlw	1
  4462  0011DA  0101               	movlb	1	; () banked
  4463  0011DC  0101               	movlb	1	; () banked
  4464  0011DE  6FA5               	movwf	_recv_flag& (0+255),b
  4465  0011E0  5001               	movf	??_isr& (0+255),w,c
  4466  0011E2                     i2l1667:
  4467                           
  4468                           ;Tomcat_S_main.c: 34: }
  4469                           ;Tomcat_S_main.c: 36: INTCONbits.GIE = 1;
  4470  0011E2  8EF2               	bsf	intcon,7,c	;volatile
  4471  0011E4  C00F  FFF5         	movff	??_isr+14,tablat
  4472  0011E8  C00E  FFF8         	movff	??_isr+13,tblptru
  4473  0011EC  C00D  FFF7         	movff	??_isr+12,tblptrh
  4474  0011F0  C00C  FFF6         	movff	??_isr+11,tblptrl
  4475  0011F4  C00B  FFF4         	movff	??_isr+10,prodh
  4476  0011F8  C00A  FFF3         	movff	??_isr+9,prodl
  4477  0011FC  C009  FFDA         	movff	??_isr+8,fsr2h
  4478  001200  C008  FFD9         	movff	??_isr+7,fsr2l
  4479  001204  C007  FFE2         	movff	??_isr+6,fsr1h
  4480  001208  C006  FFE1         	movff	??_isr+5,fsr1l
  4481  00120C  C005  FFEA         	movff	??_isr+4,fsr0h
  4482  001210  C004  FFE9         	movff	??_isr+3,fsr0l
  4483  001214  C003  FFFB         	movff	??_isr+2,pclatu
  4484  001218  C002  FFFA         	movff	??_isr+1,pclath
  4485  00121C  0011               	retfie		f
  4486  00121E                     __end_of_isr:
  4487                           	opt stack 0
  4488                           pclatu	equ	0xFFB
  4489                           pclath	equ	0xFFA
  4490                           tblptru	equ	0xFF8
  4491                           tblptrh	equ	0xFF7
  4492                           tblptrl	equ	0xFF6
  4493                           tablat	equ	0xFF5
  4494                           prodh	equ	0xFF4
  4495                           prodl	equ	0xFF3
  4496                           intcon	equ	0xFF2
  4497                           intcon2	equ	0xFF1
  4498                           fsr0h	equ	0xFEA
  4499                           fsr0l	equ	0xFE9
  4500                           wreg	equ	0xFE8
  4501                           fsr1h	equ	0xFE2
  4502                           fsr1l	equ	0xFE1
  4503                           indf2	equ	0xFDF
  4504                           postinc2	equ	0xFDE
  4505                           postdec2	equ	0xFDD
  4506                           fsr2h	equ	0xFDA
  4507                           fsr2l	equ	0xFD9
  4508                           status	equ	0xFD8
  4509                           pclatu	equ	0xFFB
  4510                           pclath	equ	0xFFA
  4511                           tblptru	equ	0xFF8
  4512                           tblptrh	equ	0xFF7
  4513                           tblptrl	equ	0xFF6
  4514                           tablat	equ	0xFF5
  4515                           prodh	equ	0xFF4
  4516                           prodl	equ	0xFF3
  4517                           intcon	equ	0xFF2
  4518                           intcon2	equ	0xFF1
  4519                           fsr0h	equ	0xFEA
  4520                           fsr0l	equ	0xFE9
  4521                           wreg	equ	0xFE8
  4522                           fsr1h	equ	0xFE2
  4523                           fsr1l	equ	0xFE1
  4524                           indf2	equ	0xFDF
  4525                           postinc2	equ	0xFDE
  4526                           postdec2	equ	0xFDD
  4527                           fsr2h	equ	0xFDA
  4528                           fsr2l	equ	0xFD9
  4529                           status	equ	0xFD8
  4530                           
  4531                           	psect	rparam
  4532  0000                     pclatu	equ	0xFFB
  4533                           pclath	equ	0xFFA
  4534                           tblptru	equ	0xFF8
  4535                           tblptrh	equ	0xFF7
  4536                           tblptrl	equ	0xFF6
  4537                           tablat	equ	0xFF5
  4538                           prodh	equ	0xFF4
  4539                           prodl	equ	0xFF3
  4540                           intcon	equ	0xFF2
  4541                           intcon2	equ	0xFF1
  4542                           fsr0h	equ	0xFEA
  4543                           fsr0l	equ	0xFE9
  4544                           wreg	equ	0xFE8
  4545                           fsr1h	equ	0xFE2
  4546                           fsr1l	equ	0xFE1
  4547                           indf2	equ	0xFDF
  4548                           postinc2	equ	0xFDE
  4549                           postdec2	equ	0xFDD
  4550                           fsr2h	equ	0xFDA
  4551                           fsr2l	equ	0xFD9
  4552                           status	equ	0xFD8


Data Sizes:
    Strings     88
    Constant    138
    Data        0
    BSS         6
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          127     69      73
    BANK0           128      0       0
    BANK1           256    164     166
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0

Pointer List with Targets:

    strchr@ptr	PTR const unsigned char  size(3) Largest target is 32767
		 -> ROM(CODE[32767]), 

    strspn@s2	PTR const unsigned char  size(3) Largest target is 32767
		 -> ROM(CODE[32767]), 

    strspn@s1	PTR const unsigned char  size(2) Largest target is 1535
		 -> NULL(NULL[0]), RAM(DATA[1535]), 

    sp__strchr	PTR unsigned char  size(3) Largest target is 32767
		 -> NULL(NULL[0]), ROM(CODE[32767]), 

    strcspn@s2	PTR const unsigned char  size(3) Largest target is 32767
		 -> ROM(CODE[32767]), 

    strcspn@s1	PTR const unsigned char  size(2) Largest target is 1535
		 -> NULL(NULL[0]), RAM(DATA[1535]), 

    strtok@s2	PTR const unsigned char  size(3) Largest target is 32767
		 -> ROM(CODE[32767]), 

    strtok@sp	PTR unsigned char  size(2) Largest target is 1535
		 -> NULL(NULL[0]), RAM(DATA[1535]), 

    strtok@s1	PTR unsigned char  size(2) Largest target is 1535
		 -> NULL(NULL[0]), RAM(DATA[1535]), 

    strlen@s	PTR const unsigned char  size(2) Largest target is 30
		 -> main@osd_buff_870(BANK1[30]), main@osd_buff(BANK1[30]), 

    strlen@cp	PTR const unsigned char  size(2) Largest target is 30
		 -> main@osd_buff_870(BANK1[30]), main@osd_buff(BANK1[30]), 

    atoi@s	PTR const unsigned char  size(2) Largest target is 1535
		 -> NULL(NULL[0]), RAM(DATA[1535]), 

    putsUSART@data	PTR unsigned char  size(2) Largest target is 60
		 -> main@buff(BANK1[60]), 

    sprintf@f	PTR const unsigned char  size(2) Largest target is 32
		 -> STR_9(CODE[2]), STR_8(CODE[2]), STR_7(CODE[6]), STR_6(CODE[5]), 
		 -> STR_5(CODE[9]), STR_4(CODE[11]), STR_3(CODE[10]), STR_2(CODE[13]), 
		 -> STR_1(CODE[32]), 

    sprintf@sp	PTR unsigned char  size(2) Largest target is 60
		 -> main@osd_buff_870(BANK1[30]), main@osd_buff(BANK1[30]), main@buff(BANK1[60]), 

    sprintf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_sprintf(COMRAM[2]), 

    S1184$_cp	PTR const unsigned char  size(2) Largest target is 0

    _val._str._cp	PTR const unsigned char  size(2) Largest target is 0

    Str_output@word	PTR unsigned char  size(2) Largest target is 30
		 -> main@osd_buff_870(BANK1[30]), main@osd_buff(BANK1[30]), 

    sp__strtok	PTR unsigned char  size(2) Largest target is 1535
		 -> NULL(NULL[0]), RAM(DATA[1535]), 

    main@token	PTR unsigned char  size(2) Largest target is 1535
		 -> NULL(NULL[0]), RAM(DATA[1535]), 


Critical Paths under _main in COMRAM

    _main->_sprintf
    _strtok->_strcspn
    _strtok->_strspn
    _strspn->_strchr
    _strcspn->_strchr
    _sprintf->___lwmod
    ___lwmod->___lwdiv
    _putsUSART->_WriteUSART
    _atoi->___wmul
    _Str_output->_OSD_write
    _OSD_write->___wmul
    _OSD_init->_OSD_disp
    _OSD_disp->_WriteSPI

Critical Paths under _isr in COMRAM

    None.

Critical Paths under _main in BANK0

    None.

Critical Paths under _isr in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _isr in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _isr in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _isr in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _isr in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _isr in BANK5

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                               168   168      0   12493
                                             65 COMRAM     4     4      0
                                              0 BANK1    164   164      0
                           _OSD_init
                          _OSD_write
                          _OpenUSART
                         _Str_output
                               _atoi
                           _get_claw
                          _get_wrist
                          _putsUSART
                            _read_an
                            _sprintf
                             _strlen
                             _strtok
 ---------------------------------------------------------------------------------
 (1) _strtok                                               5     0      5    2222
                                             31 COMRAM     5     0      5
                            _strcspn
                             _strspn
 ---------------------------------------------------------------------------------
 (2) _strspn                                               8     3      5     563
                                             23 COMRAM     8     3      5
                             _strchr
 ---------------------------------------------------------------------------------
 (2) _strcspn                                              8     3      5     563
                                             23 COMRAM     8     3      5
                             _strchr
 ---------------------------------------------------------------------------------
 (3) _strchr                                               8     3      5     344
                                             15 COMRAM     8     3      5
 ---------------------------------------------------------------------------------
 (1) _strlen                                               6     4      2     474
                                             15 COMRAM     6     4      2
 ---------------------------------------------------------------------------------
 (1) _sprintf                                             36    12     24    2206
                                             29 COMRAM    36    12     24
                            ___lwdiv
                            ___lwmod
 ---------------------------------------------------------------------------------
 (2) ___lwmod                                              6     2      4     287
                                             23 COMRAM     6     2      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (2) ___lwdiv                                              8     4      4     290
                                             15 COMRAM     8     4      4
 ---------------------------------------------------------------------------------
 (1) _read_an                                              3     3      0      46
                                             15 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (1) _putsUSART                                            2     0      2     130
                                             16 COMRAM     2     0      2
                         _WriteUSART
 ---------------------------------------------------------------------------------
 (2) _WriteUSART                                           1     1      0      22
                                             15 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _get_wrist                                            4     2      2      25
                                             15 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (1) _get_claw                                             4     2      2      25
                                             15 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (1) _atoi                                                 7     5      2    1287
                                             21 COMRAM     7     5      2
                             ___wmul
                            _isdigit
 ---------------------------------------------------------------------------------
 (2) _isdigit                                              3     3      0      68
                                             15 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (1) _Str_output                                           9     2      7    2778
                                             31 COMRAM     9     2      7
                          _OSD_write
                             _strlen (ARG)
 ---------------------------------------------------------------------------------
 (2) _OSD_write                                           10     8      2    1107
                                             21 COMRAM    10     8      2
                           _WriteSPI
                             ___wmul
 ---------------------------------------------------------------------------------
 (2) ___wmul                                               6     2      4     543
                                             15 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (1) _OpenUSART                                            6     4      2     348
                                             15 COMRAM     6     4      2
 ---------------------------------------------------------------------------------
 (1) _OSD_init                                             2     2      0     333
                                             20 COMRAM     2     2      0
                           _OSD_disp
                            _OpenSPI
                           _WriteSPI
 ---------------------------------------------------------------------------------
 (2) _OpenSPI                                              3     1      2     216
                                             15 COMRAM     3     1      2
 ---------------------------------------------------------------------------------
 (2) _OSD_disp                                             3     3      0      94
                                             17 COMRAM     3     3      0
                            _ReadSPI
                           _WriteSPI
 ---------------------------------------------------------------------------------
 (3) _WriteSPI                                             2     2      0      23
                                             15 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (3) _ReadSPI                                              1     1      0       1
                                             15 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (4) _isr                                                 15    15      0       0
                                              0 COMRAM    15    15      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _OSD_init
     _OSD_disp
       _ReadSPI
       _WriteSPI
     _OpenSPI
     _WriteSPI
   _OSD_write
     _WriteSPI
     ___wmul
   _OpenUSART
   _Str_output
     _OSD_write
       _WriteSPI
       ___wmul
     _strlen (ARG)
   _atoi
     ___wmul
     _isdigit
   _get_claw
   _get_wrist
   _putsUSART
     _WriteUSART
   _read_an
   _sprintf
     ___lwdiv
     ___lwmod
       ___lwdiv (ARG)
   _strlen
   _strtok
     _strcspn
       _strchr
     _strspn
       _strchr

 _isr (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             5FF      0       0      17        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK5           100      0       0      16        0.0%
BANK5              100      0       0      14        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100     A4      A6       7       64.8%
BITBANK0            80      0       0       4        0.0%
BANK0               80      0       0       5        0.0%
BITCOMRAM           7F      0       0       0        0.0%
COMRAM              7F     45      49       1       57.5%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      EF      15        0.0%
DATA                 0      0      EF       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.30 build 55553 
Symbol Table                                                                                   Thu Jun 02 11:03:11 2016

                      _n 0049              _SSPSTATbits 000FC7                       l90 0C00  
                     l91 0CB8      ___wmul@multiplicand 0012              __CFG_BORV$3 000000  
           __CFG_CP0$OFF 000000             __CFG_CP1$OFF 000000             get_claw@claw 0012  
           __CFG_CP2$OFF 000000             __CFG_CP3$OFF 000000              __CFG_OSC$HS 000000  
                    l112 166A                      l106 1628                      l300 12F8  
                    l231 1370                      l119 1640                      l240 139A  
                    l233 1374                      l234 1376                      l308 16B2  
                    l237 1390                      l238 13AE                      l263 16F0  
                    l239 1396                      l248 1728                      l265 16EC  
                    l291 12B4                      l295 12C8                      l296 12CA  
                    l297 12D4                      l298 12D6                      l487 10CE  
                    l488 10D6                      l930 12FA                      l932 1358  
                    l916 145C                      l926 1404                      l849 14B2  
                    l859 1546                      l891 10E8                      l893 118E  
                    l896 1186             __CFG_CPB$OFF 000000             __CFG_CPD$OFF 000000  
                    u710 0870                      u718 0872                      _isr 0008  
                    wreg 000FE8              main@heading 01A0             __CFG_LVP$OFF 000000  
           __CFG_WDT$OFF 000000                     l2001 1052                     l2005 1062  
                   l2033 1500                     l2201 16AA                     l2009 109C  
                   l2017 1596                     l2027 14C6                     l2211 1480  
                   l2019 159A                     l2213 1488                     l2071 1718  
                   l2223 14A8                     l2215 148C                     l2231 151C  
                   l2145 137A                     l2233 1524                     l2163 1576  
                   l2235 1528                     l2149 139E                     l2253 1418  
                   l2245 13C0                     l2239 153C                     l2271 131E  
                   l2255 1420                     l2247 13C8                     l1901 0DC2  
                   l1735 0BA6                     l1727 0B12                     l1719 08FC  
                   l1825 12B6                     l1817 12A8                     l1931 0E64  
                   l1907 0DF0                     l1739 0BE0                     l1683 0752  
                   l1917 0E28                     l1945 0ED8                     l1937 0E80  
                   l1875 1676                     l1939 0E86                     l1947 0EE0  
                   l1949 0EF6                     l1981 117E                     l1973 113A  
                   l1965 10FA                     l1887 164C                     l1895 0DA8  
                   l1987 100C                     l1989 1010                     ?_isr 0001  
                   STR_1 068B                     STR_2 06AB                     STR_3 06C3  
                   STR_4 06B8                     STR_5 06CD                     STR_6 06DC  
                   STR_7 06D6                     STR_8 06E1                     STR_9 06E1  
                   u1407 0F42                     u1417 0F52                     u1427 0F60  
                   u1437 0F6E                     u1447 0FF0                     u1457 0FFE  
                   u1377 160E                     u1387 0F26                     u1397 0F34  
                   _PIE1 000F9D              main@ex_temp 0180                     _atoi 100A  
                   _main 06E4                     fsr0h 000FEA                     fsr1h 000FE2  
                   fsr0l 000FE9                     fsr2h 000FDA                     fsr1l 000FE1  
                   indf2 000FDF                     fsr2l 000FD9                     pclat 000FFA  
                   prodh 000FF4                     prodl 000FF3                     start 0014  
          __CFG_IESO$OFF 000000            __CFG_MCLRE$ON 000000          __end_of_ReadSPI 1730  
        __end_of_OpenSPI 13B6                    ??_isr 0001             OSD_write@pos 001E  
                  ?_atoi 0016                    ?_main 0001                    _T0CON 000FD5  
        __end_of___lwdiv 14BC          __end_of___lwmod 1550                    _RCREG 000FAE  
                  _RCSTA 000FAB                    _SPBRG 000FAF                    _TRISA 000F92  
                  _TRISB 000F93                    _TRISC 000F94                    _TRISD 000F95  
                  _TRISE 000F96                    _TXREG 000FAD                    _TXSTA 000FAC  
          __CFG_PWRT$OFF 000000            __CFG_WRT0$OFF 000000            __CFG_WRT1$OFF 000000  
          __CFG_WRT2$OFF 000000            __CFG_WRT3$OFF 000000             main@int_temp 0182  
         __CFG_EBTR0$OFF 000000           __CFG_FCMEN$OFF 000000           __CFG_EBTR1$OFF 000000  
         __CFG_EBTR2$OFF 000000           __CFG_EBTR3$OFF 000000            __CFG_WRTB$OFF 000000  
          __CFG_WRTC$OFF 000000            __CFG_WRTD$OFF 000000           __CFG_EBTRB$OFF 000000  
        __end_of_dpowers 068B             main@osd_buff 013C         __end_of_OSD_disp 158C  
       __end_of_OSD_init 100A          __end_of_read_an 1634          __end_of_isdigit 16B2  
                  atoi@a 001B                    atoi@s 0016           __CFG_BOREN$OFF 000000  
                  tablat 000FF5       __size_of_OSD_write 0072                    status 000FD8  
        __end_of_sprintf 0F04          __end_of_strcspn 1466           __CFG_PBADEN$ON 000000  
         WriteUSART@data 0010          __initialization 16F2             __end_of_atoi 10D8  
           __end_of_main 0D9E                   ??_atoi 0018                   ??_main 0042  
          __activetblptr 000002            OSD_write@_col 0016            OSD_write@_row 001B  
          OSD_write@posh 001D            OSD_write@posl 001C                   _ADCON0 000FC2  
                 _ADCON1 000FC1                   _ADCON2 000FC0                   _ADRESH 000FC4  
       __end_of_WriteSPI 16F2                   i2l1667 11E2                   _INTCON 000FF2  
                 _SPBRGH 000FB0                   _SSPBUF 000FC9         __end_of_char_map 0681  
              ??_ReadSPI 0010                ??_OpenSPI 0012            main@int_press 015E  
         __CFG_XINST$OFF 000000         __end_of_get_claw 1688       __size_of_OpenUSART 006A  
                 ___wmul 15C6                ??___lwdiv 0014                ??___lwmod 001C  
      __end_of_OSD_write 1290          WriteSPI@TempVar 0010                   _strchr 12FA  
                 _strlen 158C                   _strtok 10D8                   _strspn 13B6  
              ??_read_an 0010                ??_isdigit 0010             __mediumconst 0000  
                 tblptrh 000FF7                   tblptrl 000FF6                   tblptru 000FF8  
          main@out_count 019E                ??_sprintf 0036                ??_strcspn 001D  
             __accesstop 0080  __end_of__initialization 1700               _Str_output 14BC  
             _WriteUSART 170A           __pcstackCOMRAM 0001                ?_OSD_disp 0001  
              ?_OSD_init 0001        __end_of_OpenUSART 12FA       __size_of_get_wrist 002A  
             __pbssBANK1 01A4           OSD_write@_font 0017                  ?___wmul 0010  
             ??_OSD_disp 0012               ??_OSD_init 0015            putsUSART@data 0011  
              ?_WriteSPI 0001                  ?_strchr 0010                  ?_strlen 0010  
                ?_strtok 0020                  ?_strspn 0018       __size_of_putsUSART 0026  
                _SSPCON1 000FC6                ?_get_claw 0010                  _SSPSTAT 000FC7  
                _ReadSPI 171E              ?_Str_output 0020                  _OpenSPI 135A  
                __Hparam 0000                  __Lparam 0000              ?_WriteUSART 0001  
      __end_of_get_wrist 165E          __size_of___wmul 003A                  ___lwdiv 1466  
                ___lwmod 150A             __psmallconst 0600          __CFG_STVREN$OFF 000000  
                __pcinit 16F2                  __ramtop 0600               ??_WriteSPI 0010  
                __ptext0 06E4                  __ptext1 10D8                  __ptext2 13B6  
                __ptext3 140E                  __ptext4 12FA                  __ptext5 158C  
                __ptext6 0D9E                  __ptext7 150A                  __ptext8 1466  
                __ptext9 1600          __size_of_strchr 0060          __size_of_strlen 003A  
        __size_of_strtok 00B8          __size_of_strspn 0058                  _dpowers 0681  
                _read_an 1600                  _isdigit 1688             __size_of_isr 1216  
             ??_get_claw 0012                  _sprintf 0D9E                  _strcspn 140E  
         __pintcode_body 1190     end_of_initialization 1700            __Lmediumconst 0000  
                int_func 1190                _RCSTAbits 000FAB                  postdec2 000FDD  
       WriteSPI@data_out 0011                  postinc2 000FDE        __end_of_putsUSART 16D8  
          Str_output@col 0022            Str_output@num 0026            Str_output@row 0020  
                strlen@s 0010                  strspn@i 001E                _PORTAbits 000F80  
              _PORTBbits 000F81                _PORTCbits 000F82                _PORTDbits 000F83  
            OSD_disp@_on 0013              OSD_disp@vm0 0014                _OSD_write 121E  
              _TRISAbits 000F92                _TRISCbits 000F94      __size_of_Str_output 004E  
    __size_of_WriteUSART 0014                _TXSTAbits 000FAC           get_wrist@wrist 0012  
             main@output 0184           __end_of___wmul 1600         OpenSPI@smp_phase 0011  
      __size_of_OSD_disp 003C        __size_of_OSD_init 0106           __end_of_strchr 135A  
         __end_of_strlen 15C6           __end_of_strtok 1190           __end_of_strspn 140E  
    start_initialization 16F2               ?_OSD_write 0016           ReadSPI@TempVar 0010  
            __end_of_isr 121E         OpenSPI@sync_mode 0012                _OpenUSART 1290  
               ??___wmul 0014               read_an@num 0012         __CFG_LPT1OSC$OFF 000000  
            Str_output@n 0028                 ??_strchr 0015                 ??_strlen 0012  
               ??_strtok 0025                 ??_strspn 001D        __size_of_WriteSPI 001A  
            __pbssCOMRAM 0046            __pcstackBANK1 0100      __end_of__stringdata 06E3  
           _isdigit$2144 0011        __size_of_get_claw 002A               ?_OpenUSART 0010  
            sprintf@_val 003C              sprintf@flag 003A              sprintf@prec 003B  
               ?_ReadSPI 0001             ??_Str_output 0027                 ?_OpenSPI 0010  
       ___lwdiv@dividend 0010        __CFG_CCP2MX$PORTC 000000             ??_WriteUSART 0010  
              __pintcode 0008                 ?___lwdiv 0010                 ?___lwmod 0018  
       main@osd_buff_870 0160                _get_wrist 1634              __smallconst 0600  
               ?_read_an 0001                 ?_isdigit 0001              ??_OSD_write 0018  
     __end_of_Str_output 150A         ___lwdiv@quotient 0015                 ?_sprintf 001E  
               ?_strcspn 0018       __end_of_WriteUSART 171E                _recv_flag 01A5  
              _recv_buff 01A4           ___wmul@product 0014                 _LATCbits 000F8B  
               _LATEbits 000F8D                 _PIE1bits 000F9D                 _PIR1bits 000F9E  
       __CFG_WDTPS$32768 000000                 _OSD_disp 1550                 _OSD_init 0F04  
         read_an@channel 0011          OpenSPI@bus_mode 0010               _ADCON0bits 000FC2  
              _putsUSART 16B2              __stringdata 068B        ___wmul@multiplier 0010  
             ?_get_wrist 0010                main@check 019C                main@depth 017E  
              main@temp1 0198                main@temp2 019A                main@pitch 015A  
              main@token 01A2              _INTCON2bits 000FF1              ??_OpenUSART 0012  
        OpenUSART@config 0015         __size_of_ReadSPI 0012                 __Hrparam 0000  
               __Lrparam 0000         __size_of_OpenSPI 005C         __size_of___lwdiv 0056  
       __size_of___lwmod 0046                 _WriteSPI 16D8               ?_putsUSART 0011  
               _char_map 0601         __size_of_read_an 0034         __size_of_isdigit 002A  
        ___lwdiv@divisor 0012          ___lwdiv@counter 0017                 __ptext10 16B2  
               __ptext11 170A                 __ptext20 0F04                 __ptext12 1634  
               __ptext21 135A                 __ptext13 165E                 __ptext22 1550  
               __ptext14 100A                 __ptext23 16D8                 __ptext15 1688  
               __ptext24 171E                 __ptext16 14BC                 __ptext17 121E  
               __ptext18 15C6                 __ptext19 1290                 _get_claw 165E  
       __size_of_sprintf 0166         __size_of_strcspn 0058            __size_of_atoi 00CE  
          __size_of_main 06BA                 atoi@sign 001A                 main@buff 0100  
               main@roll 015C              ??_get_wrist 0012               _INTCONbits 000FF2  
         OpenUSART@spbrg 0010                 isdigit@c 0012                 intlevel2 0000  
              sprintf@ap 0038                sprintf@sp 001E                strchr@chr 0013  
       ___lwmod@dividend 0018                strchr@ptr 0010                strcspn@s1 0018  
              strcspn@s2 001A              ??_putsUSART 0013           Str_output@word 0024  
               sprintf@c 0041                 sprintf@f 0020          ___lwmod@divisor 001A  
               strlen@cp 0014          ___lwmod@counter 001D                 strcspn@i 001E  
               strtok@s1 0020                 strtok@s2 0022                 strspn@s1 0018  
               strspn@s2 001A              _SSPCON1bits 000FC6                 strtok@sp 0046  
           _USART_Status 0048  
